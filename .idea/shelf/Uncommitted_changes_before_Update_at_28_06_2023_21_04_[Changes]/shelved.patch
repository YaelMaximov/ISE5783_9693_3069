Index: unittests/pictures/Base.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pictures;\r\n\r\nimport geometries.Geometries;\r\nimport geometries.Polygon;\r\nimport primitives.Color;\r\nimport primitives.Material;\r\nimport primitives.Point;\r\nimport primitives.Vector;\r\n\r\nimport java.util.List;\r\n\r\npublic class Base {\r\n    Cube c1;\r\n    Cube c2;\r\n    Cube c3;\r\n    final public double Height=1.5d;\r\n    public Base(Point p1, double zx, double y,double k) throws IllegalAccessException {\r\n        c1 = new Cube(p1, zx, Height);\r\n        Point start = p1.add(new Vector((zx-k*zx)/2, Height, (zx-k*zx)/2));\r\n        c2 = new Cube(start, zx * k, y - 2 * Height);\r\n        start = p1.add(new Vector(0, y - Height, 0));\r\n        c3 = new Cube(start, zx, Height);\r\n    }\r\n\r\n    public Vector getC1Normal(Point p) throws IllegalAccessException {\r\n        Vector normal=c1.getCubeTopNormal(p);\r\n        return normal;\r\n    }\r\n    public List<Point> points() {\r\n        return  List.of(c1.p2,c1.p3,c1.p4);\r\n\r\n    }\r\n\r\n    public Geometries getGeometries() {\r\n        return new Geometries(c1.getGeometries(),c2.getGeometries(),c3.getGeometries());\r\n    }\r\n    public Base setBaseEmission(Color color1,Color color2) {\r\n        c1 = c1.setCubeEmission(color1);\r\n        c2 = c2.setCubeEmission(color2);\r\n        c3 = c3.setCubeEmission(color1);\r\n\r\n        return this;\r\n    }\r\n    public Base setBaseMaterial(Material mt) {\r\n        c1 = c1.setCubeMaterial(mt);\r\n        c2 = c2.setCubeMaterial(mt);\r\n        c3 = c3.setCubeMaterial(mt);\r\n\r\n        return this;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittests/pictures/Base.java b/unittests/pictures/Base.java
--- a/unittests/pictures/Base.java	
+++ b/unittests/pictures/Base.java	
@@ -10,9 +10,9 @@
 import java.util.List;
 
 public class Base {
-    Cube c1;
-    Cube c2;
-    Cube c3;
+    private Cube c1;
+    private Cube c2;
+    private Cube c3;
     final public double Height=1.5d;
     public Base(Point p1, double zx, double y,double k) throws IllegalAccessException {
         c1 = new Cube(p1, zx, Height);
@@ -21,16 +21,6 @@
         start = p1.add(new Vector(0, y - Height, 0));
         c3 = new Cube(start, zx, Height);
     }
-
-    public Vector getC1Normal(Point p) throws IllegalAccessException {
-        Vector normal=c1.getCubeTopNormal(p);
-        return normal;
-    }
-    public List<Point> points() {
-        return  List.of(c1.p2,c1.p3,c1.p4);
-
-    }
-
     public Geometries getGeometries() {
         return new Geometries(c1.getGeometries(),c2.getGeometries(),c3.getGeometries());
     }
@@ -48,4 +38,11 @@
 
         return this;
     }
+    public Vector getC1Normal(Point p) throws IllegalAccessException {
+        Vector normal=c1.getCubeTopNormal(p);
+        return normal;
+    }
+    public List<Point> points() {
+        return  List.of(c1.p2,c1.p3,c1.p4);
+    }
 }
Index: unittests/pictures/CylinderBase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pictures;\r\n\r\nimport geometries.Cylinder;\r\nimport geometries.Geometries;\r\nimport primitives.*;\r\n\r\nimport java.util.List;\r\n\r\npublic class CylinderBase extends Base {\r\n    Cylinder c1;\r\n    Cylinder c2;\r\n    Cylinder c3;\r\n    Cylinder c4;\r\n\r\n    Cylinder c121;\r\n    Cylinder c231;\r\n    Cylinder c341;\r\n    Cylinder c411;\r\n\r\n    Cylinder c122;\r\n    Cylinder c232;\r\n    Cylinder c342;\r\n    Cylinder c412;\r\n\r\n\r\n\r\n\r\n\r\n    public CylinderBase(Point p1,double zx, double y,double k) throws IllegalAccessException {\r\n        super(p1,zx,y,k);\r\n        double move=(zx-k*zx)/4;\r\n        Point center1=p1.add(new Vector(move, Height, move));\r\n        Vector normal=getC1Normal(center1);\r\n        Ray ray1=new Ray(center1,normal);\r\n        double radius=move*0.7;\r\n        double height=y-2*Height;\r\n        c1=new Cylinder(ray1,radius,height);\r\n\r\n        List<Point> points=points();\r\n        Point center2 = points.get(0).add(new Vector(-move, Height, move));\r\n        Ray ray2=new Ray(center2,normal);\r\n        c2=new Cylinder(ray2,radius,height);\r\n\r\n        Point center3 = points.get(1).add(new Vector(-move, Height, -move));\r\n        Ray ray3=new Ray(center3,normal);\r\n        c3=new Cylinder(ray3,radius,height);\r\n\r\n        Point center4 = points.get(2).add(new Vector(move, Height, -move));\r\n        Ray ray4=new Ray(center4,normal);\r\n        c4=new Cylinder(ray4,radius,height);\r\n\r\n         double d=(center1.distance(center2))/3;\r\n         c121=new Cylinder(new Ray(center1.add(new Vector(d*1,0,0)),normal),radius,height);\r\n         c122=new Cylinder(new Ray(center1.add(new Vector(2*d,0,0)),normal),radius,height);\r\n\r\n        c231=new Cylinder(new Ray(center2.add(new Vector(0,0,1*d)),normal),radius,height);\r\n        c232=new Cylinder(new Ray(center2.add(new Vector(0,0,2*d)),normal),radius,height);\r\n\r\n        c341=new Cylinder(new Ray(center3.add(new Vector(-1*d,0,0)),normal),radius,height);\r\n        c342=new Cylinder(new Ray(center3.add(new Vector(-2*d,0,0)),normal),radius,height);\r\n\r\n        c411=new Cylinder(new Ray(center1.add(new Vector(0,0,d*1)),normal),radius,height);\r\n        c412=new Cylinder(new Ray(center1.add(new Vector(0,0,2*d)),normal),radius,height);\r\n\r\n\r\n\r\n    }\r\n\r\n    public Geometries getGeometries() {\r\n        return new Geometries(super.getGeometries(),c1,c2,c3,c4,\r\n                c121,c122,c231,c232,\r\n                c341,c342,c411,c412);\r\n    }\r\n\r\n    public CylinderBase setCylinderBaseEmission(Color color1,Color color2) {\r\n        super.setBaseEmission(color1,color2);\r\n        c1 = (Cylinder) c1.setEmission(color1);\r\n        c2 =(Cylinder) c2.setEmission(color1);\r\n        c3 = (Cylinder) c3.setEmission(color1);\r\n        c4 =(Cylinder) c4.setEmission(color1);\r\n        c121 = (Cylinder) c121.setEmission(color1);\r\n        c231 =(Cylinder) c231.setEmission(color1);\r\n        c341 = (Cylinder) c341.setEmission(color1);\r\n        c411 =(Cylinder) c411.setEmission(color1);\r\n        c122 = (Cylinder) c122.setEmission(color1);\r\n        c232 =(Cylinder) c232.setEmission(color1);\r\n        c342 = (Cylinder) c342.setEmission(color1);\r\n        c412 =(Cylinder) c412.setEmission(color1);\r\n        return this;\r\n    }\r\n    public CylinderBase setCylinderBaseMaterial(Material mt) {\r\n        super.setBaseMaterial(mt);\r\n        c1 = (Cylinder) c1.setMaterial(mt);\r\n        c2 = (Cylinder) c2.setMaterial(mt);\r\n        c3 = (Cylinder) c3.setMaterial(mt);\r\n        c4 = (Cylinder) c4.setMaterial(mt);\r\n        c121 = (Cylinder) c121.setMaterial(mt);\r\n        c231 =(Cylinder) c231.setMaterial(mt);\r\n        c341 = (Cylinder) c341.setMaterial(mt);\r\n        c411 =(Cylinder) c411.setMaterial(mt);\r\n        c122 = (Cylinder) c122.setMaterial(mt);\r\n        c232 =(Cylinder) c232.setMaterial(mt);\r\n        c342 = (Cylinder) c342.setMaterial(mt);\r\n        c412 =(Cylinder) c412.setMaterial(mt);\r\n\r\n        return this;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittests/pictures/CylinderBase.java b/unittests/pictures/CylinderBase.java
--- a/unittests/pictures/CylinderBase.java	
+++ b/unittests/pictures/CylinderBase.java	
@@ -7,20 +7,20 @@
 import java.util.List;
 
 public class CylinderBase extends Base {
-    Cylinder c1;
-    Cylinder c2;
-    Cylinder c3;
-    Cylinder c4;
+    private Cylinder c1;
+    private Cylinder c2;
+    private Cylinder c3;
+    private Cylinder c4;
 
-    Cylinder c121;
-    Cylinder c231;
-    Cylinder c341;
-    Cylinder c411;
+    private Cylinder c121;
+    private Cylinder c231;
+    private Cylinder c341;
+    private Cylinder c411;
 
-    Cylinder c122;
-    Cylinder c232;
-    Cylinder c342;
-    Cylinder c412;
+    private Cylinder c122;
+    private Cylinder c232;
+    private Cylinder c342;
+    private Cylinder c412;
 
 
 
Index: unittests/pictures/Pyramid.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pictures;\r\n\r\nimport geometries.Geometries;\r\nimport geometries.Polygon;\r\nimport geometries.Triangle;\r\nimport primitives.Color;\r\nimport primitives.Material;\r\nimport primitives.Point;\r\nimport primitives.Vector;\r\n\r\npublic class Pyramid {\r\n    Triangle t1;\r\n    Triangle t2;\r\n    Triangle t3;\r\n    Triangle t4;\r\n    Polygon base;\r\n    public Pyramid(Point p1, double zx, double y) throws IllegalAccessException {\r\n        Point p2 = p1.add(new Vector(zx, 0, 0));\r\n        Point p3 = p2.add(new Vector(0, 0, zx));\r\n        Point p4 = p1.add(new Vector(0, 0, zx));\r\n        Point p5 = p1.add(new Vector(zx/2, y, zx/2));\r\n        base = new Polygon(p1,p2,p3,p4);\r\n        t1=new Triangle(p1,p2,p5);\r\n        t2=new Triangle(p2,p3,p5);\r\n        t3=new Triangle(p3,p4,p5);\r\n        t4=new Triangle(p4,p1,p5);\r\n    }\r\n    public Geometries getGeometries() {\r\n        return new Geometries(base,t1,t2,t3,t4);\r\n    }\r\n\r\n    public Pyramid setPyramidEmission(Color color) {\r\n        base = (Polygon) base.setEmission(color);\r\n        t1=(Triangle) t1.setEmission(color);\r\n        t2=(Triangle) t2.setEmission(color);\r\n        t3=(Triangle) t3.setEmission(color);\r\n        t4=(Triangle) t4.setEmission(color);\r\n        return this;\r\n    }\r\n    public Pyramid setPyramidMaterial(Material mt) {\r\n        base = (Polygon) base.setMaterial(mt);\r\n        t1=(Triangle) t1.setMaterial(mt);\r\n        t2=(Triangle) t2.setMaterial(mt);\r\n        t3=(Triangle) t3.setMaterial(mt);\r\n        t4=(Triangle) t4.setMaterial(mt);\r\n        return this;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittests/pictures/Pyramid.java b/unittests/pictures/Pyramid.java
--- a/unittests/pictures/Pyramid.java	
+++ b/unittests/pictures/Pyramid.java	
@@ -9,11 +9,11 @@
 import primitives.Vector;
 
 public class Pyramid {
-    Triangle t1;
-    Triangle t2;
-    Triangle t3;
-    Triangle t4;
-    Polygon base;
+    private Triangle t1;
+    private Triangle t2;
+    private Triangle t3;
+    private Triangle t4;
+    private Polygon base;
     public Pyramid(Point p1, double zx, double y) throws IllegalAccessException {
         Point p2 = p1.add(new Vector(zx, 0, 0));
         Point p3 = p2.add(new Vector(0, 0, zx));
Index: unittests/pictures/TeapotTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//package unittests.special;\r\n//\r\n//import static java.awt.Color.YELLOW;\r\n//\r\n//import org.junit.jupiter.api.Test;\r\n//\r\n//import geometries.Triangle;\r\n//import lighting.PointLight;\r\n//import primitives.Color;\r\n//import primitives.Material;\r\n//import primitives.Point;\r\n//import primitives.Vector;\r\n//import renderer.Camera;\r\n//import renderer.ImageWriter;\r\n//import renderer.RayTracerBasic;\r\n//import scene.Scene;\r\n//\r\n///**\r\n// * Test rendering an image\r\n// *\r\n// * @author Dan\r\n// */\r\n//public class TeapotTest {\r\n//    private final ImageWriter imageWriter = new ImageWriter(\"teapot\", 800, 800);\r\n//\r\n//    private final Camera camera = new Camera(new Point(0, 0, -1000), new Vector(0, 1, 0), new Vector(0, 0, 1)) //\r\n//            .setVPDistance(1000).setVPSize(200, 200) //\r\n//            .setImageWriter(imageWriter) //\r\n//            .setMultithreading(3).setDebugPrint(0.1);\r\n//\r\n//    private final Scene scene = new Scene(\"Test scene\");\r\n//\r\n//    private static final Color color = new Color(200, 0, 0);\r\n//    private static final Material mat = new Material().setkD(0.5).setkS(0.5).setnShininess(60);\r\n//\r\n//    private static Point[] pnts = new Point[] { null, //\r\n//            new Point(40.6266, 28.3457, -1.10804), //\r\n//            new Point(40.0714, 30.4443, -1.10804), //\r\n//            new Point(40.7155, 31.1438, -1.10804), //\r\n//            new Point(42.0257, 30.4443, -1.10804), //\r\n//            new Point(43.4692, 28.3457, -1.10804), //\r\n//            new Point(37.5425, 28.3457, 14.5117), //\r\n//            new Point(37.0303, 30.4443, 14.2938), //\r\n//            new Point(37.6244, 31.1438, 14.5466), //\r\n//            new Point(38.8331, 30.4443, 15.0609), //\r\n//            new Point(40.1647, 28.3457, 15.6274), //\r\n//            new Point(29.0859, 28.3457, 27.1468), //\r\n//            new Point(28.6917, 30.4443, 26.7527), //\r\n//            new Point(29.149, 31.1438, 27.2099), //\r\n//            new Point(30.0792, 30.4443, 28.1402), //\r\n//            new Point(31.1041, 28.3457, 29.165), //\r\n//            new Point(16.4508, 28.3457, 35.6034), //\r\n//            new Point(16.2329, 30.4443, 35.0912), //\r\n//            new Point(16.4857, 31.1438, 35.6853), //\r\n//            new Point(16.9999, 30.4443, 36.894), //\r\n//            new Point(17.5665, 28.3457, 38.2256), //\r\n//            new Point(0.831025, 28.3457, 38.6876), //\r\n//            new Point(0.831025, 30.4443, 38.1324), //\r\n//            new Point(0.831025, 31.1438, 38.7764), //\r\n//            new Point(0.831025, 30.4443, 40.0866), //\r\n//            new Point(0.831025, 28.3457, 41.5301), //\r\n//            new Point(-15.868, 28.3457, 35.6034), //\r\n//            new Point(-15.0262, 30.4443, 35.0912), //\r\n//            new Point(-14.9585, 31.1438, 35.6853), //\r\n//            new Point(-15.3547, 30.4443, 36.894), //\r\n//            new Point(-15.9044, 28.3457, 38.2256), //\r\n//            new Point(-28.3832, 28.3457, 27.1468), //\r\n//            new Point(-27.4344, 30.4443, 26.7527), //\r\n//            new Point(-27.6068, 31.1438, 27.2099), //\r\n//            new Point(-28.4322, 30.4443, 28.1402), //\r\n//            new Point(-29.4421, 28.3457, 29.165), //\r\n//            new Point(-36.2402, 28.3457, 14.5117), //\r\n//            new Point(-35.52, 30.4443, 14.2938), //\r\n//            new Point(-36.0073, 31.1438, 14.5466), //\r\n//            new Point(-37.1767, 30.4443, 15.0609), //\r\n//            new Point(-38.5027, 28.3457, 15.6274), //\r\n//            new Point(-38.9646, 28.3457, -1.10804), //\r\n//            new Point(-38.4094, 30.4443, -1.10804), //\r\n//            new Point(-39.0534, 31.1438, -1.10804), //\r\n//            new Point(-40.3636, 30.4443, -1.10804), //\r\n//            new Point(-41.8071, 28.3457, -1.10804), //\r\n//            new Point(-35.8804, 28.3457, -16.7278), //\r\n//            new Point(-35.3683, 30.4443, -16.5099), //\r\n//            new Point(-35.9624, 31.1438, -16.7627), //\r\n//            new Point(-37.1711, 30.4443, -17.2769), //\r\n//            new Point(-38.5027, 28.3457, -17.8435), //\r\n//            new Point(-27.4238, 28.3457, -29.3629), //\r\n//            new Point(-27.0297, 30.4443, -28.9687), //\r\n//            new Point(-27.4869, 31.1438, -29.426), //\r\n//            new Point(-28.4172, 30.4443, -30.3562), //\r\n//            new Point(-29.4421, 28.3457, -31.3811), //\r\n//            new Point(-14.7887, 28.3457, -37.8195), //\r\n//            new Point(-14.5708, 30.4443, -37.3073), //\r\n//            new Point(-14.8236, 31.1438, -37.9014), //\r\n//            new Point(-15.3379, 30.4443, -39.1101), //\r\n//            new Point(-15.9044, 28.3457, -40.4417), //\r\n//            new Point(0.831025, 28.3457, -40.9036), //\r\n//            new Point(0.831025, 30.4443, -40.3484), //\r\n//            new Point(0.831025, 31.1438, -40.9925), //\r\n//            new Point(0.831025, 30.4443, -42.3027), //\r\n//            new Point(0.831025, 28.3457, -43.7462), //\r\n//            new Point(16.4508, 28.3457, -37.8195), //\r\n//            new Point(16.2329, 30.4443, -37.3073), //\r\n//            new Point(16.4857, 31.1438, -37.9014), //\r\n//            new Point(16.9999, 30.4443, -39.1101), //\r\n//            new Point(17.5665, 28.3457, -40.4417), //\r\n//            new Point(29.0859, 28.3457, -29.3629), //\r\n//            new Point(28.6917, 30.4443, -28.9687), //\r\n//            new Point(29.149, 31.1438, -29.426), //\r\n//            new Point(30.0792, 30.4443, -30.3562), //\r\n//            new Point(31.1041, 28.3457, -31.3811), //\r\n//            new Point(37.5425, 28.3457, -16.7278), //\r\n//            new Point(37.0303, 30.4443, -16.5099), //\r\n//            new Point(37.6244, 31.1438, -16.7627), //\r\n//            new Point(38.8331, 30.4443, -17.2769), //\r\n//            new Point(40.1647, 28.3457, -17.8435), //\r\n//            new Point(48.6879, 17.1865, -1.10804), //\r\n//            new Point(53.2404, 6.22714, -1.10804), //\r\n//            new Point(56.4605, -4.33246, -1.10804), //\r\n//            new Point(57.6819, -14.2925, -1.10804), //\r\n//            new Point(44.979, 17.1865, 17.6758), //\r\n//            new Point(49.1787, 6.22714, 19.4626), //\r\n//            new Point(52.1492, -4.33246, 20.7265), //\r\n//            new Point(53.2759, -14.2925, 21.2059), //\r\n//            new Point(34.8094, 17.1865, 32.8703), //\r\n//            new Point(38.0417, 6.22714, 36.1026), //\r\n//            new Point(40.3279, -4.33246, 38.3889), //\r\n//            new Point(41.1951, -14.2925, 39.2561), //\r\n//            new Point(19.6148, 17.1865, 43.0399), //\r\n//            new Point(21.4017, 6.22714, 47.2396), //\r\n//            new Point(22.6656, -4.33246, 50.2101), //\r\n//            new Point(23.145, -14.2925, 51.3369), //\r\n//            new Point(0.831025, 17.1865, 46.7488), //\r\n//            new Point(0.831025, 6.22714, 51.3013), //\r\n//            new Point(0.831025, -4.33246, 54.5214), //\r\n//            new Point(0.831025, -14.2925, 55.7428), //\r\n//            new Point(-17.9528, 17.1865, 43.0399), //\r\n//            new Point(-19.7397, 6.22714, 47.2396), //\r\n//            new Point(-21.0035, -4.33246, 50.2101), //\r\n//            new Point(-21.4829, -14.2925, 51.3369), //\r\n//            new Point(-33.1474, 17.1865, 32.8703), //\r\n//            new Point(-36.3796, 6.22714, 36.1026), //\r\n//            new Point(-38.6659, -4.33246, 38.3889), //\r\n//            new Point(-39.5331, -14.2925, 39.2561), //\r\n//            new Point(-43.3169, 17.1865, 17.6758), //\r\n//            new Point(-47.5166, 6.22714, 19.4626), //\r\n//            new Point(-50.4871, -4.33246, 20.7265), //\r\n//            new Point(-51.6139, -14.2925, 21.2059), //\r\n//            new Point(-47.0258, 17.1865, -1.10804), //\r\n//            new Point(-51.5784, 6.22714, -1.10804), //\r\n//            new Point(-54.7984, -4.33246, -1.10804), //\r\n//            new Point(-56.0198, -14.2925, -1.10804), //\r\n//            new Point(-43.3169, 17.1865, -19.8919), //\r\n//            new Point(-47.5166, 6.22714, -21.6787), //\r\n//            new Point(-50.4871, -4.33246, -22.9426), //\r\n//            new Point(-51.6139, -14.2925, -23.422), //\r\n//            new Point(-33.1474, 17.1865, -35.0864), //\r\n//            new Point(-36.3796, 6.22714, -38.3187), //\r\n//            new Point(-38.6659, -4.33246, -40.6049), //\r\n//            new Point(-39.5331, -14.2925, -41.4721), //\r\n//            new Point(-17.9528, 17.1865, -45.256), //\r\n//            new Point(-19.7397, 6.22714, -49.4557), //\r\n//            new Point(-21.0035, -4.33246, -52.4262), //\r\n//            new Point(-21.4829, -14.2925, -53.5529), //\r\n//            new Point(0.831025, 17.1865, -48.9649), //\r\n//            new Point(0.831025, 6.22714, -53.5174), //\r\n//            new Point(0.831025, -4.33246, -56.7375), //\r\n//            new Point(0.831025, -14.2925, -57.9589), //\r\n//            new Point(19.6148, 17.1865, -45.256), //\r\n//            new Point(21.4017, 6.22714, -49.4557), //\r\n//            new Point(22.6656, -4.33246, -52.4262), //\r\n//            new Point(23.145, -14.2925, -53.5529), //\r\n//            new Point(34.8094, 17.1865, -35.0864), //\r\n//            new Point(38.0417, 6.22714, -38.3187), //\r\n//            new Point(40.3279, -4.33246, -40.6049), //\r\n//            new Point(41.1951, -14.2925, -41.4721), //\r\n//            new Point(44.979, 17.1865, -19.8919), //\r\n//            new Point(49.1787, 6.22714, -21.6787), //\r\n//            new Point(52.1492, -4.33246, -22.9426), //\r\n//            new Point(53.2759, -14.2925, -23.422), //\r\n//            new Point(55.4611, -22.7202, -1.10804), //\r\n//            new Point(50.5755, -28.9493, -1.10804), //\r\n//            new Point(45.6899, -33.1798, -1.10804), //\r\n//            new Point(43.4692, -35.6115, -1.10804), //\r\n//            new Point(51.2273, -22.7202, 20.3343), //\r\n//            new Point(46.7203, -28.9493, 18.4167), //\r\n//            new Point(42.2133, -33.1798, 16.4991), //\r\n//            new Point(40.1647, -35.6115, 15.6274), //\r\n//            new Point(39.6184, -22.7202, 37.6793), //\r\n//            new Point(36.1496, -28.9493, 34.2106), //\r\n//            new Point(32.6808, -33.1798, 30.7418), //\r\n//            new Point(31.1041, -35.6115, 29.165), //\r\n//            new Point(22.2733, -22.7202, 49.2882), //\r\n//            new Point(20.3557, -28.9493, 44.7813), //\r\n//            new Point(18.4381, -33.1798, 40.2743), //\r\n//            new Point(17.5665, -35.6115, 38.2256), //\r\n//            new Point(0.831025, -22.7202, 53.5221), //\r\n//            new Point(0.831025, -28.9493, 48.6365), //\r\n//            new Point(0.831025, -33.1798, 43.7508), //\r\n//            new Point(0.831025, -35.6115, 41.5301), //\r\n//            new Point(-20.6113, -22.7202, 49.2882), //\r\n//            new Point(-18.6937, -28.9493, 44.7813), //\r\n//            new Point(-16.7761, -33.1798, 40.2743), //\r\n//            new Point(-15.9044, -35.6115, 38.2256), //\r\n//            new Point(-37.9564, -22.7202, 37.6793), //\r\n//            new Point(-34.4876, -28.9493, 34.2106), //\r\n//            new Point(-31.0188, -33.1798, 30.7418), //\r\n//            new Point(-29.4421, -35.6115, 29.165), //\r\n//            new Point(-49.5653, -22.7202, 20.3343), //\r\n//            new Point(-45.0583, -28.9493, 18.4167), //\r\n//            new Point(-40.5513, -33.1798, 16.4991), //\r\n//            new Point(-38.5027, -35.6115, 15.6274), //\r\n//            new Point(-53.7991, -22.7202, -1.10804), //\r\n//            new Point(-48.9135, -28.9493, -1.10804), //\r\n//            new Point(-44.0279, -33.1798, -1.10804), //\r\n//            new Point(-41.8071, -35.6115, -1.10804), //\r\n//            new Point(-49.5653, -22.7202, -22.5504), //\r\n//            new Point(-45.0583, -28.9493, -20.6327), //\r\n//            new Point(-40.5513, -33.1798, -18.7151), //\r\n//            new Point(-38.5027, -35.6115, -17.8435), //\r\n//            new Point(-37.9564, -22.7202, -39.8954), //\r\n//            new Point(-34.4876, -28.9493, -36.4266), //\r\n//            new Point(-31.0188, -33.1798, -32.9578), //\r\n//            new Point(-29.4421, -35.6115, -31.3811), //\r\n//            new Point(-20.6113, -22.7202, -51.5043), //\r\n//            new Point(-18.6937, -28.9493, -46.9973), //\r\n//            new Point(-16.7761, -33.1798, -42.4903), //\r\n//            new Point(-15.9044, -35.6115, -40.4417), //\r\n//            new Point(0.831025, -22.7202, -55.7382), //\r\n//            new Point(0.831025, -28.9493, -50.8525), //\r\n//            new Point(0.831025, -33.1798, -45.9669), //\r\n//            new Point(0.831025, -35.6115, -43.7462), //\r\n//            new Point(22.2733, -22.7202, -51.5043), //\r\n//            new Point(20.3557, -28.9493, -46.9973), //\r\n//            new Point(18.4381, -33.1798, -42.4903), //\r\n//            new Point(17.5665, -35.6115, -40.4417), //\r\n//            new Point(39.6184, -22.7202, -39.8954), //\r\n//            new Point(36.1496, -28.9493, -36.4266), //\r\n//            new Point(32.6808, -33.1798, -32.9578), //\r\n//            new Point(31.1041, -35.6115, -31.3811), //\r\n//            new Point(51.2273, -22.7202, -22.5504), //\r\n//            new Point(46.7203, -28.9493, -20.6327), //\r\n//            new Point(42.2133, -33.1798, -18.7151), //\r\n//            new Point(40.1647, -35.6115, -17.8435), //\r\n//            new Point(42.5031, -37.1772, -1.10804), //\r\n//            new Point(37.3399, -38.5429, -1.10804), //\r\n//            new Point(24.5818, -39.5089, -1.10804), //\r\n//            new Point(0.831025, -39.8754, -1.10804), //\r\n//            new Point(39.2736, -37.1772, 15.2483), //\r\n//            new Point(34.5105, -38.5429, 13.2217), //\r\n//            new Point(22.7411, -39.5089, 8.21414), //\r\n//            new Point(30.4182, -37.1772, 28.4792), //\r\n//            new Point(26.7523, -38.5429, 24.8133), //\r\n//            new Point(17.6941, -39.5089, 15.755), //\r\n//            new Point(17.1873, -37.1772, 37.3345), //\r\n//            new Point(15.1608, -38.5429, 32.5714), //\r\n//            new Point(10.1532, -39.5089, 20.8021), //\r\n//            new Point(0.831025, -37.1772, 40.5641), //\r\n//            new Point(0.831025, -38.5429, 35.4009), //\r\n//            new Point(0.831025, -39.5089, 22.6427), //\r\n//            new Point(-15.5253, -37.1772, 37.3345), //\r\n//            new Point(-13.4987, -38.5429, 32.5714), //\r\n//            new Point(-8.49115, -39.5089, 20.8021), //\r\n//            new Point(-28.7562, -37.1772, 28.4792), //\r\n//            new Point(-25.0903, -38.5429, 24.8133), //\r\n//            new Point(-16.032, -39.5089, 15.755), //\r\n//            new Point(-37.6115, -37.1772, 15.2483), //\r\n//            new Point(-32.8484, -38.5429, 13.2217), //\r\n//            new Point(-21.0791, -39.5089, 8.21414), //\r\n//            new Point(-40.8411, -37.1772, -1.10804), //\r\n//            new Point(-35.6779, -38.5429, -1.10804), //\r\n//            new Point(-22.9198, -39.5089, -1.10804), //\r\n//            new Point(-37.6115, -37.1772, -17.4643), //\r\n//            new Point(-32.8484, -38.5429, -15.4378), //\r\n//            new Point(-21.0791, -39.5089, -10.4302), //\r\n//            new Point(-28.7562, -37.1772, -30.6952), //\r\n//            new Point(-25.0903, -38.5429, -27.0294), //\r\n//            new Point(-16.032, -39.5089, -17.9711), //\r\n//            new Point(-15.5253, -37.1772, -39.5506), //\r\n//            new Point(-13.4987, -38.5429, -34.7875), //\r\n//            new Point(-8.49115, -39.5089, -23.0181), //\r\n//            new Point(0.831025, -37.1772, -42.7802), //\r\n//            new Point(0.831025, -38.5429, -37.6169), //\r\n//            new Point(0.831025, -39.5089, -24.8588), //\r\n//            new Point(17.1873, -37.1772, -39.5506), //\r\n//            new Point(15.1608, -38.5429, -34.7875), //\r\n//            new Point(10.1532, -39.5089, -23.0181), //\r\n//            new Point(30.4182, -37.1772, -30.6952), //\r\n//            new Point(26.7523, -38.5429, -27.0294), //\r\n//            new Point(17.6941, -39.5089, -17.9711), //\r\n//            new Point(39.2736, -37.1772, -17.4643), //\r\n//            new Point(34.5105, -38.5429, -15.4378), //\r\n//            new Point(22.7411, -39.5089, -10.4302), //\r\n//            new Point(-44.6497, 17.6861, -1.10804), //\r\n//            new Point(-57.9297, 17.5862, -1.10804), //\r\n//            new Point(-67.7453, 16.8867, -1.10804), //\r\n//            new Point(-73.8301, 14.9879, -1.10804), //\r\n//            new Point(-75.9176, 11.2904, -1.10804), //\r\n//            new Point(-44.2055, 18.6855, 3.68876), //\r\n//            new Point(-58.3252, 18.5699, 3.68876), //\r\n//            new Point(-68.6891, 17.7611, 3.68876), //\r\n//            new Point(-75.0724, 15.5657, 3.68876), //\r\n//            new Point(-77.2501, 11.2904, 3.68876), //\r\n//            new Point(-43.2284, 20.884, 5.28769), //\r\n//            new Point(-59.1955, 20.7341, 5.28769), //\r\n//            new Point(-70.7655, 19.6848, 5.28769), //\r\n//            new Point(-77.8053, 16.8367, 5.28769), //\r\n//            new Point(-80.1814, 11.2904, 5.28769), //\r\n//            new Point(-42.2513, 23.0825, 3.68876), //\r\n//            new Point(-60.0657, 22.8983, 3.68876), //\r\n//            new Point(-72.8419, 21.6085, 3.68876), //\r\n//            new Point(-80.5381, 18.1077, 3.68876), //\r\n//            new Point(-83.1128, 11.2904, 3.68876), //\r\n//            new Point(-41.8071, 24.0819, -1.10804), //\r\n//            new Point(-60.4613, 23.882, -1.10804), //\r\n//            new Point(-73.7857, 22.4829, -1.10804), //\r\n//            new Point(-81.7804, 18.6855, -1.10804), //\r\n//            new Point(-84.4453, 11.2904, -1.10804), //\r\n//            new Point(-42.2513, 23.0825, -5.90483), //\r\n//            new Point(-60.0657, 22.8983, -5.90483), //\r\n//            new Point(-72.8419, 21.6085, -5.90483), //\r\n//            new Point(-80.5381, 18.1077, -5.90483), //\r\n//            new Point(-83.1128, 11.2904, -5.90483), //\r\n//            new Point(-43.2284, 20.884, -7.50376), //\r\n//            new Point(-59.1955, 20.7341, -7.50376), //\r\n//            new Point(-70.7655, 19.6848, -7.50376), //\r\n//            new Point(-77.8053, 16.8367, -7.50376), //\r\n//            new Point(-80.1814, 11.2904, -7.50376), //\r\n//            new Point(-44.2055, 18.6855, -5.90483), //\r\n//            new Point(-58.3252, 18.5699, -5.90483), //\r\n//            new Point(-68.6891, 17.7611, -5.90483), //\r\n//            new Point(-75.0724, 15.5657, -5.90483), //\r\n//            new Point(-77.2501, 11.2904, -5.90483), //\r\n//            new Point(-74.8073, 5.4943, -1.10804), //\r\n//            new Point(-71.2985, -1.50103, -1.10804), //\r\n//            new Point(-65.1248, -8.49634, -1.10804), //\r\n//            new Point(-56.0198, -14.2925, -1.10804), //\r\n//            new Point(-76.0183, 4.93477, 3.68876), //\r\n//            new Point(-72.159, -2.35462, 3.68876), //\r\n//            new Point(-65.4267, -9.55033, 3.68876), //\r\n//            new Point(-55.5757, -15.6249, 3.68876), //\r\n//            new Point(-78.6824, 3.70383, 5.28769), //\r\n//            new Point(-74.0522, -4.23253, 5.28769), //\r\n//            new Point(-66.0909, -11.8691, 5.28769), //\r\n//            new Point(-54.5986, -18.5563, 5.28769), //\r\n//            new Point(-81.3466, 2.47288, 3.68876), //\r\n//            new Point(-75.9454, -6.11044, 3.68876), //\r\n//            new Point(-66.755, -14.1878, 3.68876), //\r\n//            new Point(-53.6214, -21.4877, 3.68876), //\r\n//            new Point(-82.5576, 1.91336, -1.10804), //\r\n//            new Point(-76.8059, -6.96404, -1.10804), //\r\n//            new Point(-67.0569, -15.2418, -1.10804), //\r\n//            new Point(-53.1773, -22.8201, -1.10804), //\r\n//            new Point(-81.3466, 2.47288, -5.90483), //\r\n//            new Point(-75.9454, -6.11044, -5.90483), //\r\n//            new Point(-66.755, -14.1878, -5.90483), //\r\n//            new Point(-53.6214, -21.4877, -5.90483), //\r\n//            new Point(-78.6824, 3.70383, -7.50376), //\r\n//            new Point(-74.0522, -4.23253, -7.50376), //\r\n//            new Point(-66.0909, -11.8691, -7.50376), //\r\n//            new Point(-54.5986, -18.5563, -7.50376), //\r\n//            new Point(-76.0183, 4.93477, -5.90483), //\r\n//            new Point(-72.159, -2.35462, -5.90483), //\r\n//            new Point(-65.4267, -9.55033, -5.90483), //\r\n//            new Point(-55.5757, -15.6249, -5.90483), //\r\n//            new Point(49.1543, 0.630882, -1.10804), //\r\n//            new Point(62.7896, 3.76212, -1.10804), //\r\n//            new Point(68.6967, 11.2904, -1.10804), //\r\n//            new Point(71.939, 20.4176, -1.10804), //\r\n//            new Point(77.5797, 28.3457, -1.10804), //\r\n//            new Point(49.1543, -3.03333, 9.4449), //\r\n//            new Point(63.8305, 1.04519, 8.42059), //\r\n//            new Point(70.0292, 9.70814, 6.1671), //\r\n//            new Point(73.5629, 19.8451, 3.91361), //\r\n//            new Point(80.2446, 28.3457, 2.88929), //\r\n//            new Point(49.1543, -11.0946, 12.9626), //\r\n//            new Point(66.1207, -4.93206, 11.5968), //\r\n//            new Point(72.9605, 6.22714, 8.59214), //\r\n//            new Point(77.1355, 18.5855, 5.58749), //\r\n//            new Point(86.1073, 28.3457, 4.22173), //\r\n//            new Point(49.1543, -19.1559, 9.4449), //\r\n//            new Point(68.4108, -10.9093, 8.42059), //\r\n//            new Point(75.8919, 2.74614, 6.1671), //\r\n//            new Point(80.7081, 17.326, 3.91361), //\r\n//            new Point(91.97, 28.3457, 2.88929), //\r\n//            new Point(49.1543, -22.8201, -1.10804), //\r\n//            new Point(69.4518, -13.6262, -1.10804), //\r\n//            new Point(77.2244, 1.16386, -1.10804), //\r\n//            new Point(82.3321, 16.7534, -1.10804), //\r\n//            new Point(94.6349, 28.3457, -1.10804), //\r\n//            new Point(49.1543, -19.1559, -11.661), //\r\n//            new Point(68.4108, -10.9093, -10.6367), //\r\n//            new Point(75.8919, 2.74614, -8.38317), //\r\n//            new Point(80.7081, 17.326, -6.12968), //\r\n//            new Point(91.97, 28.3457, -5.10536), //\r\n//            new Point(49.1543, -11.0946, -15.1786), //\r\n//            new Point(66.1207, -4.93206, -13.8129), //\r\n//            new Point(72.9605, 6.22714, -10.8082), //\r\n//            new Point(77.1355, 18.5855, -7.80356), //\r\n//            new Point(86.1073, 28.3457, -6.4378), //\r\n//            new Point(49.1543, -3.03333, -11.661), //\r\n//            new Point(63.8305, 1.04519, -10.6367), //\r\n//            new Point(70.0292, 9.70814, -8.38317), //\r\n//            new Point(73.5629, 19.8451, -6.12968), //\r\n//            new Point(80.2446, 28.3457, -5.10536), //\r\n//            new Point(79.6227, 29.5449, -1.10804), //\r\n//            new Point(81.1329, 29.9446, -1.10804), //\r\n//            new Point(81.577, 29.5449, -1.10804), //\r\n//            new Point(80.4222, 28.3457, -1.10804), //\r\n//            new Point(82.4767, 29.6034, 2.63946), //\r\n//            new Point(83.8116, 30.0383, 2.08983), //\r\n//            new Point(83.8515, 29.6268, 1.54019), //\r\n//            new Point(82.1988, 28.3457, 1.29036), //\r\n//            new Point(88.7555, 29.7322, 3.88862), //\r\n//            new Point(89.7049, 30.2444, 3.15578), //\r\n//            new Point(88.8555, 29.8072, 2.42294), //\r\n//            new Point(86.1073, 28.3457, 2.08983), //\r\n//            new Point(95.0343, 29.8611, 2.63946), //\r\n//            new Point(95.5982, 30.4505, 2.08983), //\r\n//            new Point(93.8594, 29.9875, 1.54019), //\r\n//            new Point(90.0158, 28.3457, 1.29036), //\r\n//            new Point(97.8883, 29.9196, -1.10804), //\r\n//            new Point(98.2769, 30.5442, -1.10804), //\r\n//            new Point(96.1339, 30.0695, -1.10804), //\r\n//            new Point(91.7924, 28.3457, -1.10804), //\r\n//            new Point(95.0343, 29.8611, -4.85553), //\r\n//            new Point(95.5982, 30.4505, -4.3059), //\r\n//            new Point(93.8594, 29.9875, -3.75626), //\r\n//            new Point(90.0158, 28.3457, -3.50643), //\r\n//            new Point(88.7555, 29.7322, -6.10469), //\r\n//            new Point(89.7049, 30.2444, -5.37185), //\r\n//            new Point(88.8555, 29.8072, -4.63901), //\r\n//            new Point(86.1073, 28.3457, -4.3059), //\r\n//            new Point(82.4767, 29.6034, -4.85553), //\r\n//            new Point(83.8116, 30.0383, -4.3059), //\r\n//            new Point(83.8515, 29.6268, -3.75626), //\r\n//            new Point(82.1988, 28.3457, -3.50643), //\r\n//            new Point(0.831025, 49.6647, -1.10804), //\r\n//            new Point(10.5134, 48.2657, -1.10804), //\r\n//            new Point(10.0693, 44.868, -1.10804), //\r\n//            new Point(6.42728, 40.6708, -1.10804), //\r\n//            new Point(6.51611, 36.8733, -1.10804), //\r\n//            new Point(9.76642, 48.2657, 2.70243), //\r\n//            new Point(9.35632, 44.868, 2.52698), //\r\n//            new Point(5.9947, 40.6708, 1.09187), //\r\n//            new Point(6.07552, 36.8733, 1.12336), //\r\n//            new Point(7.71453, 48.2657, 5.77547), //\r\n//            new Point(7.39819, 44.868, 5.45913), //\r\n//            new Point(4.80736, 40.6708, 2.8683), //\r\n//            new Point(4.86744, 36.8733, 2.92838), //\r\n//            new Point(4.64149, 48.2657, 7.82736), //\r\n//            new Point(4.46604, 44.868, 7.41726), //\r\n//            new Point(3.03093, 40.6708, 4.05564), //\r\n//            new Point(3.06242, 36.8733, 4.13646), //\r\n//            new Point(0.831025, 48.2657, 8.57438), //\r\n//            new Point(0.831025, 44.868, 8.13023), //\r\n//            new Point(0.831025, 40.6708, 4.48822), //\r\n//            new Point(0.831025, 36.8733, 4.57705), //\r\n//            new Point(-2.97944, 48.2657, 7.82736), //\r\n//            new Point(-2.80399, 44.868, 7.41726), //\r\n//            new Point(-1.36888, 40.6708, 4.05564), //\r\n//            new Point(-1.40037, 36.8733, 4.13646), //\r\n//            new Point(-6.05248, 48.2657, 5.77547), //\r\n//            new Point(-5.73614, 44.868, 5.45913), //\r\n//            new Point(-3.14531, 40.6708, 2.8683), //\r\n//            new Point(-3.20539, 36.8733, 2.92838), //\r\n//            new Point(-8.10437, 48.2657, 2.70243), //\r\n//            new Point(-7.69427, 44.868, 2.52698), //\r\n//            new Point(-4.33265, 40.6708, 1.09187), //\r\n//            new Point(-4.41347, 36.8733, 1.12336), //\r\n//            new Point(-8.85139, 48.2657, -1.10804), //\r\n//            new Point(-8.40724, 44.868, -1.10804), //\r\n//            new Point(-4.76523, 40.6708, -1.10804), //\r\n//            new Point(-4.85406, 36.8733, -1.10804), //\r\n//            new Point(-8.10437, 48.2657, -4.9185), //\r\n//            new Point(-7.69427, 44.868, -4.74305), //\r\n//            new Point(-4.33265, 40.6708, -3.30794), //\r\n//            new Point(-4.41347, 36.8733, -3.33943), //\r\n//            new Point(-6.05248, 48.2657, -7.99154), //\r\n//            new Point(-5.73614, 44.868, -7.6752), //\r\n//            new Point(-3.14531, 40.6708, -5.08437), //\r\n//            new Point(-3.20539, 36.8733, -5.14445), //\r\n//            new Point(-2.97944, 48.2657, -10.0434), //\r\n//            new Point(-2.80399, 44.868, -9.63333), //\r\n//            new Point(-1.36888, 40.6708, -6.27171), //\r\n//            new Point(-1.40037, 36.8733, -6.35253), //\r\n//            new Point(0.831025, 48.2657, -10.7904), //\r\n//            new Point(0.831025, 44.868, -10.3463), //\r\n//            new Point(0.831025, 40.6708, -6.70429), //\r\n//            new Point(0.831025, 36.8733, -6.79312), //\r\n//            new Point(4.64149, 48.2657, -10.0434), //\r\n//            new Point(4.46604, 44.868, -9.63333), //\r\n//            new Point(3.03093, 40.6708, -6.27171), //\r\n//            new Point(3.06242, 36.8733, -6.35253), //\r\n//            new Point(7.71453, 48.2657, -7.99154), //\r\n//            new Point(7.39819, 44.868, -7.6752), //\r\n//            new Point(4.80736, 40.6708, -5.08437), //\r\n//            new Point(4.86744, 36.8733, -5.14445), //\r\n//            new Point(9.76642, 48.2657, -4.9185), //\r\n//            new Point(9.35632, 44.868, -4.74305), //\r\n//            new Point(5.9947, 40.6708, -3.30794), //\r\n//            new Point(6.07552, 36.8733, -3.33943), //\r\n//            new Point(13.8001, 34.3417, -1.10804), //\r\n//            new Point(24.282, 32.6095, -1.10804), //\r\n//            new Point(33.6979, 30.8773, -1.10804), //\r\n//            new Point(37.7841, 28.3457, -1.10804), //\r\n//            new Point(12.795, 34.3417, 3.98234), //\r\n//            new Point(22.4646, 32.6095, 8.09647), //\r\n//            new Point(31.1507, 30.8773, 11.7922), //\r\n//            new Point(34.9202, 28.3457, 13.396), //\r\n//            new Point(10.0391, 34.3417, 8.10003), //\r\n//            new Point(17.4812, 32.6095, 15.5422), //\r\n//            new Point(24.1665, 30.8773, 22.2275), //\r\n//            new Point(27.0677, 28.3457, 25.1286), //\r\n//            new Point(5.9214, 34.3417, 10.856), //\r\n//            new Point(10.0355, 32.6095, 20.5255), //\r\n//            new Point(13.7313, 30.8773, 29.2117), //\r\n//            new Point(15.3351, 28.3457, 32.9812), //\r\n//            new Point(0.831025, 34.3417, 11.8611), //\r\n//            new Point(0.831025, 32.6095, 22.3429), //\r\n//            new Point(0.831025, 30.8773, 31.7589), //\r\n//            new Point(0.831025, 28.3457, 35.845), //\r\n//            new Point(-4.25935, 34.3417, 10.856), //\r\n//            new Point(-8.37348, 32.6095, 20.5255), //\r\n//            new Point(-12.0692, 30.8773, 29.2117), //\r\n//            new Point(-13.673, 28.3457, 32.9812), //\r\n//            new Point(-8.37704, 34.3417, 8.10003), //\r\n//            new Point(-15.8192, 32.6095, 15.5422), //\r\n//            new Point(-22.5045, 30.8773, 22.2275), //\r\n//            new Point(-25.4056, 28.3457, 25.1286), //\r\n//            new Point(-11.133, 34.3417, 3.98234), //\r\n//            new Point(-20.8025, 32.6095, 8.09647), //\r\n//            new Point(-29.4887, 30.8773, 11.7922), //\r\n//            new Point(-33.2582, 28.3457, 13.396), //\r\n//            new Point(-12.1381, 34.3417, -1.10804), //\r\n//            new Point(-22.62, 32.6095, -1.10804), //\r\n//            new Point(-32.0359, 30.8773, -1.10804), //\r\n//            new Point(-36.122, 28.3457, -1.10804), //\r\n//            new Point(-11.133, 34.3417, -6.19841), //\r\n//            new Point(-20.8025, 32.6095, -10.3125), //\r\n//            new Point(-29.4887, 30.8773, -14.0083), //\r\n//            new Point(-33.2582, 28.3457, -15.6121), //\r\n//            new Point(-8.37704, 34.3417, -10.3161), //\r\n//            new Point(-15.8192, 32.6095, -17.7582), //\r\n//            new Point(-22.5045, 30.8773, -24.4435), //\r\n//            new Point(-25.4056, 28.3457, -27.3447), //\r\n//            new Point(-4.25935, 34.3417, -13.072), //\r\n//            new Point(-8.37348, 32.6095, -22.7416), //\r\n//            new Point(-12.0692, 30.8773, -31.4277), //\r\n//            new Point(-13.673, 28.3457, -35.1972), //\r\n//            new Point(0.831025, 34.3417, -14.0771), //\r\n//            new Point(0.831025, 32.6095, -24.559), //\r\n//            new Point(0.831025, 30.8773, -33.9749), //\r\n//            new Point(0.831025, 28.3457, -38.0611), //\r\n//            new Point(5.9214, 34.3417, -13.072), //\r\n//            new Point(10.0355, 32.6095, -22.7416), //\r\n//            new Point(13.7313, 30.8773, -31.4277), //\r\n//            new Point(15.3351, 28.3457, -35.1972), //\r\n//            new Point(10.0391, 34.3417, -10.3161), //\r\n//            new Point(17.4812, 32.6095, -17.7582), //\r\n//            new Point(24.1665, 30.8773, -24.4435), //\r\n//            new Point(27.0677, 28.3457, -27.3447), //\r\n//            new Point(12.795, 34.3417, -6.19841), //\r\n//            new Point(22.4646, 32.6095, -10.3125), //\r\n//            new Point(31.1507, 30.8773, -14.0083), //\r\n//            new Point(34.8094, 17.1865, -35.0864) //\r\n//    };\r\n//\r\n//    public TeapotTest() throws IllegalAccessException {\r\n//    }\r\n//\r\n//    /**\r\n//     * Produce a scene with a 3D model and render it into a png image\r\n//     */\r\n//    @Test\r\n//    public void teapot() throws IllegalAccessException {\r\n//        scene.geometries.add( //\r\n//                new Triangle(pnts[7], pnts[6], pnts[1]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[1], pnts[2], pnts[7]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[8], pnts[7], pnts[2]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[2], pnts[3], pnts[8]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[9], pnts[8], pnts[3]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[3], pnts[4], pnts[9]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[10], pnts[9], pnts[4]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[4], pnts[5], pnts[10]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[12], pnts[11], pnts[6]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[6], pnts[7], pnts[12]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[13], pnts[12], pnts[7]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[7], pnts[8], pnts[13]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[14], pnts[13], pnts[8]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[8], pnts[9], pnts[14]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[15], pnts[14], pnts[9]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[9], pnts[10], pnts[15]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[17], pnts[16], pnts[11]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[11], pnts[12], pnts[17]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[18], pnts[17], pnts[12]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[12], pnts[13], pnts[18]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[19], pnts[18], pnts[13]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[13], pnts[14], pnts[19]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[20], pnts[19], pnts[14]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[14], pnts[15], pnts[20]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[22], pnts[21], pnts[16]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[16], pnts[17], pnts[22]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[23], pnts[22], pnts[17]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[17], pnts[18], pnts[23]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[24], pnts[23], pnts[18]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[18], pnts[19], pnts[24]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[25], pnts[24], pnts[19]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[19], pnts[20], pnts[25]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[27], pnts[26], pnts[21]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[21], pnts[22], pnts[27]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[28], pnts[27], pnts[22]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[22], pnts[23], pnts[28]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[29], pnts[28], pnts[23]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[23], pnts[24], pnts[29]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[30], pnts[29], pnts[24]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[24], pnts[25], pnts[30]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[32], pnts[31], pnts[26]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[26], pnts[27], pnts[32]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[33], pnts[32], pnts[27]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[27], pnts[28], pnts[33]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[34], pnts[33], pnts[28]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[28], pnts[29], pnts[34]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[35], pnts[34], pnts[29]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[29], pnts[30], pnts[35]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[37], pnts[36], pnts[31]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[31], pnts[32], pnts[37]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[38], pnts[37], pnts[32]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[32], pnts[33], pnts[38]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[39], pnts[38], pnts[33]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[33], pnts[34], pnts[39]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[40], pnts[39], pnts[34]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[34], pnts[35], pnts[40]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[42], pnts[41], pnts[36]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[36], pnts[37], pnts[42]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[43], pnts[42], pnts[37]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[37], pnts[38], pnts[43]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[44], pnts[43], pnts[38]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[38], pnts[39], pnts[44]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[45], pnts[44], pnts[39]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[39], pnts[40], pnts[45]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[47], pnts[46], pnts[41]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[41], pnts[42], pnts[47]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[48], pnts[47], pnts[42]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[42], pnts[43], pnts[48]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[49], pnts[48], pnts[43]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[43], pnts[44], pnts[49]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[50], pnts[49], pnts[44]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[44], pnts[45], pnts[50]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[52], pnts[51], pnts[46]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[46], pnts[47], pnts[52]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[53], pnts[52], pnts[47]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[47], pnts[48], pnts[53]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[54], pnts[53], pnts[48]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[48], pnts[49], pnts[54]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[55], pnts[54], pnts[49]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[49], pnts[50], pnts[55]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[57], pnts[56], pnts[51]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[51], pnts[52], pnts[57]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[58], pnts[57], pnts[52]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[52], pnts[53], pnts[58]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[59], pnts[58], pnts[53]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[53], pnts[54], pnts[59]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[60], pnts[59], pnts[54]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[54], pnts[55], pnts[60]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[62], pnts[61], pnts[56]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[56], pnts[57], pnts[62]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[63], pnts[62], pnts[57]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[57], pnts[58], pnts[63]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[64], pnts[63], pnts[58]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[58], pnts[59], pnts[64]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[65], pnts[64], pnts[59]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[59], pnts[60], pnts[65]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[67], pnts[66], pnts[61]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[61], pnts[62], pnts[67]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[68], pnts[67], pnts[62]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[62], pnts[63], pnts[68]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[69], pnts[68], pnts[63]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[63], pnts[64], pnts[69]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[70], pnts[69], pnts[64]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[64], pnts[65], pnts[70]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[72], pnts[71], pnts[66]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[66], pnts[67], pnts[72]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[73], pnts[72], pnts[67]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[67], pnts[68], pnts[73]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[74], pnts[73], pnts[68]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[68], pnts[69], pnts[74]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[75], pnts[74], pnts[69]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[69], pnts[70], pnts[75]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[77], pnts[76], pnts[71]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[71], pnts[72], pnts[77]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[78], pnts[77], pnts[72]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[72], pnts[73], pnts[78]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[79], pnts[78], pnts[73]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[73], pnts[74], pnts[79]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[80], pnts[79], pnts[74]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[74], pnts[75], pnts[80]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[2], pnts[1], pnts[76]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[76], pnts[77], pnts[2]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[3], pnts[2], pnts[77]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[77], pnts[78], pnts[3]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[4], pnts[3], pnts[78]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[78], pnts[79], pnts[4]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[5], pnts[4], pnts[79]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[79], pnts[80], pnts[5]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[85], pnts[10], pnts[5]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[5], pnts[81], pnts[85]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[86], pnts[85], pnts[81]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[81], pnts[82], pnts[86]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[87], pnts[86], pnts[82]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[82], pnts[83], pnts[87]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[88], pnts[87], pnts[83]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[83], pnts[84], pnts[88]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[89], pnts[15], pnts[10]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[10], pnts[85], pnts[89]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[90], pnts[89], pnts[85]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[85], pnts[86], pnts[90]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[91], pnts[90], pnts[86]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[86], pnts[87], pnts[91]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[92], pnts[91], pnts[87]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[87], pnts[88], pnts[92]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[93], pnts[20], pnts[15]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[15], pnts[89], pnts[93]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[94], pnts[93], pnts[89]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[89], pnts[90], pnts[94]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[95], pnts[94], pnts[90]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[90], pnts[91], pnts[95]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[96], pnts[95], pnts[91]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[91], pnts[92], pnts[96]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[97], pnts[25], pnts[20]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[20], pnts[93], pnts[97]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[98], pnts[97], pnts[93]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[93], pnts[94], pnts[98]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[99], pnts[98], pnts[94]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[94], pnts[95], pnts[99]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[100], pnts[99], pnts[95]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[95], pnts[96], pnts[100]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[101], pnts[30], pnts[25]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[25], pnts[97], pnts[101]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[102], pnts[101], pnts[97]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[97], pnts[98], pnts[102]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[103], pnts[102], pnts[98]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[98], pnts[99], pnts[103]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[104], pnts[103], pnts[99]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[99], pnts[100], pnts[104]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[105], pnts[35], pnts[30]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[30], pnts[101], pnts[105]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[106], pnts[105], pnts[101]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[101], pnts[102], pnts[106]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[107], pnts[106], pnts[102]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[102], pnts[103], pnts[107]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[108], pnts[107], pnts[103]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[103], pnts[104], pnts[108]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[109], pnts[40], pnts[35]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[35], pnts[105], pnts[109]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[110], pnts[109], pnts[105]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[105], pnts[106], pnts[110]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[111], pnts[110], pnts[106]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[106], pnts[107], pnts[111]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[112], pnts[111], pnts[107]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[107], pnts[108], pnts[112]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[113], pnts[45], pnts[40]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[40], pnts[109], pnts[113]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[114], pnts[113], pnts[109]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[109], pnts[110], pnts[114]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[115], pnts[114], pnts[110]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[110], pnts[111], pnts[115]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[116], pnts[115], pnts[111]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[111], pnts[112], pnts[116]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[117], pnts[50], pnts[45]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[45], pnts[113], pnts[117]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[118], pnts[117], pnts[113]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[113], pnts[114], pnts[118]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[119], pnts[118], pnts[114]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[114], pnts[115], pnts[119]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[120], pnts[119], pnts[115]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[115], pnts[116], pnts[120]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[121], pnts[55], pnts[50]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[50], pnts[117], pnts[121]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[122], pnts[121], pnts[117]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[117], pnts[118], pnts[122]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[123], pnts[122], pnts[118]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[118], pnts[119], pnts[123]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[124], pnts[123], pnts[119]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[119], pnts[120], pnts[124]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[125], pnts[60], pnts[55]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[55], pnts[121], pnts[125]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[126], pnts[125], pnts[121]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[121], pnts[122], pnts[126]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[127], pnts[126], pnts[122]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[122], pnts[123], pnts[127]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[128], pnts[127], pnts[123]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[123], pnts[124], pnts[128]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[129], pnts[65], pnts[60]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[60], pnts[125], pnts[129]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[130], pnts[129], pnts[125]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[125], pnts[126], pnts[130]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[131], pnts[130], pnts[126]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[126], pnts[127], pnts[131]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[132], pnts[131], pnts[127]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[127], pnts[128], pnts[132]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[133], pnts[70], pnts[65]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[65], pnts[129], pnts[133]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[134], pnts[133], pnts[129]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[129], pnts[130], pnts[134]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[135], pnts[134], pnts[130]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[130], pnts[131], pnts[135]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[136], pnts[135], pnts[131]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[131], pnts[132], pnts[136]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[137], pnts[75], pnts[70]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[70], pnts[133], pnts[137]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[138], pnts[137], pnts[133]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[133], pnts[134], pnts[138]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[139], pnts[138], pnts[134]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[134], pnts[135], pnts[139]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[140], pnts[139], pnts[135]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[135], pnts[136], pnts[140]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[141], pnts[80], pnts[75]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[75], pnts[137], pnts[141]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[142], pnts[141], pnts[137]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[137], pnts[138], pnts[142]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[143], pnts[142], pnts[138]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[138], pnts[139], pnts[143]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[144], pnts[143], pnts[139]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[139], pnts[140], pnts[144]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[81], pnts[5], pnts[80]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[80], pnts[141], pnts[81]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[82], pnts[81], pnts[141]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[141], pnts[142], pnts[82]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[83], pnts[82], pnts[142]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[142], pnts[143], pnts[83]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[84], pnts[83], pnts[143]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[143], pnts[144], pnts[84]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[149], pnts[88], pnts[84]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[84], pnts[145], pnts[149]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[150], pnts[149], pnts[145]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[145], pnts[146], pnts[150]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[151], pnts[150], pnts[146]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[146], pnts[147], pnts[151]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[152], pnts[151], pnts[147]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[147], pnts[148], pnts[152]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[153], pnts[92], pnts[88]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[88], pnts[149], pnts[153]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[154], pnts[153], pnts[149]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[149], pnts[150], pnts[154]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[155], pnts[154], pnts[150]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[150], pnts[151], pnts[155]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[156], pnts[155], pnts[151]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[151], pnts[152], pnts[156]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[157], pnts[96], pnts[92]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[92], pnts[153], pnts[157]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[158], pnts[157], pnts[153]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[153], pnts[154], pnts[158]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[159], pnts[158], pnts[154]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[154], pnts[155], pnts[159]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[160], pnts[159], pnts[155]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[155], pnts[156], pnts[160]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[161], pnts[100], pnts[96]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[96], pnts[157], pnts[161]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[162], pnts[161], pnts[157]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[157], pnts[158], pnts[162]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[163], pnts[162], pnts[158]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[158], pnts[159], pnts[163]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[164], pnts[163], pnts[159]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[159], pnts[160], pnts[164]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[165], pnts[104], pnts[100]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[100], pnts[161], pnts[165]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[166], pnts[165], pnts[161]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[161], pnts[162], pnts[166]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[167], pnts[166], pnts[162]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[162], pnts[163], pnts[167]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[168], pnts[167], pnts[163]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[163], pnts[164], pnts[168]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[169], pnts[108], pnts[104]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[104], pnts[165], pnts[169]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[170], pnts[169], pnts[165]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[165], pnts[166], pnts[170]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[171], pnts[170], pnts[166]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[166], pnts[167], pnts[171]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[172], pnts[171], pnts[167]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[167], pnts[168], pnts[172]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[173], pnts[112], pnts[108]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[108], pnts[169], pnts[173]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[174], pnts[173], pnts[169]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[169], pnts[170], pnts[174]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[175], pnts[174], pnts[170]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[170], pnts[171], pnts[175]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[176], pnts[175], pnts[171]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[171], pnts[172], pnts[176]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[177], pnts[116], pnts[112]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[112], pnts[173], pnts[177]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[178], pnts[177], pnts[173]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[173], pnts[174], pnts[178]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[179], pnts[178], pnts[174]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[174], pnts[175], pnts[179]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[180], pnts[179], pnts[175]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[175], pnts[176], pnts[180]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[181], pnts[120], pnts[116]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[116], pnts[177], pnts[181]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[182], pnts[181], pnts[177]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[177], pnts[178], pnts[182]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[183], pnts[182], pnts[178]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[178], pnts[179], pnts[183]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[184], pnts[183], pnts[179]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[179], pnts[180], pnts[184]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[185], pnts[124], pnts[120]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[120], pnts[181], pnts[185]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[186], pnts[185], pnts[181]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[181], pnts[182], pnts[186]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[187], pnts[186], pnts[182]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[182], pnts[183], pnts[187]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[188], pnts[187], pnts[183]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[183], pnts[184], pnts[188]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[189], pnts[128], pnts[124]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[124], pnts[185], pnts[189]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[190], pnts[189], pnts[185]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[185], pnts[186], pnts[190]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[191], pnts[190], pnts[186]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[186], pnts[187], pnts[191]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[192], pnts[191], pnts[187]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[187], pnts[188], pnts[192]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[193], pnts[132], pnts[128]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[128], pnts[189], pnts[193]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[194], pnts[193], pnts[189]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[189], pnts[190], pnts[194]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[195], pnts[194], pnts[190]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[190], pnts[191], pnts[195]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[196], pnts[195], pnts[191]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[191], pnts[192], pnts[196]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[197], pnts[136], pnts[132]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[132], pnts[193], pnts[197]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[198], pnts[197], pnts[193]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[193], pnts[194], pnts[198]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[199], pnts[198], pnts[194]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[194], pnts[195], pnts[199]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[200], pnts[199], pnts[195]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[195], pnts[196], pnts[200]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[201], pnts[140], pnts[136]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[136], pnts[197], pnts[201]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[202], pnts[201], pnts[197]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[197], pnts[198], pnts[202]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[203], pnts[202], pnts[198]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[198], pnts[199], pnts[203]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[204], pnts[203], pnts[199]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[199], pnts[200], pnts[204]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[205], pnts[144], pnts[140]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[140], pnts[201], pnts[205]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[206], pnts[205], pnts[201]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[201], pnts[202], pnts[206]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[207], pnts[206], pnts[202]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[202], pnts[203], pnts[207]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[208], pnts[207], pnts[203]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[203], pnts[204], pnts[208]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[145], pnts[84], pnts[144]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[144], pnts[205], pnts[145]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[146], pnts[145], pnts[205]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[205], pnts[206], pnts[146]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[147], pnts[146], pnts[206]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[206], pnts[207], pnts[147]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[148], pnts[147], pnts[207]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[207], pnts[208], pnts[148]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[213], pnts[152], pnts[148]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[148], pnts[209], pnts[213]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[214], pnts[213], pnts[209]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[209], pnts[210], pnts[214]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[215], pnts[214], pnts[210]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[210], pnts[211], pnts[215]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[215], pnts[211]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[216], pnts[156], pnts[152]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[152], pnts[213], pnts[216]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[217], pnts[216], pnts[213]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[213], pnts[214], pnts[217]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[218], pnts[217], pnts[214]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[214], pnts[215], pnts[218]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[218], pnts[215]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[219], pnts[160], pnts[156]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[156], pnts[216], pnts[219]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[220], pnts[219], pnts[216]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[216], pnts[217], pnts[220]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[221], pnts[220], pnts[217]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[217], pnts[218], pnts[221]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[221], pnts[218]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[222], pnts[164], pnts[160]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[160], pnts[219], pnts[222]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[223], pnts[222], pnts[219]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[219], pnts[220], pnts[223]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[224], pnts[223], pnts[220]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[220], pnts[221], pnts[224]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[224], pnts[221]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[225], pnts[168], pnts[164]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[164], pnts[222], pnts[225]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[226], pnts[225], pnts[222]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[222], pnts[223], pnts[226]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[227], pnts[226], pnts[223]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[223], pnts[224], pnts[227]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[227], pnts[224]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[228], pnts[172], pnts[168]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[168], pnts[225], pnts[228]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[229], pnts[228], pnts[225]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[225], pnts[226], pnts[229]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[230], pnts[229], pnts[226]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[226], pnts[227], pnts[230]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[230], pnts[227]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[231], pnts[176], pnts[172]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[172], pnts[228], pnts[231]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[232], pnts[231], pnts[228]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[228], pnts[229], pnts[232]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[233], pnts[232], pnts[229]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[229], pnts[230], pnts[233]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[233], pnts[230]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[234], pnts[180], pnts[176]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[176], pnts[231], pnts[234]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[235], pnts[234], pnts[231]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[231], pnts[232], pnts[235]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[236], pnts[235], pnts[232]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[232], pnts[233], pnts[236]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[236], pnts[233]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[237], pnts[184], pnts[180]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[180], pnts[234], pnts[237]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[238], pnts[237], pnts[234]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[234], pnts[235], pnts[238]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[239], pnts[238], pnts[235]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[235], pnts[236], pnts[239]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[239], pnts[236]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[240], pnts[188], pnts[184]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[184], pnts[237], pnts[240]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[241], pnts[240], pnts[237]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[237], pnts[238], pnts[241]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[242], pnts[241], pnts[238]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[238], pnts[239], pnts[242]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[242], pnts[239]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[243], pnts[192], pnts[188]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[188], pnts[240], pnts[243]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[244], pnts[243], pnts[240]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[240], pnts[241], pnts[244]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[245], pnts[244], pnts[241]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[241], pnts[242], pnts[245]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[245], pnts[242]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[246], pnts[196], pnts[192]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[192], pnts[243], pnts[246]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[247], pnts[246], pnts[243]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[243], pnts[244], pnts[247]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[248], pnts[247], pnts[244]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[244], pnts[245], pnts[248]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[248], pnts[245]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[249], pnts[200], pnts[196]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[196], pnts[246], pnts[249]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[250], pnts[249], pnts[246]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[246], pnts[247], pnts[250]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[251], pnts[250], pnts[247]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[247], pnts[248], pnts[251]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[251], pnts[248]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[252], pnts[204], pnts[200]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[200], pnts[249], pnts[252]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[253], pnts[252], pnts[249]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[249], pnts[250], pnts[253]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[254], pnts[253], pnts[250]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[250], pnts[251], pnts[254]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[254], pnts[251]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[255], pnts[208], pnts[204]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[204], pnts[252], pnts[255]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[256], pnts[255], pnts[252]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[252], pnts[253], pnts[256]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[257], pnts[256], pnts[253]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[253], pnts[254], pnts[257]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[257], pnts[254]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[209], pnts[148], pnts[208]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[208], pnts[255], pnts[209]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[210], pnts[209], pnts[255]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[255], pnts[256], pnts[210]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[211], pnts[210], pnts[256]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[256], pnts[257], pnts[211]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[212], pnts[211], pnts[257]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[264], pnts[263], pnts[258]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[258], pnts[259], pnts[264]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[265], pnts[264], pnts[259]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[259], pnts[260], pnts[265]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[266], pnts[265], pnts[260]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[260], pnts[261], pnts[266]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[267], pnts[266], pnts[261]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[261], pnts[262], pnts[267]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[269], pnts[268], pnts[263]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[263], pnts[264], pnts[269]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[270], pnts[269], pnts[264]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[264], pnts[265], pnts[270]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[271], pnts[270], pnts[265]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[265], pnts[266], pnts[271]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[272], pnts[271], pnts[266]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[266], pnts[267], pnts[272]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[274], pnts[273], pnts[268]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[268], pnts[269], pnts[274]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[275], pnts[274], pnts[269]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[269], pnts[270], pnts[275]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[276], pnts[275], pnts[270]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[270], pnts[271], pnts[276]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[277], pnts[276], pnts[271]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[271], pnts[272], pnts[277]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[279], pnts[278], pnts[273]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[273], pnts[274], pnts[279]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[280], pnts[279], pnts[274]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[274], pnts[275], pnts[280]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[281], pnts[280], pnts[275]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[275], pnts[276], pnts[281]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[282], pnts[281], pnts[276]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[276], pnts[277], pnts[282]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[284], pnts[283], pnts[278]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[278], pnts[279], pnts[284]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[285], pnts[284], pnts[279]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[279], pnts[280], pnts[285]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[286], pnts[285], pnts[280]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[280], pnts[281], pnts[286]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[287], pnts[286], pnts[281]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[281], pnts[282], pnts[287]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[289], pnts[288], pnts[283]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[283], pnts[284], pnts[289]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[290], pnts[289], pnts[284]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[284], pnts[285], pnts[290]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[291], pnts[290], pnts[285]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[285], pnts[286], pnts[291]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[292], pnts[291], pnts[286]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[286], pnts[287], pnts[292]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[294], pnts[293], pnts[288]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[288], pnts[289], pnts[294]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[295], pnts[294], pnts[289]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[289], pnts[290], pnts[295]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[296], pnts[295], pnts[290]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[290], pnts[291], pnts[296]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[297], pnts[296], pnts[291]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[291], pnts[292], pnts[297]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[259], pnts[258], pnts[293]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[293], pnts[294], pnts[259]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[260], pnts[259], pnts[294]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[294], pnts[295], pnts[260]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[261], pnts[260], pnts[295]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[295], pnts[296], pnts[261]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[262], pnts[261], pnts[296]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[296], pnts[297], pnts[262]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[302], pnts[267], pnts[262]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[262], pnts[298], pnts[302]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[303], pnts[302], pnts[298]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[298], pnts[299], pnts[303]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[304], pnts[303], pnts[299]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[299], pnts[300], pnts[304]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[305], pnts[304], pnts[300]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[300], pnts[301], pnts[305]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[306], pnts[272], pnts[267]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[267], pnts[302], pnts[306]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[307], pnts[306], pnts[302]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[302], pnts[303], pnts[307]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[308], pnts[307], pnts[303]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[303], pnts[304], pnts[308]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[309], pnts[308], pnts[304]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[304], pnts[305], pnts[309]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[310], pnts[277], pnts[272]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[272], pnts[306], pnts[310]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[311], pnts[310], pnts[306]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[306], pnts[307], pnts[311]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[312], pnts[311], pnts[307]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[307], pnts[308], pnts[312]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[313], pnts[312], pnts[308]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[308], pnts[309], pnts[313]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[314], pnts[282], pnts[277]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[277], pnts[310], pnts[314]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[315], pnts[314], pnts[310]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[310], pnts[311], pnts[315]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[316], pnts[315], pnts[311]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[311], pnts[312], pnts[316]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[317], pnts[316], pnts[312]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[312], pnts[313], pnts[317]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[318], pnts[287], pnts[282]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[282], pnts[314], pnts[318]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[319], pnts[318], pnts[314]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[314], pnts[315], pnts[319]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[320], pnts[319], pnts[315]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[315], pnts[316], pnts[320]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[321], pnts[320], pnts[316]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[316], pnts[317], pnts[321]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[322], pnts[292], pnts[287]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[287], pnts[318], pnts[322]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[323], pnts[322], pnts[318]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[318], pnts[319], pnts[323]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[324], pnts[323], pnts[319]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[319], pnts[320], pnts[324]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[325], pnts[324], pnts[320]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[320], pnts[321], pnts[325]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[326], pnts[297], pnts[292]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[292], pnts[322], pnts[326]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[327], pnts[326], pnts[322]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[322], pnts[323], pnts[327]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[328], pnts[327], pnts[323]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[323], pnts[324], pnts[328]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[329], pnts[328], pnts[324]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[324], pnts[325], pnts[329]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[298], pnts[262], pnts[297]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[297], pnts[326], pnts[298]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[299], pnts[298], pnts[326]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[326], pnts[327], pnts[299]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[300], pnts[299], pnts[327]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[327], pnts[328], pnts[300]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[301], pnts[300], pnts[328]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[328], pnts[329], pnts[301]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[336], pnts[335], pnts[330]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[330], pnts[331], pnts[336]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[337], pnts[336], pnts[331]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[331], pnts[332], pnts[337]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[338], pnts[337], pnts[332]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[332], pnts[333], pnts[338]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[339], pnts[338], pnts[333]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[333], pnts[334], pnts[339]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[341], pnts[340], pnts[335]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[335], pnts[336], pnts[341]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[342], pnts[341], pnts[336]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[336], pnts[337], pnts[342]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[343], pnts[342], pnts[337]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[337], pnts[338], pnts[343]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[344], pnts[343], pnts[338]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[338], pnts[339], pnts[344]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[346], pnts[345], pnts[340]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[340], pnts[341], pnts[346]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[347], pnts[346], pnts[341]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[341], pnts[342], pnts[347]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[348], pnts[347], pnts[342]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[342], pnts[343], pnts[348]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[349], pnts[348], pnts[343]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[343], pnts[344], pnts[349]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[351], pnts[350], pnts[345]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[345], pnts[346], pnts[351]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[352], pnts[351], pnts[346]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[346], pnts[347], pnts[352]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[353], pnts[352], pnts[347]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[347], pnts[348], pnts[353]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[354], pnts[353], pnts[348]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[348], pnts[349], pnts[354]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[356], pnts[355], pnts[350]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[350], pnts[351], pnts[356]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[357], pnts[356], pnts[351]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[351], pnts[352], pnts[357]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[358], pnts[357], pnts[352]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[352], pnts[353], pnts[358]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[359], pnts[358], pnts[353]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[353], pnts[354], pnts[359]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[361], pnts[360], pnts[355]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[355], pnts[356], pnts[361]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[362], pnts[361], pnts[356]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[356], pnts[357], pnts[362]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[363], pnts[362], pnts[357]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[357], pnts[358], pnts[363]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[364], pnts[363], pnts[358]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[358], pnts[359], pnts[364]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[366], pnts[365], pnts[360]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[360], pnts[361], pnts[366]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[367], pnts[366], pnts[361]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[361], pnts[362], pnts[367]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[368], pnts[367], pnts[362]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[362], pnts[363], pnts[368]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[369], pnts[368], pnts[363]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[363], pnts[364], pnts[369]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[331], pnts[330], pnts[365]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[365], pnts[366], pnts[331]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[332], pnts[331], pnts[366]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[366], pnts[367], pnts[332]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[333], pnts[332], pnts[367]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[367], pnts[368], pnts[333]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[334], pnts[333], pnts[368]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[368], pnts[369], pnts[334]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[374], pnts[339], pnts[334]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[334], pnts[370], pnts[374]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[375], pnts[374], pnts[370]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[370], pnts[371], pnts[375]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[376], pnts[375], pnts[371]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[371], pnts[372], pnts[376]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[377], pnts[376], pnts[372]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[372], pnts[373], pnts[377]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[378], pnts[344], pnts[339]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[339], pnts[374], pnts[378]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[379], pnts[378], pnts[374]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[374], pnts[375], pnts[379]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[380], pnts[379], pnts[375]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[375], pnts[376], pnts[380]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[381], pnts[380], pnts[376]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[376], pnts[377], pnts[381]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[382], pnts[349], pnts[344]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[344], pnts[378], pnts[382]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[383], pnts[382], pnts[378]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[378], pnts[379], pnts[383]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[384], pnts[383], pnts[379]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[379], pnts[380], pnts[384]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[385], pnts[384], pnts[380]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[380], pnts[381], pnts[385]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[386], pnts[354], pnts[349]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[349], pnts[382], pnts[386]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[387], pnts[386], pnts[382]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[382], pnts[383], pnts[387]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[388], pnts[387], pnts[383]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[383], pnts[384], pnts[388]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[389], pnts[388], pnts[384]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[384], pnts[385], pnts[389]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[390], pnts[359], pnts[354]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[354], pnts[386], pnts[390]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[391], pnts[390], pnts[386]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[386], pnts[387], pnts[391]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[392], pnts[391], pnts[387]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[387], pnts[388], pnts[392]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[393], pnts[392], pnts[388]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[388], pnts[389], pnts[393]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[394], pnts[364], pnts[359]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[359], pnts[390], pnts[394]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[395], pnts[394], pnts[390]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[390], pnts[391], pnts[395]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[396], pnts[395], pnts[391]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[391], pnts[392], pnts[396]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[397], pnts[396], pnts[392]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[392], pnts[393], pnts[397]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[398], pnts[369], pnts[364]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[364], pnts[394], pnts[398]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[399], pnts[398], pnts[394]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[394], pnts[395], pnts[399]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[400], pnts[399], pnts[395]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[395], pnts[396], pnts[400]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[401], pnts[400], pnts[396]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[396], pnts[397], pnts[401]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[370], pnts[334], pnts[369]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[369], pnts[398], pnts[370]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[371], pnts[370], pnts[398]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[398], pnts[399], pnts[371]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[372], pnts[371], pnts[399]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[399], pnts[400], pnts[372]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[373], pnts[372], pnts[400]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[400], pnts[401], pnts[373]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[403], pnts[407]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[408], pnts[407], pnts[403]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[403], pnts[404], pnts[408]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[409], pnts[408], pnts[404]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[404], pnts[405], pnts[409]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[410], pnts[409], pnts[405]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[405], pnts[406], pnts[410]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[407], pnts[411]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[412], pnts[411], pnts[407]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[407], pnts[408], pnts[412]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[413], pnts[412], pnts[408]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[408], pnts[409], pnts[413]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[414], pnts[413], pnts[409]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[409], pnts[410], pnts[414]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[411], pnts[415]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[416], pnts[415], pnts[411]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[411], pnts[412], pnts[416]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[417], pnts[416], pnts[412]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[412], pnts[413], pnts[417]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[418], pnts[417], pnts[413]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[413], pnts[414], pnts[418]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[415], pnts[419]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[420], pnts[419], pnts[415]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[415], pnts[416], pnts[420]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[421], pnts[420], pnts[416]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[416], pnts[417], pnts[421]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[422], pnts[421], pnts[417]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[417], pnts[418], pnts[422]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[419], pnts[423]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[424], pnts[423], pnts[419]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[419], pnts[420], pnts[424]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[425], pnts[424], pnts[420]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[420], pnts[421], pnts[425]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[426], pnts[425], pnts[421]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[421], pnts[422], pnts[426]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[423], pnts[427]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[428], pnts[427], pnts[423]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[423], pnts[424], pnts[428]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[429], pnts[428], pnts[424]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[424], pnts[425], pnts[429]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[430], pnts[429], pnts[425]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[425], pnts[426], pnts[430]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[427], pnts[431]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[432], pnts[431], pnts[427]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[427], pnts[428], pnts[432]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[433], pnts[432], pnts[428]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[428], pnts[429], pnts[433]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[434], pnts[433], pnts[429]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[429], pnts[430], pnts[434]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[431], pnts[435]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[436], pnts[435], pnts[431]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[431], pnts[432], pnts[436]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[437], pnts[436], pnts[432]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[432], pnts[433], pnts[437]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[438], pnts[437], pnts[433]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[433], pnts[434], pnts[438]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[435], pnts[439]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[440], pnts[439], pnts[435]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[435], pnts[436], pnts[440]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[441], pnts[440], pnts[436]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[436], pnts[437], pnts[441]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[442], pnts[441], pnts[437]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[437], pnts[438], pnts[442]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[439], pnts[443]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[444], pnts[443], pnts[439]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[439], pnts[440], pnts[444]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[445], pnts[444], pnts[440]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[440], pnts[441], pnts[445]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[446], pnts[445], pnts[441]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[441], pnts[442], pnts[446]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[443], pnts[447]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[448], pnts[447], pnts[443]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[443], pnts[444], pnts[448]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[449], pnts[448], pnts[444]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[444], pnts[445], pnts[449]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[450], pnts[449], pnts[445]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[445], pnts[446], pnts[450]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[447], pnts[451]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[452], pnts[451], pnts[447]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[447], pnts[448], pnts[452]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[453], pnts[452], pnts[448]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[448], pnts[449], pnts[453]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[454], pnts[453], pnts[449]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[449], pnts[450], pnts[454]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[451], pnts[455]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[456], pnts[455], pnts[451]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[451], pnts[452], pnts[456]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[457], pnts[456], pnts[452]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[452], pnts[453], pnts[457]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[458], pnts[457], pnts[453]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[453], pnts[454], pnts[458]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[455], pnts[459]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[460], pnts[459], pnts[455]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[455], pnts[456], pnts[460]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[461], pnts[460], pnts[456]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[456], pnts[457], pnts[461]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[462], pnts[461], pnts[457]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[457], pnts[458], pnts[462]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[459], pnts[463]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[464], pnts[463], pnts[459]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[459], pnts[460], pnts[464]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[465], pnts[464], pnts[460]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[460], pnts[461], pnts[465]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[466], pnts[465], pnts[461]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[461], pnts[462], pnts[466]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[402], pnts[463], pnts[403]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[404], pnts[403], pnts[463]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[463], pnts[464], pnts[404]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[405], pnts[404], pnts[464]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[464], pnts[465], pnts[405]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[406], pnts[405], pnts[465]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[465], pnts[466], pnts[406]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[471], pnts[410], pnts[406]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[406], pnts[467], pnts[471]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[472], pnts[471], pnts[467]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[467], pnts[468], pnts[472]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[473], pnts[472], pnts[468]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[468], pnts[469], pnts[473]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[474], pnts[473], pnts[469]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[469], pnts[470], pnts[474]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[475], pnts[414], pnts[410]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[410], pnts[471], pnts[475]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[476], pnts[475], pnts[471]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[471], pnts[472], pnts[476]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[477], pnts[476], pnts[472]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[472], pnts[473], pnts[477]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[478], pnts[477], pnts[473]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[473], pnts[474], pnts[478]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[479], pnts[418], pnts[414]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[414], pnts[475], pnts[479]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[480], pnts[479], pnts[475]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[475], pnts[476], pnts[480]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[481], pnts[480], pnts[476]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[476], pnts[477], pnts[481]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[482], pnts[481], pnts[477]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[477], pnts[478], pnts[482]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[483], pnts[422], pnts[418]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[418], pnts[479], pnts[483]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[484], pnts[483], pnts[479]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[479], pnts[480], pnts[484]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[485], pnts[484], pnts[480]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[480], pnts[481], pnts[485]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[486], pnts[485], pnts[481]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[481], pnts[482], pnts[486]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[487], pnts[426], pnts[422]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[422], pnts[483], pnts[487]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[488], pnts[487], pnts[483]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[483], pnts[484], pnts[488]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[489], pnts[488], pnts[484]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[484], pnts[485], pnts[489]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[490], pnts[489], pnts[485]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[485], pnts[486], pnts[490]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[491], pnts[430], pnts[426]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[426], pnts[487], pnts[491]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[492], pnts[491], pnts[487]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[487], pnts[488], pnts[492]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[493], pnts[492], pnts[488]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[488], pnts[489], pnts[493]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[494], pnts[493], pnts[489]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[489], pnts[490], pnts[494]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[495], pnts[434], pnts[430]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[430], pnts[491], pnts[495]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[496], pnts[495], pnts[491]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[491], pnts[492], pnts[496]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[497], pnts[496], pnts[492]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[492], pnts[493], pnts[497]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[498], pnts[497], pnts[493]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[493], pnts[494], pnts[498]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[499], pnts[438], pnts[434]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[434], pnts[495], pnts[499]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[500], pnts[499], pnts[495]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[495], pnts[496], pnts[500]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[501], pnts[500], pnts[496]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[496], pnts[497], pnts[501]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[502], pnts[501], pnts[497]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[497], pnts[498], pnts[502]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[503], pnts[442], pnts[438]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[438], pnts[499], pnts[503]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[504], pnts[503], pnts[499]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[499], pnts[500], pnts[504]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[505], pnts[504], pnts[500]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[500], pnts[501], pnts[505]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[506], pnts[505], pnts[501]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[501], pnts[502], pnts[506]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[507], pnts[446], pnts[442]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[442], pnts[503], pnts[507]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[508], pnts[507], pnts[503]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[503], pnts[504], pnts[508]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[509], pnts[508], pnts[504]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[504], pnts[505], pnts[509]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[510], pnts[509], pnts[505]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[505], pnts[506], pnts[510]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[511], pnts[450], pnts[446]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[446], pnts[507], pnts[511]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[512], pnts[511], pnts[507]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[507], pnts[508], pnts[512]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[513], pnts[512], pnts[508]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[508], pnts[509], pnts[513]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[514], pnts[513], pnts[509]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[509], pnts[510], pnts[514]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[515], pnts[454], pnts[450]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[450], pnts[511], pnts[515]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[516], pnts[515], pnts[511]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[511], pnts[512], pnts[516]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[517], pnts[516], pnts[512]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[512], pnts[513], pnts[517]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[518], pnts[517], pnts[513]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[513], pnts[514], pnts[518]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[519], pnts[458], pnts[454]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[454], pnts[515], pnts[519]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[520], pnts[519], pnts[515]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[515], pnts[516], pnts[520]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[521], pnts[520], pnts[516]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[516], pnts[517], pnts[521]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[522], pnts[521], pnts[517]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[517], pnts[518], pnts[522]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[523], pnts[462], pnts[458]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[458], pnts[519], pnts[523]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[524], pnts[523], pnts[519]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[519], pnts[520], pnts[524]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[525], pnts[524], pnts[520]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[520], pnts[521], pnts[525]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[526], pnts[525], pnts[521]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[521], pnts[522], pnts[526]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[527], pnts[466], pnts[462]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[462], pnts[523], pnts[527]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[528], pnts[527], pnts[523]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[523], pnts[524], pnts[528]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[529], pnts[528], pnts[524]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[524], pnts[525], pnts[529]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[530], pnts[529], pnts[525]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[525], pnts[526], pnts[530]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[467], pnts[406], pnts[466]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[466], pnts[527], pnts[467]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[468], pnts[467], pnts[527]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[527], pnts[528], pnts[468]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[469], pnts[468], pnts[528]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[528], pnts[529], pnts[469]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[470], pnts[469], pnts[529]).setEmission(color).setMaterial(mat), //\r\n//                new Triangle(pnts[529], pnts[530], pnts[470]).setEmission(color).setMaterial(mat) //\r\n//        );\r\n//        scene.lights.add(new PointLight(new Color(500, 500, 500), new Point(100, 0, -100)).setkQ(0.000001));\r\n//\r\n//        camera.setRayTracer(new RayTracerBasic(scene)).renderImage().printGrid(50, new Color(YELLOW)).writeToImage();\r\n//    }\r\n//\r\n//}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittests/pictures/TeapotTest.java b/unittests/pictures/TeapotTest.java
--- a/unittests/pictures/TeapotTest.java	
+++ b/unittests/pictures/TeapotTest.java	
@@ -1,1576 +1,1576 @@
-//package unittests.special;
-//
-//import static java.awt.Color.YELLOW;
-//
-//import org.junit.jupiter.api.Test;
-//
-//import geometries.Triangle;
-//import lighting.PointLight;
-//import primitives.Color;
-//import primitives.Material;
-//import primitives.Point;
-//import primitives.Vector;
-//import renderer.Camera;
-//import renderer.ImageWriter;
-//import renderer.RayTracerBasic;
-//import scene.Scene;
-//
-///**
-// * Test rendering an image
-// *
-// * @author Dan
-// */
-//public class TeapotTest {
-//    private final ImageWriter imageWriter = new ImageWriter("teapot", 800, 800);
-//
-//    private final Camera camera = new Camera(new Point(0, 0, -1000), new Vector(0, 1, 0), new Vector(0, 0, 1)) //
-//            .setVPDistance(1000).setVPSize(200, 200) //
-//            .setImageWriter(imageWriter) //
-//            .setMultithreading(3).setDebugPrint(0.1);
-//
-//    private final Scene scene = new Scene("Test scene");
-//
-//    private static final Color color = new Color(200, 0, 0);
-//    private static final Material mat = new Material().setkD(0.5).setkS(0.5).setnShininess(60);
-//
-//    private static Point[] pnts = new Point[] { null, //
-//            new Point(40.6266, 28.3457, -1.10804), //
-//            new Point(40.0714, 30.4443, -1.10804), //
-//            new Point(40.7155, 31.1438, -1.10804), //
-//            new Point(42.0257, 30.4443, -1.10804), //
-//            new Point(43.4692, 28.3457, -1.10804), //
-//            new Point(37.5425, 28.3457, 14.5117), //
-//            new Point(37.0303, 30.4443, 14.2938), //
-//            new Point(37.6244, 31.1438, 14.5466), //
-//            new Point(38.8331, 30.4443, 15.0609), //
-//            new Point(40.1647, 28.3457, 15.6274), //
-//            new Point(29.0859, 28.3457, 27.1468), //
-//            new Point(28.6917, 30.4443, 26.7527), //
-//            new Point(29.149, 31.1438, 27.2099), //
-//            new Point(30.0792, 30.4443, 28.1402), //
-//            new Point(31.1041, 28.3457, 29.165), //
-//            new Point(16.4508, 28.3457, 35.6034), //
-//            new Point(16.2329, 30.4443, 35.0912), //
-//            new Point(16.4857, 31.1438, 35.6853), //
-//            new Point(16.9999, 30.4443, 36.894), //
-//            new Point(17.5665, 28.3457, 38.2256), //
-//            new Point(0.831025, 28.3457, 38.6876), //
-//            new Point(0.831025, 30.4443, 38.1324), //
-//            new Point(0.831025, 31.1438, 38.7764), //
-//            new Point(0.831025, 30.4443, 40.0866), //
-//            new Point(0.831025, 28.3457, 41.5301), //
-//            new Point(-15.868, 28.3457, 35.6034), //
-//            new Point(-15.0262, 30.4443, 35.0912), //
-//            new Point(-14.9585, 31.1438, 35.6853), //
-//            new Point(-15.3547, 30.4443, 36.894), //
-//            new Point(-15.9044, 28.3457, 38.2256), //
-//            new Point(-28.3832, 28.3457, 27.1468), //
-//            new Point(-27.4344, 30.4443, 26.7527), //
-//            new Point(-27.6068, 31.1438, 27.2099), //
-//            new Point(-28.4322, 30.4443, 28.1402), //
-//            new Point(-29.4421, 28.3457, 29.165), //
-//            new Point(-36.2402, 28.3457, 14.5117), //
-//            new Point(-35.52, 30.4443, 14.2938), //
-//            new Point(-36.0073, 31.1438, 14.5466), //
-//            new Point(-37.1767, 30.4443, 15.0609), //
-//            new Point(-38.5027, 28.3457, 15.6274), //
-//            new Point(-38.9646, 28.3457, -1.10804), //
-//            new Point(-38.4094, 30.4443, -1.10804), //
-//            new Point(-39.0534, 31.1438, -1.10804), //
-//            new Point(-40.3636, 30.4443, -1.10804), //
-//            new Point(-41.8071, 28.3457, -1.10804), //
-//            new Point(-35.8804, 28.3457, -16.7278), //
-//            new Point(-35.3683, 30.4443, -16.5099), //
-//            new Point(-35.9624, 31.1438, -16.7627), //
-//            new Point(-37.1711, 30.4443, -17.2769), //
-//            new Point(-38.5027, 28.3457, -17.8435), //
-//            new Point(-27.4238, 28.3457, -29.3629), //
-//            new Point(-27.0297, 30.4443, -28.9687), //
-//            new Point(-27.4869, 31.1438, -29.426), //
-//            new Point(-28.4172, 30.4443, -30.3562), //
-//            new Point(-29.4421, 28.3457, -31.3811), //
-//            new Point(-14.7887, 28.3457, -37.8195), //
-//            new Point(-14.5708, 30.4443, -37.3073), //
-//            new Point(-14.8236, 31.1438, -37.9014), //
-//            new Point(-15.3379, 30.4443, -39.1101), //
-//            new Point(-15.9044, 28.3457, -40.4417), //
-//            new Point(0.831025, 28.3457, -40.9036), //
-//            new Point(0.831025, 30.4443, -40.3484), //
-//            new Point(0.831025, 31.1438, -40.9925), //
-//            new Point(0.831025, 30.4443, -42.3027), //
-//            new Point(0.831025, 28.3457, -43.7462), //
-//            new Point(16.4508, 28.3457, -37.8195), //
-//            new Point(16.2329, 30.4443, -37.3073), //
-//            new Point(16.4857, 31.1438, -37.9014), //
-//            new Point(16.9999, 30.4443, -39.1101), //
-//            new Point(17.5665, 28.3457, -40.4417), //
-//            new Point(29.0859, 28.3457, -29.3629), //
-//            new Point(28.6917, 30.4443, -28.9687), //
-//            new Point(29.149, 31.1438, -29.426), //
-//            new Point(30.0792, 30.4443, -30.3562), //
-//            new Point(31.1041, 28.3457, -31.3811), //
-//            new Point(37.5425, 28.3457, -16.7278), //
-//            new Point(37.0303, 30.4443, -16.5099), //
-//            new Point(37.6244, 31.1438, -16.7627), //
-//            new Point(38.8331, 30.4443, -17.2769), //
-//            new Point(40.1647, 28.3457, -17.8435), //
-//            new Point(48.6879, 17.1865, -1.10804), //
-//            new Point(53.2404, 6.22714, -1.10804), //
-//            new Point(56.4605, -4.33246, -1.10804), //
-//            new Point(57.6819, -14.2925, -1.10804), //
-//            new Point(44.979, 17.1865, 17.6758), //
-//            new Point(49.1787, 6.22714, 19.4626), //
-//            new Point(52.1492, -4.33246, 20.7265), //
-//            new Point(53.2759, -14.2925, 21.2059), //
-//            new Point(34.8094, 17.1865, 32.8703), //
-//            new Point(38.0417, 6.22714, 36.1026), //
-//            new Point(40.3279, -4.33246, 38.3889), //
-//            new Point(41.1951, -14.2925, 39.2561), //
-//            new Point(19.6148, 17.1865, 43.0399), //
-//            new Point(21.4017, 6.22714, 47.2396), //
-//            new Point(22.6656, -4.33246, 50.2101), //
-//            new Point(23.145, -14.2925, 51.3369), //
-//            new Point(0.831025, 17.1865, 46.7488), //
-//            new Point(0.831025, 6.22714, 51.3013), //
-//            new Point(0.831025, -4.33246, 54.5214), //
-//            new Point(0.831025, -14.2925, 55.7428), //
-//            new Point(-17.9528, 17.1865, 43.0399), //
-//            new Point(-19.7397, 6.22714, 47.2396), //
-//            new Point(-21.0035, -4.33246, 50.2101), //
-//            new Point(-21.4829, -14.2925, 51.3369), //
-//            new Point(-33.1474, 17.1865, 32.8703), //
-//            new Point(-36.3796, 6.22714, 36.1026), //
-//            new Point(-38.6659, -4.33246, 38.3889), //
-//            new Point(-39.5331, -14.2925, 39.2561), //
-//            new Point(-43.3169, 17.1865, 17.6758), //
-//            new Point(-47.5166, 6.22714, 19.4626), //
-//            new Point(-50.4871, -4.33246, 20.7265), //
-//            new Point(-51.6139, -14.2925, 21.2059), //
-//            new Point(-47.0258, 17.1865, -1.10804), //
-//            new Point(-51.5784, 6.22714, -1.10804), //
-//            new Point(-54.7984, -4.33246, -1.10804), //
-//            new Point(-56.0198, -14.2925, -1.10804), //
-//            new Point(-43.3169, 17.1865, -19.8919), //
-//            new Point(-47.5166, 6.22714, -21.6787), //
-//            new Point(-50.4871, -4.33246, -22.9426), //
-//            new Point(-51.6139, -14.2925, -23.422), //
-//            new Point(-33.1474, 17.1865, -35.0864), //
-//            new Point(-36.3796, 6.22714, -38.3187), //
-//            new Point(-38.6659, -4.33246, -40.6049), //
-//            new Point(-39.5331, -14.2925, -41.4721), //
-//            new Point(-17.9528, 17.1865, -45.256), //
-//            new Point(-19.7397, 6.22714, -49.4557), //
-//            new Point(-21.0035, -4.33246, -52.4262), //
-//            new Point(-21.4829, -14.2925, -53.5529), //
-//            new Point(0.831025, 17.1865, -48.9649), //
-//            new Point(0.831025, 6.22714, -53.5174), //
-//            new Point(0.831025, -4.33246, -56.7375), //
-//            new Point(0.831025, -14.2925, -57.9589), //
-//            new Point(19.6148, 17.1865, -45.256), //
-//            new Point(21.4017, 6.22714, -49.4557), //
-//            new Point(22.6656, -4.33246, -52.4262), //
-//            new Point(23.145, -14.2925, -53.5529), //
-//            new Point(34.8094, 17.1865, -35.0864), //
-//            new Point(38.0417, 6.22714, -38.3187), //
-//            new Point(40.3279, -4.33246, -40.6049), //
-//            new Point(41.1951, -14.2925, -41.4721), //
-//            new Point(44.979, 17.1865, -19.8919), //
-//            new Point(49.1787, 6.22714, -21.6787), //
-//            new Point(52.1492, -4.33246, -22.9426), //
-//            new Point(53.2759, -14.2925, -23.422), //
-//            new Point(55.4611, -22.7202, -1.10804), //
-//            new Point(50.5755, -28.9493, -1.10804), //
-//            new Point(45.6899, -33.1798, -1.10804), //
-//            new Point(43.4692, -35.6115, -1.10804), //
-//            new Point(51.2273, -22.7202, 20.3343), //
-//            new Point(46.7203, -28.9493, 18.4167), //
-//            new Point(42.2133, -33.1798, 16.4991), //
-//            new Point(40.1647, -35.6115, 15.6274), //
-//            new Point(39.6184, -22.7202, 37.6793), //
-//            new Point(36.1496, -28.9493, 34.2106), //
-//            new Point(32.6808, -33.1798, 30.7418), //
-//            new Point(31.1041, -35.6115, 29.165), //
-//            new Point(22.2733, -22.7202, 49.2882), //
-//            new Point(20.3557, -28.9493, 44.7813), //
-//            new Point(18.4381, -33.1798, 40.2743), //
-//            new Point(17.5665, -35.6115, 38.2256), //
-//            new Point(0.831025, -22.7202, 53.5221), //
-//            new Point(0.831025, -28.9493, 48.6365), //
-//            new Point(0.831025, -33.1798, 43.7508), //
-//            new Point(0.831025, -35.6115, 41.5301), //
-//            new Point(-20.6113, -22.7202, 49.2882), //
-//            new Point(-18.6937, -28.9493, 44.7813), //
-//            new Point(-16.7761, -33.1798, 40.2743), //
-//            new Point(-15.9044, -35.6115, 38.2256), //
-//            new Point(-37.9564, -22.7202, 37.6793), //
-//            new Point(-34.4876, -28.9493, 34.2106), //
-//            new Point(-31.0188, -33.1798, 30.7418), //
-//            new Point(-29.4421, -35.6115, 29.165), //
-//            new Point(-49.5653, -22.7202, 20.3343), //
-//            new Point(-45.0583, -28.9493, 18.4167), //
-//            new Point(-40.5513, -33.1798, 16.4991), //
-//            new Point(-38.5027, -35.6115, 15.6274), //
-//            new Point(-53.7991, -22.7202, -1.10804), //
-//            new Point(-48.9135, -28.9493, -1.10804), //
-//            new Point(-44.0279, -33.1798, -1.10804), //
-//            new Point(-41.8071, -35.6115, -1.10804), //
-//            new Point(-49.5653, -22.7202, -22.5504), //
-//            new Point(-45.0583, -28.9493, -20.6327), //
-//            new Point(-40.5513, -33.1798, -18.7151), //
-//            new Point(-38.5027, -35.6115, -17.8435), //
-//            new Point(-37.9564, -22.7202, -39.8954), //
-//            new Point(-34.4876, -28.9493, -36.4266), //
-//            new Point(-31.0188, -33.1798, -32.9578), //
-//            new Point(-29.4421, -35.6115, -31.3811), //
-//            new Point(-20.6113, -22.7202, -51.5043), //
-//            new Point(-18.6937, -28.9493, -46.9973), //
-//            new Point(-16.7761, -33.1798, -42.4903), //
-//            new Point(-15.9044, -35.6115, -40.4417), //
-//            new Point(0.831025, -22.7202, -55.7382), //
-//            new Point(0.831025, -28.9493, -50.8525), //
-//            new Point(0.831025, -33.1798, -45.9669), //
-//            new Point(0.831025, -35.6115, -43.7462), //
-//            new Point(22.2733, -22.7202, -51.5043), //
-//            new Point(20.3557, -28.9493, -46.9973), //
-//            new Point(18.4381, -33.1798, -42.4903), //
-//            new Point(17.5665, -35.6115, -40.4417), //
-//            new Point(39.6184, -22.7202, -39.8954), //
-//            new Point(36.1496, -28.9493, -36.4266), //
-//            new Point(32.6808, -33.1798, -32.9578), //
-//            new Point(31.1041, -35.6115, -31.3811), //
-//            new Point(51.2273, -22.7202, -22.5504), //
-//            new Point(46.7203, -28.9493, -20.6327), //
-//            new Point(42.2133, -33.1798, -18.7151), //
-//            new Point(40.1647, -35.6115, -17.8435), //
-//            new Point(42.5031, -37.1772, -1.10804), //
-//            new Point(37.3399, -38.5429, -1.10804), //
-//            new Point(24.5818, -39.5089, -1.10804), //
-//            new Point(0.831025, -39.8754, -1.10804), //
-//            new Point(39.2736, -37.1772, 15.2483), //
-//            new Point(34.5105, -38.5429, 13.2217), //
-//            new Point(22.7411, -39.5089, 8.21414), //
-//            new Point(30.4182, -37.1772, 28.4792), //
-//            new Point(26.7523, -38.5429, 24.8133), //
-//            new Point(17.6941, -39.5089, 15.755), //
-//            new Point(17.1873, -37.1772, 37.3345), //
-//            new Point(15.1608, -38.5429, 32.5714), //
-//            new Point(10.1532, -39.5089, 20.8021), //
-//            new Point(0.831025, -37.1772, 40.5641), //
-//            new Point(0.831025, -38.5429, 35.4009), //
-//            new Point(0.831025, -39.5089, 22.6427), //
-//            new Point(-15.5253, -37.1772, 37.3345), //
-//            new Point(-13.4987, -38.5429, 32.5714), //
-//            new Point(-8.49115, -39.5089, 20.8021), //
-//            new Point(-28.7562, -37.1772, 28.4792), //
-//            new Point(-25.0903, -38.5429, 24.8133), //
-//            new Point(-16.032, -39.5089, 15.755), //
-//            new Point(-37.6115, -37.1772, 15.2483), //
-//            new Point(-32.8484, -38.5429, 13.2217), //
-//            new Point(-21.0791, -39.5089, 8.21414), //
-//            new Point(-40.8411, -37.1772, -1.10804), //
-//            new Point(-35.6779, -38.5429, -1.10804), //
-//            new Point(-22.9198, -39.5089, -1.10804), //
-//            new Point(-37.6115, -37.1772, -17.4643), //
-//            new Point(-32.8484, -38.5429, -15.4378), //
-//            new Point(-21.0791, -39.5089, -10.4302), //
-//            new Point(-28.7562, -37.1772, -30.6952), //
-//            new Point(-25.0903, -38.5429, -27.0294), //
-//            new Point(-16.032, -39.5089, -17.9711), //
-//            new Point(-15.5253, -37.1772, -39.5506), //
-//            new Point(-13.4987, -38.5429, -34.7875), //
-//            new Point(-8.49115, -39.5089, -23.0181), //
-//            new Point(0.831025, -37.1772, -42.7802), //
-//            new Point(0.831025, -38.5429, -37.6169), //
-//            new Point(0.831025, -39.5089, -24.8588), //
-//            new Point(17.1873, -37.1772, -39.5506), //
-//            new Point(15.1608, -38.5429, -34.7875), //
-//            new Point(10.1532, -39.5089, -23.0181), //
-//            new Point(30.4182, -37.1772, -30.6952), //
-//            new Point(26.7523, -38.5429, -27.0294), //
-//            new Point(17.6941, -39.5089, -17.9711), //
-//            new Point(39.2736, -37.1772, -17.4643), //
-//            new Point(34.5105, -38.5429, -15.4378), //
-//            new Point(22.7411, -39.5089, -10.4302), //
-//            new Point(-44.6497, 17.6861, -1.10804), //
-//            new Point(-57.9297, 17.5862, -1.10804), //
-//            new Point(-67.7453, 16.8867, -1.10804), //
-//            new Point(-73.8301, 14.9879, -1.10804), //
-//            new Point(-75.9176, 11.2904, -1.10804), //
-//            new Point(-44.2055, 18.6855, 3.68876), //
-//            new Point(-58.3252, 18.5699, 3.68876), //
-//            new Point(-68.6891, 17.7611, 3.68876), //
-//            new Point(-75.0724, 15.5657, 3.68876), //
-//            new Point(-77.2501, 11.2904, 3.68876), //
-//            new Point(-43.2284, 20.884, 5.28769), //
-//            new Point(-59.1955, 20.7341, 5.28769), //
-//            new Point(-70.7655, 19.6848, 5.28769), //
-//            new Point(-77.8053, 16.8367, 5.28769), //
-//            new Point(-80.1814, 11.2904, 5.28769), //
-//            new Point(-42.2513, 23.0825, 3.68876), //
-//            new Point(-60.0657, 22.8983, 3.68876), //
-//            new Point(-72.8419, 21.6085, 3.68876), //
-//            new Point(-80.5381, 18.1077, 3.68876), //
-//            new Point(-83.1128, 11.2904, 3.68876), //
-//            new Point(-41.8071, 24.0819, -1.10804), //
-//            new Point(-60.4613, 23.882, -1.10804), //
-//            new Point(-73.7857, 22.4829, -1.10804), //
-//            new Point(-81.7804, 18.6855, -1.10804), //
-//            new Point(-84.4453, 11.2904, -1.10804), //
-//            new Point(-42.2513, 23.0825, -5.90483), //
-//            new Point(-60.0657, 22.8983, -5.90483), //
-//            new Point(-72.8419, 21.6085, -5.90483), //
-//            new Point(-80.5381, 18.1077, -5.90483), //
-//            new Point(-83.1128, 11.2904, -5.90483), //
-//            new Point(-43.2284, 20.884, -7.50376), //
-//            new Point(-59.1955, 20.7341, -7.50376), //
-//            new Point(-70.7655, 19.6848, -7.50376), //
-//            new Point(-77.8053, 16.8367, -7.50376), //
-//            new Point(-80.1814, 11.2904, -7.50376), //
-//            new Point(-44.2055, 18.6855, -5.90483), //
-//            new Point(-58.3252, 18.5699, -5.90483), //
-//            new Point(-68.6891, 17.7611, -5.90483), //
-//            new Point(-75.0724, 15.5657, -5.90483), //
-//            new Point(-77.2501, 11.2904, -5.90483), //
-//            new Point(-74.8073, 5.4943, -1.10804), //
-//            new Point(-71.2985, -1.50103, -1.10804), //
-//            new Point(-65.1248, -8.49634, -1.10804), //
-//            new Point(-56.0198, -14.2925, -1.10804), //
-//            new Point(-76.0183, 4.93477, 3.68876), //
-//            new Point(-72.159, -2.35462, 3.68876), //
-//            new Point(-65.4267, -9.55033, 3.68876), //
-//            new Point(-55.5757, -15.6249, 3.68876), //
-//            new Point(-78.6824, 3.70383, 5.28769), //
-//            new Point(-74.0522, -4.23253, 5.28769), //
-//            new Point(-66.0909, -11.8691, 5.28769), //
-//            new Point(-54.5986, -18.5563, 5.28769), //
-//            new Point(-81.3466, 2.47288, 3.68876), //
-//            new Point(-75.9454, -6.11044, 3.68876), //
-//            new Point(-66.755, -14.1878, 3.68876), //
-//            new Point(-53.6214, -21.4877, 3.68876), //
-//            new Point(-82.5576, 1.91336, -1.10804), //
-//            new Point(-76.8059, -6.96404, -1.10804), //
-//            new Point(-67.0569, -15.2418, -1.10804), //
-//            new Point(-53.1773, -22.8201, -1.10804), //
-//            new Point(-81.3466, 2.47288, -5.90483), //
-//            new Point(-75.9454, -6.11044, -5.90483), //
-//            new Point(-66.755, -14.1878, -5.90483), //
-//            new Point(-53.6214, -21.4877, -5.90483), //
-//            new Point(-78.6824, 3.70383, -7.50376), //
-//            new Point(-74.0522, -4.23253, -7.50376), //
-//            new Point(-66.0909, -11.8691, -7.50376), //
-//            new Point(-54.5986, -18.5563, -7.50376), //
-//            new Point(-76.0183, 4.93477, -5.90483), //
-//            new Point(-72.159, -2.35462, -5.90483), //
-//            new Point(-65.4267, -9.55033, -5.90483), //
-//            new Point(-55.5757, -15.6249, -5.90483), //
-//            new Point(49.1543, 0.630882, -1.10804), //
-//            new Point(62.7896, 3.76212, -1.10804), //
-//            new Point(68.6967, 11.2904, -1.10804), //
-//            new Point(71.939, 20.4176, -1.10804), //
-//            new Point(77.5797, 28.3457, -1.10804), //
-//            new Point(49.1543, -3.03333, 9.4449), //
-//            new Point(63.8305, 1.04519, 8.42059), //
-//            new Point(70.0292, 9.70814, 6.1671), //
-//            new Point(73.5629, 19.8451, 3.91361), //
-//            new Point(80.2446, 28.3457, 2.88929), //
-//            new Point(49.1543, -11.0946, 12.9626), //
-//            new Point(66.1207, -4.93206, 11.5968), //
-//            new Point(72.9605, 6.22714, 8.59214), //
-//            new Point(77.1355, 18.5855, 5.58749), //
-//            new Point(86.1073, 28.3457, 4.22173), //
-//            new Point(49.1543, -19.1559, 9.4449), //
-//            new Point(68.4108, -10.9093, 8.42059), //
-//            new Point(75.8919, 2.74614, 6.1671), //
-//            new Point(80.7081, 17.326, 3.91361), //
-//            new Point(91.97, 28.3457, 2.88929), //
-//            new Point(49.1543, -22.8201, -1.10804), //
-//            new Point(69.4518, -13.6262, -1.10804), //
-//            new Point(77.2244, 1.16386, -1.10804), //
-//            new Point(82.3321, 16.7534, -1.10804), //
-//            new Point(94.6349, 28.3457, -1.10804), //
-//            new Point(49.1543, -19.1559, -11.661), //
-//            new Point(68.4108, -10.9093, -10.6367), //
-//            new Point(75.8919, 2.74614, -8.38317), //
-//            new Point(80.7081, 17.326, -6.12968), //
-//            new Point(91.97, 28.3457, -5.10536), //
-//            new Point(49.1543, -11.0946, -15.1786), //
-//            new Point(66.1207, -4.93206, -13.8129), //
-//            new Point(72.9605, 6.22714, -10.8082), //
-//            new Point(77.1355, 18.5855, -7.80356), //
-//            new Point(86.1073, 28.3457, -6.4378), //
-//            new Point(49.1543, -3.03333, -11.661), //
-//            new Point(63.8305, 1.04519, -10.6367), //
-//            new Point(70.0292, 9.70814, -8.38317), //
-//            new Point(73.5629, 19.8451, -6.12968), //
-//            new Point(80.2446, 28.3457, -5.10536), //
-//            new Point(79.6227, 29.5449, -1.10804), //
-//            new Point(81.1329, 29.9446, -1.10804), //
-//            new Point(81.577, 29.5449, -1.10804), //
-//            new Point(80.4222, 28.3457, -1.10804), //
-//            new Point(82.4767, 29.6034, 2.63946), //
-//            new Point(83.8116, 30.0383, 2.08983), //
-//            new Point(83.8515, 29.6268, 1.54019), //
-//            new Point(82.1988, 28.3457, 1.29036), //
-//            new Point(88.7555, 29.7322, 3.88862), //
-//            new Point(89.7049, 30.2444, 3.15578), //
-//            new Point(88.8555, 29.8072, 2.42294), //
-//            new Point(86.1073, 28.3457, 2.08983), //
-//            new Point(95.0343, 29.8611, 2.63946), //
-//            new Point(95.5982, 30.4505, 2.08983), //
-//            new Point(93.8594, 29.9875, 1.54019), //
-//            new Point(90.0158, 28.3457, 1.29036), //
-//            new Point(97.8883, 29.9196, -1.10804), //
-//            new Point(98.2769, 30.5442, -1.10804), //
-//            new Point(96.1339, 30.0695, -1.10804), //
-//            new Point(91.7924, 28.3457, -1.10804), //
-//            new Point(95.0343, 29.8611, -4.85553), //
-//            new Point(95.5982, 30.4505, -4.3059), //
-//            new Point(93.8594, 29.9875, -3.75626), //
-//            new Point(90.0158, 28.3457, -3.50643), //
-//            new Point(88.7555, 29.7322, -6.10469), //
-//            new Point(89.7049, 30.2444, -5.37185), //
-//            new Point(88.8555, 29.8072, -4.63901), //
-//            new Point(86.1073, 28.3457, -4.3059), //
-//            new Point(82.4767, 29.6034, -4.85553), //
-//            new Point(83.8116, 30.0383, -4.3059), //
-//            new Point(83.8515, 29.6268, -3.75626), //
-//            new Point(82.1988, 28.3457, -3.50643), //
-//            new Point(0.831025, 49.6647, -1.10804), //
-//            new Point(10.5134, 48.2657, -1.10804), //
-//            new Point(10.0693, 44.868, -1.10804), //
-//            new Point(6.42728, 40.6708, -1.10804), //
-//            new Point(6.51611, 36.8733, -1.10804), //
-//            new Point(9.76642, 48.2657, 2.70243), //
-//            new Point(9.35632, 44.868, 2.52698), //
-//            new Point(5.9947, 40.6708, 1.09187), //
-//            new Point(6.07552, 36.8733, 1.12336), //
-//            new Point(7.71453, 48.2657, 5.77547), //
-//            new Point(7.39819, 44.868, 5.45913), //
-//            new Point(4.80736, 40.6708, 2.8683), //
-//            new Point(4.86744, 36.8733, 2.92838), //
-//            new Point(4.64149, 48.2657, 7.82736), //
-//            new Point(4.46604, 44.868, 7.41726), //
-//            new Point(3.03093, 40.6708, 4.05564), //
-//            new Point(3.06242, 36.8733, 4.13646), //
-//            new Point(0.831025, 48.2657, 8.57438), //
-//            new Point(0.831025, 44.868, 8.13023), //
-//            new Point(0.831025, 40.6708, 4.48822), //
-//            new Point(0.831025, 36.8733, 4.57705), //
-//            new Point(-2.97944, 48.2657, 7.82736), //
-//            new Point(-2.80399, 44.868, 7.41726), //
-//            new Point(-1.36888, 40.6708, 4.05564), //
-//            new Point(-1.40037, 36.8733, 4.13646), //
-//            new Point(-6.05248, 48.2657, 5.77547), //
-//            new Point(-5.73614, 44.868, 5.45913), //
-//            new Point(-3.14531, 40.6708, 2.8683), //
-//            new Point(-3.20539, 36.8733, 2.92838), //
-//            new Point(-8.10437, 48.2657, 2.70243), //
-//            new Point(-7.69427, 44.868, 2.52698), //
-//            new Point(-4.33265, 40.6708, 1.09187), //
-//            new Point(-4.41347, 36.8733, 1.12336), //
-//            new Point(-8.85139, 48.2657, -1.10804), //
-//            new Point(-8.40724, 44.868, -1.10804), //
-//            new Point(-4.76523, 40.6708, -1.10804), //
-//            new Point(-4.85406, 36.8733, -1.10804), //
-//            new Point(-8.10437, 48.2657, -4.9185), //
-//            new Point(-7.69427, 44.868, -4.74305), //
-//            new Point(-4.33265, 40.6708, -3.30794), //
-//            new Point(-4.41347, 36.8733, -3.33943), //
-//            new Point(-6.05248, 48.2657, -7.99154), //
-//            new Point(-5.73614, 44.868, -7.6752), //
-//            new Point(-3.14531, 40.6708, -5.08437), //
-//            new Point(-3.20539, 36.8733, -5.14445), //
-//            new Point(-2.97944, 48.2657, -10.0434), //
-//            new Point(-2.80399, 44.868, -9.63333), //
-//            new Point(-1.36888, 40.6708, -6.27171), //
-//            new Point(-1.40037, 36.8733, -6.35253), //
-//            new Point(0.831025, 48.2657, -10.7904), //
-//            new Point(0.831025, 44.868, -10.3463), //
-//            new Point(0.831025, 40.6708, -6.70429), //
-//            new Point(0.831025, 36.8733, -6.79312), //
-//            new Point(4.64149, 48.2657, -10.0434), //
-//            new Point(4.46604, 44.868, -9.63333), //
-//            new Point(3.03093, 40.6708, -6.27171), //
-//            new Point(3.06242, 36.8733, -6.35253), //
-//            new Point(7.71453, 48.2657, -7.99154), //
-//            new Point(7.39819, 44.868, -7.6752), //
-//            new Point(4.80736, 40.6708, -5.08437), //
-//            new Point(4.86744, 36.8733, -5.14445), //
-//            new Point(9.76642, 48.2657, -4.9185), //
-//            new Point(9.35632, 44.868, -4.74305), //
-//            new Point(5.9947, 40.6708, -3.30794), //
-//            new Point(6.07552, 36.8733, -3.33943), //
-//            new Point(13.8001, 34.3417, -1.10804), //
-//            new Point(24.282, 32.6095, -1.10804), //
-//            new Point(33.6979, 30.8773, -1.10804), //
-//            new Point(37.7841, 28.3457, -1.10804), //
-//            new Point(12.795, 34.3417, 3.98234), //
-//            new Point(22.4646, 32.6095, 8.09647), //
-//            new Point(31.1507, 30.8773, 11.7922), //
-//            new Point(34.9202, 28.3457, 13.396), //
-//            new Point(10.0391, 34.3417, 8.10003), //
-//            new Point(17.4812, 32.6095, 15.5422), //
-//            new Point(24.1665, 30.8773, 22.2275), //
-//            new Point(27.0677, 28.3457, 25.1286), //
-//            new Point(5.9214, 34.3417, 10.856), //
-//            new Point(10.0355, 32.6095, 20.5255), //
-//            new Point(13.7313, 30.8773, 29.2117), //
-//            new Point(15.3351, 28.3457, 32.9812), //
-//            new Point(0.831025, 34.3417, 11.8611), //
-//            new Point(0.831025, 32.6095, 22.3429), //
-//            new Point(0.831025, 30.8773, 31.7589), //
-//            new Point(0.831025, 28.3457, 35.845), //
-//            new Point(-4.25935, 34.3417, 10.856), //
-//            new Point(-8.37348, 32.6095, 20.5255), //
-//            new Point(-12.0692, 30.8773, 29.2117), //
-//            new Point(-13.673, 28.3457, 32.9812), //
-//            new Point(-8.37704, 34.3417, 8.10003), //
-//            new Point(-15.8192, 32.6095, 15.5422), //
-//            new Point(-22.5045, 30.8773, 22.2275), //
-//            new Point(-25.4056, 28.3457, 25.1286), //
-//            new Point(-11.133, 34.3417, 3.98234), //
-//            new Point(-20.8025, 32.6095, 8.09647), //
-//            new Point(-29.4887, 30.8773, 11.7922), //
-//            new Point(-33.2582, 28.3457, 13.396), //
-//            new Point(-12.1381, 34.3417, -1.10804), //
-//            new Point(-22.62, 32.6095, -1.10804), //
-//            new Point(-32.0359, 30.8773, -1.10804), //
-//            new Point(-36.122, 28.3457, -1.10804), //
-//            new Point(-11.133, 34.3417, -6.19841), //
-//            new Point(-20.8025, 32.6095, -10.3125), //
-//            new Point(-29.4887, 30.8773, -14.0083), //
-//            new Point(-33.2582, 28.3457, -15.6121), //
-//            new Point(-8.37704, 34.3417, -10.3161), //
-//            new Point(-15.8192, 32.6095, -17.7582), //
-//            new Point(-22.5045, 30.8773, -24.4435), //
-//            new Point(-25.4056, 28.3457, -27.3447), //
-//            new Point(-4.25935, 34.3417, -13.072), //
-//            new Point(-8.37348, 32.6095, -22.7416), //
-//            new Point(-12.0692, 30.8773, -31.4277), //
-//            new Point(-13.673, 28.3457, -35.1972), //
-//            new Point(0.831025, 34.3417, -14.0771), //
-//            new Point(0.831025, 32.6095, -24.559), //
-//            new Point(0.831025, 30.8773, -33.9749), //
-//            new Point(0.831025, 28.3457, -38.0611), //
-//            new Point(5.9214, 34.3417, -13.072), //
-//            new Point(10.0355, 32.6095, -22.7416), //
-//            new Point(13.7313, 30.8773, -31.4277), //
-//            new Point(15.3351, 28.3457, -35.1972), //
-//            new Point(10.0391, 34.3417, -10.3161), //
-//            new Point(17.4812, 32.6095, -17.7582), //
-//            new Point(24.1665, 30.8773, -24.4435), //
-//            new Point(27.0677, 28.3457, -27.3447), //
-//            new Point(12.795, 34.3417, -6.19841), //
-//            new Point(22.4646, 32.6095, -10.3125), //
-//            new Point(31.1507, 30.8773, -14.0083), //
-//            new Point(34.8094, 17.1865, -35.0864) //
-//    };
-//
-//    public TeapotTest() throws IllegalAccessException {
-//    }
-//
-//    /**
-//     * Produce a scene with a 3D model and render it into a png image
-//     */
-//    @Test
-//    public void teapot() throws IllegalAccessException {
-//        scene.geometries.add( //
-//                new Triangle(pnts[7], pnts[6], pnts[1]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[1], pnts[2], pnts[7]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[8], pnts[7], pnts[2]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[2], pnts[3], pnts[8]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[9], pnts[8], pnts[3]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[3], pnts[4], pnts[9]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[10], pnts[9], pnts[4]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[4], pnts[5], pnts[10]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[12], pnts[11], pnts[6]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[6], pnts[7], pnts[12]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[13], pnts[12], pnts[7]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[7], pnts[8], pnts[13]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[14], pnts[13], pnts[8]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[8], pnts[9], pnts[14]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[15], pnts[14], pnts[9]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[9], pnts[10], pnts[15]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[17], pnts[16], pnts[11]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[11], pnts[12], pnts[17]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[18], pnts[17], pnts[12]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[12], pnts[13], pnts[18]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[19], pnts[18], pnts[13]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[13], pnts[14], pnts[19]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[20], pnts[19], pnts[14]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[14], pnts[15], pnts[20]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[22], pnts[21], pnts[16]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[16], pnts[17], pnts[22]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[23], pnts[22], pnts[17]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[17], pnts[18], pnts[23]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[24], pnts[23], pnts[18]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[18], pnts[19], pnts[24]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[25], pnts[24], pnts[19]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[19], pnts[20], pnts[25]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[27], pnts[26], pnts[21]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[21], pnts[22], pnts[27]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[28], pnts[27], pnts[22]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[22], pnts[23], pnts[28]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[29], pnts[28], pnts[23]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[23], pnts[24], pnts[29]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[30], pnts[29], pnts[24]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[24], pnts[25], pnts[30]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[32], pnts[31], pnts[26]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[26], pnts[27], pnts[32]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[33], pnts[32], pnts[27]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[27], pnts[28], pnts[33]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[34], pnts[33], pnts[28]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[28], pnts[29], pnts[34]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[35], pnts[34], pnts[29]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[29], pnts[30], pnts[35]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[37], pnts[36], pnts[31]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[31], pnts[32], pnts[37]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[38], pnts[37], pnts[32]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[32], pnts[33], pnts[38]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[39], pnts[38], pnts[33]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[33], pnts[34], pnts[39]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[40], pnts[39], pnts[34]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[34], pnts[35], pnts[40]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[42], pnts[41], pnts[36]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[36], pnts[37], pnts[42]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[43], pnts[42], pnts[37]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[37], pnts[38], pnts[43]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[44], pnts[43], pnts[38]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[38], pnts[39], pnts[44]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[45], pnts[44], pnts[39]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[39], pnts[40], pnts[45]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[47], pnts[46], pnts[41]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[41], pnts[42], pnts[47]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[48], pnts[47], pnts[42]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[42], pnts[43], pnts[48]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[49], pnts[48], pnts[43]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[43], pnts[44], pnts[49]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[50], pnts[49], pnts[44]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[44], pnts[45], pnts[50]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[52], pnts[51], pnts[46]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[46], pnts[47], pnts[52]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[53], pnts[52], pnts[47]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[47], pnts[48], pnts[53]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[54], pnts[53], pnts[48]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[48], pnts[49], pnts[54]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[55], pnts[54], pnts[49]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[49], pnts[50], pnts[55]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[57], pnts[56], pnts[51]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[51], pnts[52], pnts[57]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[58], pnts[57], pnts[52]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[52], pnts[53], pnts[58]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[59], pnts[58], pnts[53]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[53], pnts[54], pnts[59]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[60], pnts[59], pnts[54]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[54], pnts[55], pnts[60]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[62], pnts[61], pnts[56]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[56], pnts[57], pnts[62]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[63], pnts[62], pnts[57]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[57], pnts[58], pnts[63]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[64], pnts[63], pnts[58]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[58], pnts[59], pnts[64]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[65], pnts[64], pnts[59]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[59], pnts[60], pnts[65]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[67], pnts[66], pnts[61]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[61], pnts[62], pnts[67]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[68], pnts[67], pnts[62]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[62], pnts[63], pnts[68]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[69], pnts[68], pnts[63]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[63], pnts[64], pnts[69]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[70], pnts[69], pnts[64]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[64], pnts[65], pnts[70]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[72], pnts[71], pnts[66]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[66], pnts[67], pnts[72]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[73], pnts[72], pnts[67]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[67], pnts[68], pnts[73]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[74], pnts[73], pnts[68]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[68], pnts[69], pnts[74]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[75], pnts[74], pnts[69]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[69], pnts[70], pnts[75]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[77], pnts[76], pnts[71]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[71], pnts[72], pnts[77]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[78], pnts[77], pnts[72]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[72], pnts[73], pnts[78]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[79], pnts[78], pnts[73]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[73], pnts[74], pnts[79]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[80], pnts[79], pnts[74]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[74], pnts[75], pnts[80]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[2], pnts[1], pnts[76]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[76], pnts[77], pnts[2]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[3], pnts[2], pnts[77]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[77], pnts[78], pnts[3]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[4], pnts[3], pnts[78]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[78], pnts[79], pnts[4]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[5], pnts[4], pnts[79]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[79], pnts[80], pnts[5]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[85], pnts[10], pnts[5]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[5], pnts[81], pnts[85]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[86], pnts[85], pnts[81]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[81], pnts[82], pnts[86]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[87], pnts[86], pnts[82]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[82], pnts[83], pnts[87]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[88], pnts[87], pnts[83]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[83], pnts[84], pnts[88]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[89], pnts[15], pnts[10]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[10], pnts[85], pnts[89]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[90], pnts[89], pnts[85]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[85], pnts[86], pnts[90]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[91], pnts[90], pnts[86]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[86], pnts[87], pnts[91]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[92], pnts[91], pnts[87]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[87], pnts[88], pnts[92]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[93], pnts[20], pnts[15]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[15], pnts[89], pnts[93]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[94], pnts[93], pnts[89]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[89], pnts[90], pnts[94]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[95], pnts[94], pnts[90]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[90], pnts[91], pnts[95]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[96], pnts[95], pnts[91]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[91], pnts[92], pnts[96]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[97], pnts[25], pnts[20]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[20], pnts[93], pnts[97]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[98], pnts[97], pnts[93]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[93], pnts[94], pnts[98]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[99], pnts[98], pnts[94]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[94], pnts[95], pnts[99]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[100], pnts[99], pnts[95]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[95], pnts[96], pnts[100]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[101], pnts[30], pnts[25]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[25], pnts[97], pnts[101]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[102], pnts[101], pnts[97]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[97], pnts[98], pnts[102]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[103], pnts[102], pnts[98]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[98], pnts[99], pnts[103]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[104], pnts[103], pnts[99]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[99], pnts[100], pnts[104]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[105], pnts[35], pnts[30]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[30], pnts[101], pnts[105]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[106], pnts[105], pnts[101]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[101], pnts[102], pnts[106]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[107], pnts[106], pnts[102]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[102], pnts[103], pnts[107]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[108], pnts[107], pnts[103]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[103], pnts[104], pnts[108]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[109], pnts[40], pnts[35]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[35], pnts[105], pnts[109]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[110], pnts[109], pnts[105]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[105], pnts[106], pnts[110]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[111], pnts[110], pnts[106]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[106], pnts[107], pnts[111]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[112], pnts[111], pnts[107]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[107], pnts[108], pnts[112]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[113], pnts[45], pnts[40]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[40], pnts[109], pnts[113]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[114], pnts[113], pnts[109]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[109], pnts[110], pnts[114]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[115], pnts[114], pnts[110]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[110], pnts[111], pnts[115]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[116], pnts[115], pnts[111]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[111], pnts[112], pnts[116]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[117], pnts[50], pnts[45]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[45], pnts[113], pnts[117]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[118], pnts[117], pnts[113]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[113], pnts[114], pnts[118]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[119], pnts[118], pnts[114]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[114], pnts[115], pnts[119]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[120], pnts[119], pnts[115]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[115], pnts[116], pnts[120]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[121], pnts[55], pnts[50]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[50], pnts[117], pnts[121]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[122], pnts[121], pnts[117]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[117], pnts[118], pnts[122]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[123], pnts[122], pnts[118]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[118], pnts[119], pnts[123]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[124], pnts[123], pnts[119]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[119], pnts[120], pnts[124]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[125], pnts[60], pnts[55]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[55], pnts[121], pnts[125]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[126], pnts[125], pnts[121]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[121], pnts[122], pnts[126]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[127], pnts[126], pnts[122]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[122], pnts[123], pnts[127]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[128], pnts[127], pnts[123]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[123], pnts[124], pnts[128]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[129], pnts[65], pnts[60]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[60], pnts[125], pnts[129]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[130], pnts[129], pnts[125]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[125], pnts[126], pnts[130]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[131], pnts[130], pnts[126]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[126], pnts[127], pnts[131]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[132], pnts[131], pnts[127]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[127], pnts[128], pnts[132]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[133], pnts[70], pnts[65]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[65], pnts[129], pnts[133]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[134], pnts[133], pnts[129]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[129], pnts[130], pnts[134]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[135], pnts[134], pnts[130]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[130], pnts[131], pnts[135]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[136], pnts[135], pnts[131]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[131], pnts[132], pnts[136]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[137], pnts[75], pnts[70]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[70], pnts[133], pnts[137]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[138], pnts[137], pnts[133]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[133], pnts[134], pnts[138]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[139], pnts[138], pnts[134]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[134], pnts[135], pnts[139]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[140], pnts[139], pnts[135]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[135], pnts[136], pnts[140]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[141], pnts[80], pnts[75]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[75], pnts[137], pnts[141]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[142], pnts[141], pnts[137]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[137], pnts[138], pnts[142]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[143], pnts[142], pnts[138]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[138], pnts[139], pnts[143]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[144], pnts[143], pnts[139]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[139], pnts[140], pnts[144]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[81], pnts[5], pnts[80]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[80], pnts[141], pnts[81]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[82], pnts[81], pnts[141]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[141], pnts[142], pnts[82]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[83], pnts[82], pnts[142]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[142], pnts[143], pnts[83]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[84], pnts[83], pnts[143]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[143], pnts[144], pnts[84]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[149], pnts[88], pnts[84]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[84], pnts[145], pnts[149]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[150], pnts[149], pnts[145]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[145], pnts[146], pnts[150]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[151], pnts[150], pnts[146]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[146], pnts[147], pnts[151]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[152], pnts[151], pnts[147]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[147], pnts[148], pnts[152]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[153], pnts[92], pnts[88]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[88], pnts[149], pnts[153]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[154], pnts[153], pnts[149]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[149], pnts[150], pnts[154]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[155], pnts[154], pnts[150]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[150], pnts[151], pnts[155]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[156], pnts[155], pnts[151]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[151], pnts[152], pnts[156]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[157], pnts[96], pnts[92]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[92], pnts[153], pnts[157]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[158], pnts[157], pnts[153]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[153], pnts[154], pnts[158]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[159], pnts[158], pnts[154]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[154], pnts[155], pnts[159]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[160], pnts[159], pnts[155]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[155], pnts[156], pnts[160]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[161], pnts[100], pnts[96]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[96], pnts[157], pnts[161]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[162], pnts[161], pnts[157]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[157], pnts[158], pnts[162]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[163], pnts[162], pnts[158]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[158], pnts[159], pnts[163]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[164], pnts[163], pnts[159]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[159], pnts[160], pnts[164]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[165], pnts[104], pnts[100]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[100], pnts[161], pnts[165]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[166], pnts[165], pnts[161]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[161], pnts[162], pnts[166]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[167], pnts[166], pnts[162]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[162], pnts[163], pnts[167]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[168], pnts[167], pnts[163]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[163], pnts[164], pnts[168]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[169], pnts[108], pnts[104]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[104], pnts[165], pnts[169]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[170], pnts[169], pnts[165]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[165], pnts[166], pnts[170]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[171], pnts[170], pnts[166]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[166], pnts[167], pnts[171]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[172], pnts[171], pnts[167]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[167], pnts[168], pnts[172]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[173], pnts[112], pnts[108]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[108], pnts[169], pnts[173]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[174], pnts[173], pnts[169]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[169], pnts[170], pnts[174]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[175], pnts[174], pnts[170]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[170], pnts[171], pnts[175]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[176], pnts[175], pnts[171]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[171], pnts[172], pnts[176]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[177], pnts[116], pnts[112]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[112], pnts[173], pnts[177]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[178], pnts[177], pnts[173]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[173], pnts[174], pnts[178]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[179], pnts[178], pnts[174]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[174], pnts[175], pnts[179]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[180], pnts[179], pnts[175]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[175], pnts[176], pnts[180]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[181], pnts[120], pnts[116]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[116], pnts[177], pnts[181]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[182], pnts[181], pnts[177]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[177], pnts[178], pnts[182]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[183], pnts[182], pnts[178]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[178], pnts[179], pnts[183]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[184], pnts[183], pnts[179]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[179], pnts[180], pnts[184]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[185], pnts[124], pnts[120]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[120], pnts[181], pnts[185]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[186], pnts[185], pnts[181]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[181], pnts[182], pnts[186]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[187], pnts[186], pnts[182]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[182], pnts[183], pnts[187]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[188], pnts[187], pnts[183]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[183], pnts[184], pnts[188]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[189], pnts[128], pnts[124]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[124], pnts[185], pnts[189]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[190], pnts[189], pnts[185]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[185], pnts[186], pnts[190]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[191], pnts[190], pnts[186]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[186], pnts[187], pnts[191]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[192], pnts[191], pnts[187]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[187], pnts[188], pnts[192]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[193], pnts[132], pnts[128]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[128], pnts[189], pnts[193]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[194], pnts[193], pnts[189]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[189], pnts[190], pnts[194]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[195], pnts[194], pnts[190]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[190], pnts[191], pnts[195]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[196], pnts[195], pnts[191]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[191], pnts[192], pnts[196]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[197], pnts[136], pnts[132]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[132], pnts[193], pnts[197]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[198], pnts[197], pnts[193]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[193], pnts[194], pnts[198]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[199], pnts[198], pnts[194]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[194], pnts[195], pnts[199]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[200], pnts[199], pnts[195]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[195], pnts[196], pnts[200]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[201], pnts[140], pnts[136]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[136], pnts[197], pnts[201]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[202], pnts[201], pnts[197]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[197], pnts[198], pnts[202]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[203], pnts[202], pnts[198]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[198], pnts[199], pnts[203]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[204], pnts[203], pnts[199]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[199], pnts[200], pnts[204]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[205], pnts[144], pnts[140]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[140], pnts[201], pnts[205]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[206], pnts[205], pnts[201]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[201], pnts[202], pnts[206]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[207], pnts[206], pnts[202]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[202], pnts[203], pnts[207]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[208], pnts[207], pnts[203]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[203], pnts[204], pnts[208]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[145], pnts[84], pnts[144]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[144], pnts[205], pnts[145]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[146], pnts[145], pnts[205]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[205], pnts[206], pnts[146]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[147], pnts[146], pnts[206]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[206], pnts[207], pnts[147]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[148], pnts[147], pnts[207]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[207], pnts[208], pnts[148]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[213], pnts[152], pnts[148]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[148], pnts[209], pnts[213]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[214], pnts[213], pnts[209]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[209], pnts[210], pnts[214]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[215], pnts[214], pnts[210]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[210], pnts[211], pnts[215]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[215], pnts[211]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[216], pnts[156], pnts[152]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[152], pnts[213], pnts[216]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[217], pnts[216], pnts[213]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[213], pnts[214], pnts[217]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[218], pnts[217], pnts[214]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[214], pnts[215], pnts[218]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[218], pnts[215]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[219], pnts[160], pnts[156]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[156], pnts[216], pnts[219]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[220], pnts[219], pnts[216]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[216], pnts[217], pnts[220]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[221], pnts[220], pnts[217]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[217], pnts[218], pnts[221]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[221], pnts[218]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[222], pnts[164], pnts[160]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[160], pnts[219], pnts[222]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[223], pnts[222], pnts[219]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[219], pnts[220], pnts[223]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[224], pnts[223], pnts[220]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[220], pnts[221], pnts[224]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[224], pnts[221]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[225], pnts[168], pnts[164]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[164], pnts[222], pnts[225]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[226], pnts[225], pnts[222]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[222], pnts[223], pnts[226]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[227], pnts[226], pnts[223]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[223], pnts[224], pnts[227]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[227], pnts[224]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[228], pnts[172], pnts[168]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[168], pnts[225], pnts[228]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[229], pnts[228], pnts[225]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[225], pnts[226], pnts[229]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[230], pnts[229], pnts[226]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[226], pnts[227], pnts[230]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[230], pnts[227]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[231], pnts[176], pnts[172]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[172], pnts[228], pnts[231]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[232], pnts[231], pnts[228]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[228], pnts[229], pnts[232]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[233], pnts[232], pnts[229]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[229], pnts[230], pnts[233]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[233], pnts[230]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[234], pnts[180], pnts[176]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[176], pnts[231], pnts[234]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[235], pnts[234], pnts[231]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[231], pnts[232], pnts[235]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[236], pnts[235], pnts[232]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[232], pnts[233], pnts[236]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[236], pnts[233]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[237], pnts[184], pnts[180]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[180], pnts[234], pnts[237]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[238], pnts[237], pnts[234]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[234], pnts[235], pnts[238]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[239], pnts[238], pnts[235]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[235], pnts[236], pnts[239]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[239], pnts[236]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[240], pnts[188], pnts[184]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[184], pnts[237], pnts[240]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[241], pnts[240], pnts[237]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[237], pnts[238], pnts[241]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[242], pnts[241], pnts[238]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[238], pnts[239], pnts[242]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[242], pnts[239]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[243], pnts[192], pnts[188]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[188], pnts[240], pnts[243]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[244], pnts[243], pnts[240]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[240], pnts[241], pnts[244]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[245], pnts[244], pnts[241]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[241], pnts[242], pnts[245]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[245], pnts[242]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[246], pnts[196], pnts[192]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[192], pnts[243], pnts[246]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[247], pnts[246], pnts[243]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[243], pnts[244], pnts[247]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[248], pnts[247], pnts[244]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[244], pnts[245], pnts[248]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[248], pnts[245]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[249], pnts[200], pnts[196]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[196], pnts[246], pnts[249]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[250], pnts[249], pnts[246]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[246], pnts[247], pnts[250]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[251], pnts[250], pnts[247]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[247], pnts[248], pnts[251]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[251], pnts[248]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[252], pnts[204], pnts[200]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[200], pnts[249], pnts[252]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[253], pnts[252], pnts[249]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[249], pnts[250], pnts[253]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[254], pnts[253], pnts[250]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[250], pnts[251], pnts[254]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[254], pnts[251]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[255], pnts[208], pnts[204]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[204], pnts[252], pnts[255]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[256], pnts[255], pnts[252]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[252], pnts[253], pnts[256]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[257], pnts[256], pnts[253]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[253], pnts[254], pnts[257]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[257], pnts[254]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[209], pnts[148], pnts[208]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[208], pnts[255], pnts[209]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[210], pnts[209], pnts[255]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[255], pnts[256], pnts[210]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[211], pnts[210], pnts[256]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[256], pnts[257], pnts[211]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[212], pnts[211], pnts[257]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[264], pnts[263], pnts[258]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[258], pnts[259], pnts[264]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[265], pnts[264], pnts[259]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[259], pnts[260], pnts[265]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[266], pnts[265], pnts[260]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[260], pnts[261], pnts[266]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[267], pnts[266], pnts[261]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[261], pnts[262], pnts[267]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[269], pnts[268], pnts[263]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[263], pnts[264], pnts[269]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[270], pnts[269], pnts[264]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[264], pnts[265], pnts[270]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[271], pnts[270], pnts[265]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[265], pnts[266], pnts[271]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[272], pnts[271], pnts[266]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[266], pnts[267], pnts[272]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[274], pnts[273], pnts[268]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[268], pnts[269], pnts[274]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[275], pnts[274], pnts[269]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[269], pnts[270], pnts[275]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[276], pnts[275], pnts[270]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[270], pnts[271], pnts[276]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[277], pnts[276], pnts[271]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[271], pnts[272], pnts[277]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[279], pnts[278], pnts[273]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[273], pnts[274], pnts[279]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[280], pnts[279], pnts[274]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[274], pnts[275], pnts[280]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[281], pnts[280], pnts[275]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[275], pnts[276], pnts[281]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[282], pnts[281], pnts[276]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[276], pnts[277], pnts[282]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[284], pnts[283], pnts[278]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[278], pnts[279], pnts[284]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[285], pnts[284], pnts[279]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[279], pnts[280], pnts[285]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[286], pnts[285], pnts[280]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[280], pnts[281], pnts[286]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[287], pnts[286], pnts[281]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[281], pnts[282], pnts[287]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[289], pnts[288], pnts[283]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[283], pnts[284], pnts[289]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[290], pnts[289], pnts[284]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[284], pnts[285], pnts[290]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[291], pnts[290], pnts[285]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[285], pnts[286], pnts[291]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[292], pnts[291], pnts[286]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[286], pnts[287], pnts[292]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[294], pnts[293], pnts[288]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[288], pnts[289], pnts[294]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[295], pnts[294], pnts[289]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[289], pnts[290], pnts[295]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[296], pnts[295], pnts[290]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[290], pnts[291], pnts[296]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[297], pnts[296], pnts[291]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[291], pnts[292], pnts[297]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[259], pnts[258], pnts[293]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[293], pnts[294], pnts[259]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[260], pnts[259], pnts[294]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[294], pnts[295], pnts[260]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[261], pnts[260], pnts[295]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[295], pnts[296], pnts[261]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[262], pnts[261], pnts[296]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[296], pnts[297], pnts[262]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[302], pnts[267], pnts[262]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[262], pnts[298], pnts[302]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[303], pnts[302], pnts[298]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[298], pnts[299], pnts[303]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[304], pnts[303], pnts[299]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[299], pnts[300], pnts[304]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[305], pnts[304], pnts[300]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[300], pnts[301], pnts[305]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[306], pnts[272], pnts[267]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[267], pnts[302], pnts[306]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[307], pnts[306], pnts[302]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[302], pnts[303], pnts[307]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[308], pnts[307], pnts[303]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[303], pnts[304], pnts[308]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[309], pnts[308], pnts[304]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[304], pnts[305], pnts[309]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[310], pnts[277], pnts[272]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[272], pnts[306], pnts[310]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[311], pnts[310], pnts[306]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[306], pnts[307], pnts[311]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[312], pnts[311], pnts[307]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[307], pnts[308], pnts[312]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[313], pnts[312], pnts[308]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[308], pnts[309], pnts[313]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[314], pnts[282], pnts[277]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[277], pnts[310], pnts[314]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[315], pnts[314], pnts[310]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[310], pnts[311], pnts[315]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[316], pnts[315], pnts[311]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[311], pnts[312], pnts[316]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[317], pnts[316], pnts[312]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[312], pnts[313], pnts[317]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[318], pnts[287], pnts[282]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[282], pnts[314], pnts[318]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[319], pnts[318], pnts[314]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[314], pnts[315], pnts[319]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[320], pnts[319], pnts[315]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[315], pnts[316], pnts[320]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[321], pnts[320], pnts[316]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[316], pnts[317], pnts[321]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[322], pnts[292], pnts[287]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[287], pnts[318], pnts[322]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[323], pnts[322], pnts[318]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[318], pnts[319], pnts[323]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[324], pnts[323], pnts[319]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[319], pnts[320], pnts[324]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[325], pnts[324], pnts[320]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[320], pnts[321], pnts[325]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[326], pnts[297], pnts[292]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[292], pnts[322], pnts[326]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[327], pnts[326], pnts[322]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[322], pnts[323], pnts[327]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[328], pnts[327], pnts[323]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[323], pnts[324], pnts[328]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[329], pnts[328], pnts[324]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[324], pnts[325], pnts[329]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[298], pnts[262], pnts[297]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[297], pnts[326], pnts[298]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[299], pnts[298], pnts[326]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[326], pnts[327], pnts[299]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[300], pnts[299], pnts[327]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[327], pnts[328], pnts[300]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[301], pnts[300], pnts[328]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[328], pnts[329], pnts[301]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[336], pnts[335], pnts[330]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[330], pnts[331], pnts[336]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[337], pnts[336], pnts[331]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[331], pnts[332], pnts[337]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[338], pnts[337], pnts[332]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[332], pnts[333], pnts[338]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[339], pnts[338], pnts[333]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[333], pnts[334], pnts[339]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[341], pnts[340], pnts[335]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[335], pnts[336], pnts[341]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[342], pnts[341], pnts[336]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[336], pnts[337], pnts[342]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[343], pnts[342], pnts[337]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[337], pnts[338], pnts[343]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[344], pnts[343], pnts[338]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[338], pnts[339], pnts[344]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[346], pnts[345], pnts[340]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[340], pnts[341], pnts[346]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[347], pnts[346], pnts[341]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[341], pnts[342], pnts[347]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[348], pnts[347], pnts[342]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[342], pnts[343], pnts[348]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[349], pnts[348], pnts[343]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[343], pnts[344], pnts[349]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[351], pnts[350], pnts[345]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[345], pnts[346], pnts[351]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[352], pnts[351], pnts[346]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[346], pnts[347], pnts[352]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[353], pnts[352], pnts[347]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[347], pnts[348], pnts[353]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[354], pnts[353], pnts[348]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[348], pnts[349], pnts[354]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[356], pnts[355], pnts[350]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[350], pnts[351], pnts[356]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[357], pnts[356], pnts[351]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[351], pnts[352], pnts[357]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[358], pnts[357], pnts[352]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[352], pnts[353], pnts[358]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[359], pnts[358], pnts[353]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[353], pnts[354], pnts[359]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[361], pnts[360], pnts[355]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[355], pnts[356], pnts[361]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[362], pnts[361], pnts[356]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[356], pnts[357], pnts[362]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[363], pnts[362], pnts[357]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[357], pnts[358], pnts[363]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[364], pnts[363], pnts[358]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[358], pnts[359], pnts[364]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[366], pnts[365], pnts[360]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[360], pnts[361], pnts[366]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[367], pnts[366], pnts[361]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[361], pnts[362], pnts[367]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[368], pnts[367], pnts[362]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[362], pnts[363], pnts[368]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[369], pnts[368], pnts[363]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[363], pnts[364], pnts[369]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[331], pnts[330], pnts[365]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[365], pnts[366], pnts[331]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[332], pnts[331], pnts[366]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[366], pnts[367], pnts[332]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[333], pnts[332], pnts[367]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[367], pnts[368], pnts[333]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[334], pnts[333], pnts[368]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[368], pnts[369], pnts[334]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[374], pnts[339], pnts[334]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[334], pnts[370], pnts[374]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[375], pnts[374], pnts[370]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[370], pnts[371], pnts[375]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[376], pnts[375], pnts[371]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[371], pnts[372], pnts[376]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[377], pnts[376], pnts[372]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[372], pnts[373], pnts[377]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[378], pnts[344], pnts[339]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[339], pnts[374], pnts[378]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[379], pnts[378], pnts[374]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[374], pnts[375], pnts[379]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[380], pnts[379], pnts[375]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[375], pnts[376], pnts[380]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[381], pnts[380], pnts[376]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[376], pnts[377], pnts[381]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[382], pnts[349], pnts[344]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[344], pnts[378], pnts[382]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[383], pnts[382], pnts[378]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[378], pnts[379], pnts[383]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[384], pnts[383], pnts[379]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[379], pnts[380], pnts[384]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[385], pnts[384], pnts[380]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[380], pnts[381], pnts[385]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[386], pnts[354], pnts[349]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[349], pnts[382], pnts[386]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[387], pnts[386], pnts[382]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[382], pnts[383], pnts[387]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[388], pnts[387], pnts[383]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[383], pnts[384], pnts[388]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[389], pnts[388], pnts[384]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[384], pnts[385], pnts[389]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[390], pnts[359], pnts[354]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[354], pnts[386], pnts[390]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[391], pnts[390], pnts[386]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[386], pnts[387], pnts[391]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[392], pnts[391], pnts[387]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[387], pnts[388], pnts[392]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[393], pnts[392], pnts[388]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[388], pnts[389], pnts[393]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[394], pnts[364], pnts[359]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[359], pnts[390], pnts[394]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[395], pnts[394], pnts[390]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[390], pnts[391], pnts[395]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[396], pnts[395], pnts[391]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[391], pnts[392], pnts[396]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[397], pnts[396], pnts[392]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[392], pnts[393], pnts[397]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[398], pnts[369], pnts[364]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[364], pnts[394], pnts[398]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[399], pnts[398], pnts[394]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[394], pnts[395], pnts[399]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[400], pnts[399], pnts[395]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[395], pnts[396], pnts[400]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[401], pnts[400], pnts[396]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[396], pnts[397], pnts[401]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[370], pnts[334], pnts[369]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[369], pnts[398], pnts[370]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[371], pnts[370], pnts[398]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[398], pnts[399], pnts[371]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[372], pnts[371], pnts[399]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[399], pnts[400], pnts[372]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[373], pnts[372], pnts[400]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[400], pnts[401], pnts[373]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[403], pnts[407]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[408], pnts[407], pnts[403]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[403], pnts[404], pnts[408]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[409], pnts[408], pnts[404]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[404], pnts[405], pnts[409]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[410], pnts[409], pnts[405]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[405], pnts[406], pnts[410]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[407], pnts[411]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[412], pnts[411], pnts[407]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[407], pnts[408], pnts[412]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[413], pnts[412], pnts[408]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[408], pnts[409], pnts[413]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[414], pnts[413], pnts[409]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[409], pnts[410], pnts[414]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[411], pnts[415]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[416], pnts[415], pnts[411]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[411], pnts[412], pnts[416]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[417], pnts[416], pnts[412]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[412], pnts[413], pnts[417]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[418], pnts[417], pnts[413]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[413], pnts[414], pnts[418]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[415], pnts[419]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[420], pnts[419], pnts[415]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[415], pnts[416], pnts[420]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[421], pnts[420], pnts[416]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[416], pnts[417], pnts[421]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[422], pnts[421], pnts[417]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[417], pnts[418], pnts[422]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[419], pnts[423]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[424], pnts[423], pnts[419]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[419], pnts[420], pnts[424]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[425], pnts[424], pnts[420]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[420], pnts[421], pnts[425]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[426], pnts[425], pnts[421]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[421], pnts[422], pnts[426]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[423], pnts[427]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[428], pnts[427], pnts[423]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[423], pnts[424], pnts[428]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[429], pnts[428], pnts[424]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[424], pnts[425], pnts[429]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[430], pnts[429], pnts[425]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[425], pnts[426], pnts[430]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[427], pnts[431]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[432], pnts[431], pnts[427]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[427], pnts[428], pnts[432]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[433], pnts[432], pnts[428]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[428], pnts[429], pnts[433]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[434], pnts[433], pnts[429]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[429], pnts[430], pnts[434]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[431], pnts[435]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[436], pnts[435], pnts[431]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[431], pnts[432], pnts[436]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[437], pnts[436], pnts[432]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[432], pnts[433], pnts[437]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[438], pnts[437], pnts[433]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[433], pnts[434], pnts[438]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[435], pnts[439]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[440], pnts[439], pnts[435]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[435], pnts[436], pnts[440]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[441], pnts[440], pnts[436]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[436], pnts[437], pnts[441]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[442], pnts[441], pnts[437]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[437], pnts[438], pnts[442]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[439], pnts[443]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[444], pnts[443], pnts[439]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[439], pnts[440], pnts[444]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[445], pnts[444], pnts[440]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[440], pnts[441], pnts[445]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[446], pnts[445], pnts[441]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[441], pnts[442], pnts[446]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[443], pnts[447]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[448], pnts[447], pnts[443]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[443], pnts[444], pnts[448]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[449], pnts[448], pnts[444]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[444], pnts[445], pnts[449]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[450], pnts[449], pnts[445]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[445], pnts[446], pnts[450]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[447], pnts[451]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[452], pnts[451], pnts[447]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[447], pnts[448], pnts[452]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[453], pnts[452], pnts[448]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[448], pnts[449], pnts[453]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[454], pnts[453], pnts[449]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[449], pnts[450], pnts[454]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[451], pnts[455]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[456], pnts[455], pnts[451]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[451], pnts[452], pnts[456]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[457], pnts[456], pnts[452]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[452], pnts[453], pnts[457]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[458], pnts[457], pnts[453]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[453], pnts[454], pnts[458]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[455], pnts[459]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[460], pnts[459], pnts[455]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[455], pnts[456], pnts[460]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[461], pnts[460], pnts[456]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[456], pnts[457], pnts[461]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[462], pnts[461], pnts[457]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[457], pnts[458], pnts[462]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[459], pnts[463]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[464], pnts[463], pnts[459]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[459], pnts[460], pnts[464]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[465], pnts[464], pnts[460]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[460], pnts[461], pnts[465]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[466], pnts[465], pnts[461]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[461], pnts[462], pnts[466]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[402], pnts[463], pnts[403]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[404], pnts[403], pnts[463]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[463], pnts[464], pnts[404]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[405], pnts[404], pnts[464]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[464], pnts[465], pnts[405]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[406], pnts[405], pnts[465]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[465], pnts[466], pnts[406]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[471], pnts[410], pnts[406]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[406], pnts[467], pnts[471]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[472], pnts[471], pnts[467]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[467], pnts[468], pnts[472]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[473], pnts[472], pnts[468]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[468], pnts[469], pnts[473]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[474], pnts[473], pnts[469]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[469], pnts[470], pnts[474]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[475], pnts[414], pnts[410]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[410], pnts[471], pnts[475]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[476], pnts[475], pnts[471]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[471], pnts[472], pnts[476]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[477], pnts[476], pnts[472]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[472], pnts[473], pnts[477]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[478], pnts[477], pnts[473]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[473], pnts[474], pnts[478]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[479], pnts[418], pnts[414]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[414], pnts[475], pnts[479]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[480], pnts[479], pnts[475]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[475], pnts[476], pnts[480]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[481], pnts[480], pnts[476]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[476], pnts[477], pnts[481]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[482], pnts[481], pnts[477]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[477], pnts[478], pnts[482]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[483], pnts[422], pnts[418]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[418], pnts[479], pnts[483]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[484], pnts[483], pnts[479]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[479], pnts[480], pnts[484]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[485], pnts[484], pnts[480]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[480], pnts[481], pnts[485]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[486], pnts[485], pnts[481]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[481], pnts[482], pnts[486]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[487], pnts[426], pnts[422]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[422], pnts[483], pnts[487]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[488], pnts[487], pnts[483]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[483], pnts[484], pnts[488]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[489], pnts[488], pnts[484]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[484], pnts[485], pnts[489]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[490], pnts[489], pnts[485]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[485], pnts[486], pnts[490]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[491], pnts[430], pnts[426]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[426], pnts[487], pnts[491]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[492], pnts[491], pnts[487]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[487], pnts[488], pnts[492]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[493], pnts[492], pnts[488]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[488], pnts[489], pnts[493]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[494], pnts[493], pnts[489]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[489], pnts[490], pnts[494]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[495], pnts[434], pnts[430]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[430], pnts[491], pnts[495]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[496], pnts[495], pnts[491]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[491], pnts[492], pnts[496]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[497], pnts[496], pnts[492]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[492], pnts[493], pnts[497]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[498], pnts[497], pnts[493]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[493], pnts[494], pnts[498]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[499], pnts[438], pnts[434]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[434], pnts[495], pnts[499]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[500], pnts[499], pnts[495]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[495], pnts[496], pnts[500]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[501], pnts[500], pnts[496]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[496], pnts[497], pnts[501]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[502], pnts[501], pnts[497]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[497], pnts[498], pnts[502]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[503], pnts[442], pnts[438]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[438], pnts[499], pnts[503]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[504], pnts[503], pnts[499]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[499], pnts[500], pnts[504]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[505], pnts[504], pnts[500]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[500], pnts[501], pnts[505]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[506], pnts[505], pnts[501]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[501], pnts[502], pnts[506]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[507], pnts[446], pnts[442]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[442], pnts[503], pnts[507]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[508], pnts[507], pnts[503]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[503], pnts[504], pnts[508]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[509], pnts[508], pnts[504]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[504], pnts[505], pnts[509]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[510], pnts[509], pnts[505]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[505], pnts[506], pnts[510]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[511], pnts[450], pnts[446]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[446], pnts[507], pnts[511]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[512], pnts[511], pnts[507]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[507], pnts[508], pnts[512]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[513], pnts[512], pnts[508]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[508], pnts[509], pnts[513]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[514], pnts[513], pnts[509]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[509], pnts[510], pnts[514]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[515], pnts[454], pnts[450]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[450], pnts[511], pnts[515]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[516], pnts[515], pnts[511]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[511], pnts[512], pnts[516]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[517], pnts[516], pnts[512]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[512], pnts[513], pnts[517]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[518], pnts[517], pnts[513]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[513], pnts[514], pnts[518]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[519], pnts[458], pnts[454]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[454], pnts[515], pnts[519]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[520], pnts[519], pnts[515]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[515], pnts[516], pnts[520]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[521], pnts[520], pnts[516]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[516], pnts[517], pnts[521]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[522], pnts[521], pnts[517]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[517], pnts[518], pnts[522]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[523], pnts[462], pnts[458]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[458], pnts[519], pnts[523]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[524], pnts[523], pnts[519]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[519], pnts[520], pnts[524]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[525], pnts[524], pnts[520]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[520], pnts[521], pnts[525]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[526], pnts[525], pnts[521]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[521], pnts[522], pnts[526]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[527], pnts[466], pnts[462]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[462], pnts[523], pnts[527]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[528], pnts[527], pnts[523]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[523], pnts[524], pnts[528]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[529], pnts[528], pnts[524]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[524], pnts[525], pnts[529]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[530], pnts[529], pnts[525]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[525], pnts[526], pnts[530]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[467], pnts[406], pnts[466]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[466], pnts[527], pnts[467]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[468], pnts[467], pnts[527]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[527], pnts[528], pnts[468]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[469], pnts[468], pnts[528]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[528], pnts[529], pnts[469]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[470], pnts[469], pnts[529]).setEmission(color).setMaterial(mat), //
-//                new Triangle(pnts[529], pnts[530], pnts[470]).setEmission(color).setMaterial(mat) //
-//        );
-//        scene.lights.add(new PointLight(new Color(500, 500, 500), new Point(100, 0, -100)).setkQ(0.000001));
-//
-//        camera.setRayTracer(new RayTracerBasic(scene)).renderImage().printGrid(50, new Color(YELLOW)).writeToImage();
-//    }
-//
-//}
\ No newline at end of file
+package unittests.special;
+
+import static java.awt.Color.YELLOW;
+
+import org.junit.jupiter.api.Test;
+
+import geometries.Triangle;
+import lighting.PointLight;
+import primitives.Color;
+import primitives.Material;
+import primitives.Point;
+import primitives.Vector;
+import renderer.Camera;
+import renderer.ImageWriter;
+import renderer.RayTracerBasic;
+import scene.Scene;
+
+/**
+ * Test rendering an image
+ *
+ * @author Dan
+ */
+public class TeapotTest {
+    private final ImageWriter imageWriter = new ImageWriter("teapot", 800, 800);
+
+    private final Camera camera = new Camera(new Point(0, 0, -1000), new Vector(0, 1, 0), new Vector(0, 0, 1)) //
+            .setVPDistance(1000).setVPSize(200, 200) //
+            .setImageWriter(imageWriter) //
+            .setThreadsCount(3);
+
+    private final Scene scene = new Scene("Test scene");
+
+    private static final Color color = new Color(200, 0, 0);
+    private static final Material mat = new Material().setkD(0.5).setkS(0.5).setnShininess(60);
+
+    private static Point[] pnts = new Point[] { null, //
+            new Point(40.6266, 28.3457, -1.10804), //
+            new Point(40.0714, 30.4443, -1.10804), //
+            new Point(40.7155, 31.1438, -1.10804), //
+            new Point(42.0257, 30.4443, -1.10804), //
+            new Point(43.4692, 28.3457, -1.10804), //
+            new Point(37.5425, 28.3457, 14.5117), //
+            new Point(37.0303, 30.4443, 14.2938), //
+            new Point(37.6244, 31.1438, 14.5466), //
+            new Point(38.8331, 30.4443, 15.0609), //
+            new Point(40.1647, 28.3457, 15.6274), //
+            new Point(29.0859, 28.3457, 27.1468), //
+            new Point(28.6917, 30.4443, 26.7527), //
+            new Point(29.149, 31.1438, 27.2099), //
+            new Point(30.0792, 30.4443, 28.1402), //
+            new Point(31.1041, 28.3457, 29.165), //
+            new Point(16.4508, 28.3457, 35.6034), //
+            new Point(16.2329, 30.4443, 35.0912), //
+            new Point(16.4857, 31.1438, 35.6853), //
+            new Point(16.9999, 30.4443, 36.894), //
+            new Point(17.5665, 28.3457, 38.2256), //
+            new Point(0.831025, 28.3457, 38.6876), //
+            new Point(0.831025, 30.4443, 38.1324), //
+            new Point(0.831025, 31.1438, 38.7764), //
+            new Point(0.831025, 30.4443, 40.0866), //
+            new Point(0.831025, 28.3457, 41.5301), //
+            new Point(-15.868, 28.3457, 35.6034), //
+            new Point(-15.0262, 30.4443, 35.0912), //
+            new Point(-14.9585, 31.1438, 35.6853), //
+            new Point(-15.3547, 30.4443, 36.894), //
+            new Point(-15.9044, 28.3457, 38.2256), //
+            new Point(-28.3832, 28.3457, 27.1468), //
+            new Point(-27.4344, 30.4443, 26.7527), //
+            new Point(-27.6068, 31.1438, 27.2099), //
+            new Point(-28.4322, 30.4443, 28.1402), //
+            new Point(-29.4421, 28.3457, 29.165), //
+            new Point(-36.2402, 28.3457, 14.5117), //
+            new Point(-35.52, 30.4443, 14.2938), //
+            new Point(-36.0073, 31.1438, 14.5466), //
+            new Point(-37.1767, 30.4443, 15.0609), //
+            new Point(-38.5027, 28.3457, 15.6274), //
+            new Point(-38.9646, 28.3457, -1.10804), //
+            new Point(-38.4094, 30.4443, -1.10804), //
+            new Point(-39.0534, 31.1438, -1.10804), //
+            new Point(-40.3636, 30.4443, -1.10804), //
+            new Point(-41.8071, 28.3457, -1.10804), //
+            new Point(-35.8804, 28.3457, -16.7278), //
+            new Point(-35.3683, 30.4443, -16.5099), //
+            new Point(-35.9624, 31.1438, -16.7627), //
+            new Point(-37.1711, 30.4443, -17.2769), //
+            new Point(-38.5027, 28.3457, -17.8435), //
+            new Point(-27.4238, 28.3457, -29.3629), //
+            new Point(-27.0297, 30.4443, -28.9687), //
+            new Point(-27.4869, 31.1438, -29.426), //
+            new Point(-28.4172, 30.4443, -30.3562), //
+            new Point(-29.4421, 28.3457, -31.3811), //
+            new Point(-14.7887, 28.3457, -37.8195), //
+            new Point(-14.5708, 30.4443, -37.3073), //
+            new Point(-14.8236, 31.1438, -37.9014), //
+            new Point(-15.3379, 30.4443, -39.1101), //
+            new Point(-15.9044, 28.3457, -40.4417), //
+            new Point(0.831025, 28.3457, -40.9036), //
+            new Point(0.831025, 30.4443, -40.3484), //
+            new Point(0.831025, 31.1438, -40.9925), //
+            new Point(0.831025, 30.4443, -42.3027), //
+            new Point(0.831025, 28.3457, -43.7462), //
+            new Point(16.4508, 28.3457, -37.8195), //
+            new Point(16.2329, 30.4443, -37.3073), //
+            new Point(16.4857, 31.1438, -37.9014), //
+            new Point(16.9999, 30.4443, -39.1101), //
+            new Point(17.5665, 28.3457, -40.4417), //
+            new Point(29.0859, 28.3457, -29.3629), //
+            new Point(28.6917, 30.4443, -28.9687), //
+            new Point(29.149, 31.1438, -29.426), //
+            new Point(30.0792, 30.4443, -30.3562), //
+            new Point(31.1041, 28.3457, -31.3811), //
+            new Point(37.5425, 28.3457, -16.7278), //
+            new Point(37.0303, 30.4443, -16.5099), //
+            new Point(37.6244, 31.1438, -16.7627), //
+            new Point(38.8331, 30.4443, -17.2769), //
+            new Point(40.1647, 28.3457, -17.8435), //
+            new Point(48.6879, 17.1865, -1.10804), //
+            new Point(53.2404, 6.22714, -1.10804), //
+            new Point(56.4605, -4.33246, -1.10804), //
+            new Point(57.6819, -14.2925, -1.10804), //
+            new Point(44.979, 17.1865, 17.6758), //
+            new Point(49.1787, 6.22714, 19.4626), //
+            new Point(52.1492, -4.33246, 20.7265), //
+            new Point(53.2759, -14.2925, 21.2059), //
+            new Point(34.8094, 17.1865, 32.8703), //
+            new Point(38.0417, 6.22714, 36.1026), //
+            new Point(40.3279, -4.33246, 38.3889), //
+            new Point(41.1951, -14.2925, 39.2561), //
+            new Point(19.6148, 17.1865, 43.0399), //
+            new Point(21.4017, 6.22714, 47.2396), //
+            new Point(22.6656, -4.33246, 50.2101), //
+            new Point(23.145, -14.2925, 51.3369), //
+            new Point(0.831025, 17.1865, 46.7488), //
+            new Point(0.831025, 6.22714, 51.3013), //
+            new Point(0.831025, -4.33246, 54.5214), //
+            new Point(0.831025, -14.2925, 55.7428), //
+            new Point(-17.9528, 17.1865, 43.0399), //
+            new Point(-19.7397, 6.22714, 47.2396), //
+            new Point(-21.0035, -4.33246, 50.2101), //
+            new Point(-21.4829, -14.2925, 51.3369), //
+            new Point(-33.1474, 17.1865, 32.8703), //
+            new Point(-36.3796, 6.22714, 36.1026), //
+            new Point(-38.6659, -4.33246, 38.3889), //
+            new Point(-39.5331, -14.2925, 39.2561), //
+            new Point(-43.3169, 17.1865, 17.6758), //
+            new Point(-47.5166, 6.22714, 19.4626), //
+            new Point(-50.4871, -4.33246, 20.7265), //
+            new Point(-51.6139, -14.2925, 21.2059), //
+            new Point(-47.0258, 17.1865, -1.10804), //
+            new Point(-51.5784, 6.22714, -1.10804), //
+            new Point(-54.7984, -4.33246, -1.10804), //
+            new Point(-56.0198, -14.2925, -1.10804), //
+            new Point(-43.3169, 17.1865, -19.8919), //
+            new Point(-47.5166, 6.22714, -21.6787), //
+            new Point(-50.4871, -4.33246, -22.9426), //
+            new Point(-51.6139, -14.2925, -23.422), //
+            new Point(-33.1474, 17.1865, -35.0864), //
+            new Point(-36.3796, 6.22714, -38.3187), //
+            new Point(-38.6659, -4.33246, -40.6049), //
+            new Point(-39.5331, -14.2925, -41.4721), //
+            new Point(-17.9528, 17.1865, -45.256), //
+            new Point(-19.7397, 6.22714, -49.4557), //
+            new Point(-21.0035, -4.33246, -52.4262), //
+            new Point(-21.4829, -14.2925, -53.5529), //
+            new Point(0.831025, 17.1865, -48.9649), //
+            new Point(0.831025, 6.22714, -53.5174), //
+            new Point(0.831025, -4.33246, -56.7375), //
+            new Point(0.831025, -14.2925, -57.9589), //
+            new Point(19.6148, 17.1865, -45.256), //
+            new Point(21.4017, 6.22714, -49.4557), //
+            new Point(22.6656, -4.33246, -52.4262), //
+            new Point(23.145, -14.2925, -53.5529), //
+            new Point(34.8094, 17.1865, -35.0864), //
+            new Point(38.0417, 6.22714, -38.3187), //
+            new Point(40.3279, -4.33246, -40.6049), //
+            new Point(41.1951, -14.2925, -41.4721), //
+            new Point(44.979, 17.1865, -19.8919), //
+            new Point(49.1787, 6.22714, -21.6787), //
+            new Point(52.1492, -4.33246, -22.9426), //
+            new Point(53.2759, -14.2925, -23.422), //
+            new Point(55.4611, -22.7202, -1.10804), //
+            new Point(50.5755, -28.9493, -1.10804), //
+            new Point(45.6899, -33.1798, -1.10804), //
+            new Point(43.4692, -35.6115, -1.10804), //
+            new Point(51.2273, -22.7202, 20.3343), //
+            new Point(46.7203, -28.9493, 18.4167), //
+            new Point(42.2133, -33.1798, 16.4991), //
+            new Point(40.1647, -35.6115, 15.6274), //
+            new Point(39.6184, -22.7202, 37.6793), //
+            new Point(36.1496, -28.9493, 34.2106), //
+            new Point(32.6808, -33.1798, 30.7418), //
+            new Point(31.1041, -35.6115, 29.165), //
+            new Point(22.2733, -22.7202, 49.2882), //
+            new Point(20.3557, -28.9493, 44.7813), //
+            new Point(18.4381, -33.1798, 40.2743), //
+            new Point(17.5665, -35.6115, 38.2256), //
+            new Point(0.831025, -22.7202, 53.5221), //
+            new Point(0.831025, -28.9493, 48.6365), //
+            new Point(0.831025, -33.1798, 43.7508), //
+            new Point(0.831025, -35.6115, 41.5301), //
+            new Point(-20.6113, -22.7202, 49.2882), //
+            new Point(-18.6937, -28.9493, 44.7813), //
+            new Point(-16.7761, -33.1798, 40.2743), //
+            new Point(-15.9044, -35.6115, 38.2256), //
+            new Point(-37.9564, -22.7202, 37.6793), //
+            new Point(-34.4876, -28.9493, 34.2106), //
+            new Point(-31.0188, -33.1798, 30.7418), //
+            new Point(-29.4421, -35.6115, 29.165), //
+            new Point(-49.5653, -22.7202, 20.3343), //
+            new Point(-45.0583, -28.9493, 18.4167), //
+            new Point(-40.5513, -33.1798, 16.4991), //
+            new Point(-38.5027, -35.6115, 15.6274), //
+            new Point(-53.7991, -22.7202, -1.10804), //
+            new Point(-48.9135, -28.9493, -1.10804), //
+            new Point(-44.0279, -33.1798, -1.10804), //
+            new Point(-41.8071, -35.6115, -1.10804), //
+            new Point(-49.5653, -22.7202, -22.5504), //
+            new Point(-45.0583, -28.9493, -20.6327), //
+            new Point(-40.5513, -33.1798, -18.7151), //
+            new Point(-38.5027, -35.6115, -17.8435), //
+            new Point(-37.9564, -22.7202, -39.8954), //
+            new Point(-34.4876, -28.9493, -36.4266), //
+            new Point(-31.0188, -33.1798, -32.9578), //
+            new Point(-29.4421, -35.6115, -31.3811), //
+            new Point(-20.6113, -22.7202, -51.5043), //
+            new Point(-18.6937, -28.9493, -46.9973), //
+            new Point(-16.7761, -33.1798, -42.4903), //
+            new Point(-15.9044, -35.6115, -40.4417), //
+            new Point(0.831025, -22.7202, -55.7382), //
+            new Point(0.831025, -28.9493, -50.8525), //
+            new Point(0.831025, -33.1798, -45.9669), //
+            new Point(0.831025, -35.6115, -43.7462), //
+            new Point(22.2733, -22.7202, -51.5043), //
+            new Point(20.3557, -28.9493, -46.9973), //
+            new Point(18.4381, -33.1798, -42.4903), //
+            new Point(17.5665, -35.6115, -40.4417), //
+            new Point(39.6184, -22.7202, -39.8954), //
+            new Point(36.1496, -28.9493, -36.4266), //
+            new Point(32.6808, -33.1798, -32.9578), //
+            new Point(31.1041, -35.6115, -31.3811), //
+            new Point(51.2273, -22.7202, -22.5504), //
+            new Point(46.7203, -28.9493, -20.6327), //
+            new Point(42.2133, -33.1798, -18.7151), //
+            new Point(40.1647, -35.6115, -17.8435), //
+            new Point(42.5031, -37.1772, -1.10804), //
+            new Point(37.3399, -38.5429, -1.10804), //
+            new Point(24.5818, -39.5089, -1.10804), //
+            new Point(0.831025, -39.8754, -1.10804), //
+            new Point(39.2736, -37.1772, 15.2483), //
+            new Point(34.5105, -38.5429, 13.2217), //
+            new Point(22.7411, -39.5089, 8.21414), //
+            new Point(30.4182, -37.1772, 28.4792), //
+            new Point(26.7523, -38.5429, 24.8133), //
+            new Point(17.6941, -39.5089, 15.755), //
+            new Point(17.1873, -37.1772, 37.3345), //
+            new Point(15.1608, -38.5429, 32.5714), //
+            new Point(10.1532, -39.5089, 20.8021), //
+            new Point(0.831025, -37.1772, 40.5641), //
+            new Point(0.831025, -38.5429, 35.4009), //
+            new Point(0.831025, -39.5089, 22.6427), //
+            new Point(-15.5253, -37.1772, 37.3345), //
+            new Point(-13.4987, -38.5429, 32.5714), //
+            new Point(-8.49115, -39.5089, 20.8021), //
+            new Point(-28.7562, -37.1772, 28.4792), //
+            new Point(-25.0903, -38.5429, 24.8133), //
+            new Point(-16.032, -39.5089, 15.755), //
+            new Point(-37.6115, -37.1772, 15.2483), //
+            new Point(-32.8484, -38.5429, 13.2217), //
+            new Point(-21.0791, -39.5089, 8.21414), //
+            new Point(-40.8411, -37.1772, -1.10804), //
+            new Point(-35.6779, -38.5429, -1.10804), //
+            new Point(-22.9198, -39.5089, -1.10804), //
+            new Point(-37.6115, -37.1772, -17.4643), //
+            new Point(-32.8484, -38.5429, -15.4378), //
+            new Point(-21.0791, -39.5089, -10.4302), //
+            new Point(-28.7562, -37.1772, -30.6952), //
+            new Point(-25.0903, -38.5429, -27.0294), //
+            new Point(-16.032, -39.5089, -17.9711), //
+            new Point(-15.5253, -37.1772, -39.5506), //
+            new Point(-13.4987, -38.5429, -34.7875), //
+            new Point(-8.49115, -39.5089, -23.0181), //
+            new Point(0.831025, -37.1772, -42.7802), //
+            new Point(0.831025, -38.5429, -37.6169), //
+            new Point(0.831025, -39.5089, -24.8588), //
+            new Point(17.1873, -37.1772, -39.5506), //
+            new Point(15.1608, -38.5429, -34.7875), //
+            new Point(10.1532, -39.5089, -23.0181), //
+            new Point(30.4182, -37.1772, -30.6952), //
+            new Point(26.7523, -38.5429, -27.0294), //
+            new Point(17.6941, -39.5089, -17.9711), //
+            new Point(39.2736, -37.1772, -17.4643), //
+            new Point(34.5105, -38.5429, -15.4378), //
+            new Point(22.7411, -39.5089, -10.4302), //
+            new Point(-44.6497, 17.6861, -1.10804), //
+            new Point(-57.9297, 17.5862, -1.10804), //
+            new Point(-67.7453, 16.8867, -1.10804), //
+            new Point(-73.8301, 14.9879, -1.10804), //
+            new Point(-75.9176, 11.2904, -1.10804), //
+            new Point(-44.2055, 18.6855, 3.68876), //
+            new Point(-58.3252, 18.5699, 3.68876), //
+            new Point(-68.6891, 17.7611, 3.68876), //
+            new Point(-75.0724, 15.5657, 3.68876), //
+            new Point(-77.2501, 11.2904, 3.68876), //
+            new Point(-43.2284, 20.884, 5.28769), //
+            new Point(-59.1955, 20.7341, 5.28769), //
+            new Point(-70.7655, 19.6848, 5.28769), //
+            new Point(-77.8053, 16.8367, 5.28769), //
+            new Point(-80.1814, 11.2904, 5.28769), //
+            new Point(-42.2513, 23.0825, 3.68876), //
+            new Point(-60.0657, 22.8983, 3.68876), //
+            new Point(-72.8419, 21.6085, 3.68876), //
+            new Point(-80.5381, 18.1077, 3.68876), //
+            new Point(-83.1128, 11.2904, 3.68876), //
+            new Point(-41.8071, 24.0819, -1.10804), //
+            new Point(-60.4613, 23.882, -1.10804), //
+            new Point(-73.7857, 22.4829, -1.10804), //
+            new Point(-81.7804, 18.6855, -1.10804), //
+            new Point(-84.4453, 11.2904, -1.10804), //
+            new Point(-42.2513, 23.0825, -5.90483), //
+            new Point(-60.0657, 22.8983, -5.90483), //
+            new Point(-72.8419, 21.6085, -5.90483), //
+            new Point(-80.5381, 18.1077, -5.90483), //
+            new Point(-83.1128, 11.2904, -5.90483), //
+            new Point(-43.2284, 20.884, -7.50376), //
+            new Point(-59.1955, 20.7341, -7.50376), //
+            new Point(-70.7655, 19.6848, -7.50376), //
+            new Point(-77.8053, 16.8367, -7.50376), //
+            new Point(-80.1814, 11.2904, -7.50376), //
+            new Point(-44.2055, 18.6855, -5.90483), //
+            new Point(-58.3252, 18.5699, -5.90483), //
+            new Point(-68.6891, 17.7611, -5.90483), //
+            new Point(-75.0724, 15.5657, -5.90483), //
+            new Point(-77.2501, 11.2904, -5.90483), //
+            new Point(-74.8073, 5.4943, -1.10804), //
+            new Point(-71.2985, -1.50103, -1.10804), //
+            new Point(-65.1248, -8.49634, -1.10804), //
+            new Point(-56.0198, -14.2925, -1.10804), //
+            new Point(-76.0183, 4.93477, 3.68876), //
+            new Point(-72.159, -2.35462, 3.68876), //
+            new Point(-65.4267, -9.55033, 3.68876), //
+            new Point(-55.5757, -15.6249, 3.68876), //
+            new Point(-78.6824, 3.70383, 5.28769), //
+            new Point(-74.0522, -4.23253, 5.28769), //
+            new Point(-66.0909, -11.8691, 5.28769), //
+            new Point(-54.5986, -18.5563, 5.28769), //
+            new Point(-81.3466, 2.47288, 3.68876), //
+            new Point(-75.9454, -6.11044, 3.68876), //
+            new Point(-66.755, -14.1878, 3.68876), //
+            new Point(-53.6214, -21.4877, 3.68876), //
+            new Point(-82.5576, 1.91336, -1.10804), //
+            new Point(-76.8059, -6.96404, -1.10804), //
+            new Point(-67.0569, -15.2418, -1.10804), //
+            new Point(-53.1773, -22.8201, -1.10804), //
+            new Point(-81.3466, 2.47288, -5.90483), //
+            new Point(-75.9454, -6.11044, -5.90483), //
+            new Point(-66.755, -14.1878, -5.90483), //
+            new Point(-53.6214, -21.4877, -5.90483), //
+            new Point(-78.6824, 3.70383, -7.50376), //
+            new Point(-74.0522, -4.23253, -7.50376), //
+            new Point(-66.0909, -11.8691, -7.50376), //
+            new Point(-54.5986, -18.5563, -7.50376), //
+            new Point(-76.0183, 4.93477, -5.90483), //
+            new Point(-72.159, -2.35462, -5.90483), //
+            new Point(-65.4267, -9.55033, -5.90483), //
+            new Point(-55.5757, -15.6249, -5.90483), //
+            new Point(49.1543, 0.630882, -1.10804), //
+            new Point(62.7896, 3.76212, -1.10804), //
+            new Point(68.6967, 11.2904, -1.10804), //
+            new Point(71.939, 20.4176, -1.10804), //
+            new Point(77.5797, 28.3457, -1.10804), //
+            new Point(49.1543, -3.03333, 9.4449), //
+            new Point(63.8305, 1.04519, 8.42059), //
+            new Point(70.0292, 9.70814, 6.1671), //
+            new Point(73.5629, 19.8451, 3.91361), //
+            new Point(80.2446, 28.3457, 2.88929), //
+            new Point(49.1543, -11.0946, 12.9626), //
+            new Point(66.1207, -4.93206, 11.5968), //
+            new Point(72.9605, 6.22714, 8.59214), //
+            new Point(77.1355, 18.5855, 5.58749), //
+            new Point(86.1073, 28.3457, 4.22173), //
+            new Point(49.1543, -19.1559, 9.4449), //
+            new Point(68.4108, -10.9093, 8.42059), //
+            new Point(75.8919, 2.74614, 6.1671), //
+            new Point(80.7081, 17.326, 3.91361), //
+            new Point(91.97, 28.3457, 2.88929), //
+            new Point(49.1543, -22.8201, -1.10804), //
+            new Point(69.4518, -13.6262, -1.10804), //
+            new Point(77.2244, 1.16386, -1.10804), //
+            new Point(82.3321, 16.7534, -1.10804), //
+            new Point(94.6349, 28.3457, -1.10804), //
+            new Point(49.1543, -19.1559, -11.661), //
+            new Point(68.4108, -10.9093, -10.6367), //
+            new Point(75.8919, 2.74614, -8.38317), //
+            new Point(80.7081, 17.326, -6.12968), //
+            new Point(91.97, 28.3457, -5.10536), //
+            new Point(49.1543, -11.0946, -15.1786), //
+            new Point(66.1207, -4.93206, -13.8129), //
+            new Point(72.9605, 6.22714, -10.8082), //
+            new Point(77.1355, 18.5855, -7.80356), //
+            new Point(86.1073, 28.3457, -6.4378), //
+            new Point(49.1543, -3.03333, -11.661), //
+            new Point(63.8305, 1.04519, -10.6367), //
+            new Point(70.0292, 9.70814, -8.38317), //
+            new Point(73.5629, 19.8451, -6.12968), //
+            new Point(80.2446, 28.3457, -5.10536), //
+            new Point(79.6227, 29.5449, -1.10804), //
+            new Point(81.1329, 29.9446, -1.10804), //
+            new Point(81.577, 29.5449, -1.10804), //
+            new Point(80.4222, 28.3457, -1.10804), //
+            new Point(82.4767, 29.6034, 2.63946), //
+            new Point(83.8116, 30.0383, 2.08983), //
+            new Point(83.8515, 29.6268, 1.54019), //
+            new Point(82.1988, 28.3457, 1.29036), //
+            new Point(88.7555, 29.7322, 3.88862), //
+            new Point(89.7049, 30.2444, 3.15578), //
+            new Point(88.8555, 29.8072, 2.42294), //
+            new Point(86.1073, 28.3457, 2.08983), //
+            new Point(95.0343, 29.8611, 2.63946), //
+            new Point(95.5982, 30.4505, 2.08983), //
+            new Point(93.8594, 29.9875, 1.54019), //
+            new Point(90.0158, 28.3457, 1.29036), //
+            new Point(97.8883, 29.9196, -1.10804), //
+            new Point(98.2769, 30.5442, -1.10804), //
+            new Point(96.1339, 30.0695, -1.10804), //
+            new Point(91.7924, 28.3457, -1.10804), //
+            new Point(95.0343, 29.8611, -4.85553), //
+            new Point(95.5982, 30.4505, -4.3059), //
+            new Point(93.8594, 29.9875, -3.75626), //
+            new Point(90.0158, 28.3457, -3.50643), //
+            new Point(88.7555, 29.7322, -6.10469), //
+            new Point(89.7049, 30.2444, -5.37185), //
+            new Point(88.8555, 29.8072, -4.63901), //
+            new Point(86.1073, 28.3457, -4.3059), //
+            new Point(82.4767, 29.6034, -4.85553), //
+            new Point(83.8116, 30.0383, -4.3059), //
+            new Point(83.8515, 29.6268, -3.75626), //
+            new Point(82.1988, 28.3457, -3.50643), //
+            new Point(0.831025, 49.6647, -1.10804), //
+            new Point(10.5134, 48.2657, -1.10804), //
+            new Point(10.0693, 44.868, -1.10804), //
+            new Point(6.42728, 40.6708, -1.10804), //
+            new Point(6.51611, 36.8733, -1.10804), //
+            new Point(9.76642, 48.2657, 2.70243), //
+            new Point(9.35632, 44.868, 2.52698), //
+            new Point(5.9947, 40.6708, 1.09187), //
+            new Point(6.07552, 36.8733, 1.12336), //
+            new Point(7.71453, 48.2657, 5.77547), //
+            new Point(7.39819, 44.868, 5.45913), //
+            new Point(4.80736, 40.6708, 2.8683), //
+            new Point(4.86744, 36.8733, 2.92838), //
+            new Point(4.64149, 48.2657, 7.82736), //
+            new Point(4.46604, 44.868, 7.41726), //
+            new Point(3.03093, 40.6708, 4.05564), //
+            new Point(3.06242, 36.8733, 4.13646), //
+            new Point(0.831025, 48.2657, 8.57438), //
+            new Point(0.831025, 44.868, 8.13023), //
+            new Point(0.831025, 40.6708, 4.48822), //
+            new Point(0.831025, 36.8733, 4.57705), //
+            new Point(-2.97944, 48.2657, 7.82736), //
+            new Point(-2.80399, 44.868, 7.41726), //
+            new Point(-1.36888, 40.6708, 4.05564), //
+            new Point(-1.40037, 36.8733, 4.13646), //
+            new Point(-6.05248, 48.2657, 5.77547), //
+            new Point(-5.73614, 44.868, 5.45913), //
+            new Point(-3.14531, 40.6708, 2.8683), //
+            new Point(-3.20539, 36.8733, 2.92838), //
+            new Point(-8.10437, 48.2657, 2.70243), //
+            new Point(-7.69427, 44.868, 2.52698), //
+            new Point(-4.33265, 40.6708, 1.09187), //
+            new Point(-4.41347, 36.8733, 1.12336), //
+            new Point(-8.85139, 48.2657, -1.10804), //
+            new Point(-8.40724, 44.868, -1.10804), //
+            new Point(-4.76523, 40.6708, -1.10804), //
+            new Point(-4.85406, 36.8733, -1.10804), //
+            new Point(-8.10437, 48.2657, -4.9185), //
+            new Point(-7.69427, 44.868, -4.74305), //
+            new Point(-4.33265, 40.6708, -3.30794), //
+            new Point(-4.41347, 36.8733, -3.33943), //
+            new Point(-6.05248, 48.2657, -7.99154), //
+            new Point(-5.73614, 44.868, -7.6752), //
+            new Point(-3.14531, 40.6708, -5.08437), //
+            new Point(-3.20539, 36.8733, -5.14445), //
+            new Point(-2.97944, 48.2657, -10.0434), //
+            new Point(-2.80399, 44.868, -9.63333), //
+            new Point(-1.36888, 40.6708, -6.27171), //
+            new Point(-1.40037, 36.8733, -6.35253), //
+            new Point(0.831025, 48.2657, -10.7904), //
+            new Point(0.831025, 44.868, -10.3463), //
+            new Point(0.831025, 40.6708, -6.70429), //
+            new Point(0.831025, 36.8733, -6.79312), //
+            new Point(4.64149, 48.2657, -10.0434), //
+            new Point(4.46604, 44.868, -9.63333), //
+            new Point(3.03093, 40.6708, -6.27171), //
+            new Point(3.06242, 36.8733, -6.35253), //
+            new Point(7.71453, 48.2657, -7.99154), //
+            new Point(7.39819, 44.868, -7.6752), //
+            new Point(4.80736, 40.6708, -5.08437), //
+            new Point(4.86744, 36.8733, -5.14445), //
+            new Point(9.76642, 48.2657, -4.9185), //
+            new Point(9.35632, 44.868, -4.74305), //
+            new Point(5.9947, 40.6708, -3.30794), //
+            new Point(6.07552, 36.8733, -3.33943), //
+            new Point(13.8001, 34.3417, -1.10804), //
+            new Point(24.282, 32.6095, -1.10804), //
+            new Point(33.6979, 30.8773, -1.10804), //
+            new Point(37.7841, 28.3457, -1.10804), //
+            new Point(12.795, 34.3417, 3.98234), //
+            new Point(22.4646, 32.6095, 8.09647), //
+            new Point(31.1507, 30.8773, 11.7922), //
+            new Point(34.9202, 28.3457, 13.396), //
+            new Point(10.0391, 34.3417, 8.10003), //
+            new Point(17.4812, 32.6095, 15.5422), //
+            new Point(24.1665, 30.8773, 22.2275), //
+            new Point(27.0677, 28.3457, 25.1286), //
+            new Point(5.9214, 34.3417, 10.856), //
+            new Point(10.0355, 32.6095, 20.5255), //
+            new Point(13.7313, 30.8773, 29.2117), //
+            new Point(15.3351, 28.3457, 32.9812), //
+            new Point(0.831025, 34.3417, 11.8611), //
+            new Point(0.831025, 32.6095, 22.3429), //
+            new Point(0.831025, 30.8773, 31.7589), //
+            new Point(0.831025, 28.3457, 35.845), //
+            new Point(-4.25935, 34.3417, 10.856), //
+            new Point(-8.37348, 32.6095, 20.5255), //
+            new Point(-12.0692, 30.8773, 29.2117), //
+            new Point(-13.673, 28.3457, 32.9812), //
+            new Point(-8.37704, 34.3417, 8.10003), //
+            new Point(-15.8192, 32.6095, 15.5422), //
+            new Point(-22.5045, 30.8773, 22.2275), //
+            new Point(-25.4056, 28.3457, 25.1286), //
+            new Point(-11.133, 34.3417, 3.98234), //
+            new Point(-20.8025, 32.6095, 8.09647), //
+            new Point(-29.4887, 30.8773, 11.7922), //
+            new Point(-33.2582, 28.3457, 13.396), //
+            new Point(-12.1381, 34.3417, -1.10804), //
+            new Point(-22.62, 32.6095, -1.10804), //
+            new Point(-32.0359, 30.8773, -1.10804), //
+            new Point(-36.122, 28.3457, -1.10804), //
+            new Point(-11.133, 34.3417, -6.19841), //
+            new Point(-20.8025, 32.6095, -10.3125), //
+            new Point(-29.4887, 30.8773, -14.0083), //
+            new Point(-33.2582, 28.3457, -15.6121), //
+            new Point(-8.37704, 34.3417, -10.3161), //
+            new Point(-15.8192, 32.6095, -17.7582), //
+            new Point(-22.5045, 30.8773, -24.4435), //
+            new Point(-25.4056, 28.3457, -27.3447), //
+            new Point(-4.25935, 34.3417, -13.072), //
+            new Point(-8.37348, 32.6095, -22.7416), //
+            new Point(-12.0692, 30.8773, -31.4277), //
+            new Point(-13.673, 28.3457, -35.1972), //
+            new Point(0.831025, 34.3417, -14.0771), //
+            new Point(0.831025, 32.6095, -24.559), //
+            new Point(0.831025, 30.8773, -33.9749), //
+            new Point(0.831025, 28.3457, -38.0611), //
+            new Point(5.9214, 34.3417, -13.072), //
+            new Point(10.0355, 32.6095, -22.7416), //
+            new Point(13.7313, 30.8773, -31.4277), //
+            new Point(15.3351, 28.3457, -35.1972), //
+            new Point(10.0391, 34.3417, -10.3161), //
+            new Point(17.4812, 32.6095, -17.7582), //
+            new Point(24.1665, 30.8773, -24.4435), //
+            new Point(27.0677, 28.3457, -27.3447), //
+            new Point(12.795, 34.3417, -6.19841), //
+            new Point(22.4646, 32.6095, -10.3125), //
+            new Point(31.1507, 30.8773, -14.0083), //
+            new Point(34.8094, 17.1865, -35.0864) //
+    };
+
+    public TeapotTest() throws IllegalAccessException {
+    }
+
+    /**
+     * Produce a scene with a 3D model and render it into a png image
+     */
+    @Test
+    public void teapot() throws IllegalAccessException {
+        scene.geometries.add( //
+                new Triangle(pnts[7], pnts[6], pnts[1]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[1], pnts[2], pnts[7]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[8], pnts[7], pnts[2]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[2], pnts[3], pnts[8]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[9], pnts[8], pnts[3]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[3], pnts[4], pnts[9]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[10], pnts[9], pnts[4]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[4], pnts[5], pnts[10]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[12], pnts[11], pnts[6]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[6], pnts[7], pnts[12]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[13], pnts[12], pnts[7]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[7], pnts[8], pnts[13]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[14], pnts[13], pnts[8]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[8], pnts[9], pnts[14]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[15], pnts[14], pnts[9]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[9], pnts[10], pnts[15]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[17], pnts[16], pnts[11]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[11], pnts[12], pnts[17]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[18], pnts[17], pnts[12]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[12], pnts[13], pnts[18]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[19], pnts[18], pnts[13]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[13], pnts[14], pnts[19]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[20], pnts[19], pnts[14]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[14], pnts[15], pnts[20]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[22], pnts[21], pnts[16]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[16], pnts[17], pnts[22]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[23], pnts[22], pnts[17]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[17], pnts[18], pnts[23]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[24], pnts[23], pnts[18]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[18], pnts[19], pnts[24]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[25], pnts[24], pnts[19]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[19], pnts[20], pnts[25]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[27], pnts[26], pnts[21]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[21], pnts[22], pnts[27]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[28], pnts[27], pnts[22]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[22], pnts[23], pnts[28]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[29], pnts[28], pnts[23]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[23], pnts[24], pnts[29]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[30], pnts[29], pnts[24]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[24], pnts[25], pnts[30]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[32], pnts[31], pnts[26]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[26], pnts[27], pnts[32]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[33], pnts[32], pnts[27]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[27], pnts[28], pnts[33]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[34], pnts[33], pnts[28]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[28], pnts[29], pnts[34]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[35], pnts[34], pnts[29]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[29], pnts[30], pnts[35]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[37], pnts[36], pnts[31]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[31], pnts[32], pnts[37]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[38], pnts[37], pnts[32]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[32], pnts[33], pnts[38]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[39], pnts[38], pnts[33]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[33], pnts[34], pnts[39]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[40], pnts[39], pnts[34]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[34], pnts[35], pnts[40]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[42], pnts[41], pnts[36]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[36], pnts[37], pnts[42]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[43], pnts[42], pnts[37]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[37], pnts[38], pnts[43]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[44], pnts[43], pnts[38]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[38], pnts[39], pnts[44]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[45], pnts[44], pnts[39]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[39], pnts[40], pnts[45]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[47], pnts[46], pnts[41]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[41], pnts[42], pnts[47]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[48], pnts[47], pnts[42]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[42], pnts[43], pnts[48]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[49], pnts[48], pnts[43]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[43], pnts[44], pnts[49]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[50], pnts[49], pnts[44]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[44], pnts[45], pnts[50]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[52], pnts[51], pnts[46]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[46], pnts[47], pnts[52]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[53], pnts[52], pnts[47]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[47], pnts[48], pnts[53]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[54], pnts[53], pnts[48]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[48], pnts[49], pnts[54]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[55], pnts[54], pnts[49]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[49], pnts[50], pnts[55]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[57], pnts[56], pnts[51]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[51], pnts[52], pnts[57]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[58], pnts[57], pnts[52]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[52], pnts[53], pnts[58]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[59], pnts[58], pnts[53]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[53], pnts[54], pnts[59]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[60], pnts[59], pnts[54]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[54], pnts[55], pnts[60]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[62], pnts[61], pnts[56]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[56], pnts[57], pnts[62]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[63], pnts[62], pnts[57]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[57], pnts[58], pnts[63]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[64], pnts[63], pnts[58]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[58], pnts[59], pnts[64]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[65], pnts[64], pnts[59]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[59], pnts[60], pnts[65]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[67], pnts[66], pnts[61]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[61], pnts[62], pnts[67]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[68], pnts[67], pnts[62]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[62], pnts[63], pnts[68]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[69], pnts[68], pnts[63]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[63], pnts[64], pnts[69]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[70], pnts[69], pnts[64]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[64], pnts[65], pnts[70]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[72], pnts[71], pnts[66]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[66], pnts[67], pnts[72]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[73], pnts[72], pnts[67]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[67], pnts[68], pnts[73]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[74], pnts[73], pnts[68]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[68], pnts[69], pnts[74]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[75], pnts[74], pnts[69]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[69], pnts[70], pnts[75]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[77], pnts[76], pnts[71]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[71], pnts[72], pnts[77]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[78], pnts[77], pnts[72]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[72], pnts[73], pnts[78]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[79], pnts[78], pnts[73]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[73], pnts[74], pnts[79]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[80], pnts[79], pnts[74]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[74], pnts[75], pnts[80]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[2], pnts[1], pnts[76]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[76], pnts[77], pnts[2]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[3], pnts[2], pnts[77]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[77], pnts[78], pnts[3]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[4], pnts[3], pnts[78]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[78], pnts[79], pnts[4]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[5], pnts[4], pnts[79]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[79], pnts[80], pnts[5]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[85], pnts[10], pnts[5]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[5], pnts[81], pnts[85]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[86], pnts[85], pnts[81]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[81], pnts[82], pnts[86]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[87], pnts[86], pnts[82]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[82], pnts[83], pnts[87]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[88], pnts[87], pnts[83]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[83], pnts[84], pnts[88]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[89], pnts[15], pnts[10]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[10], pnts[85], pnts[89]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[90], pnts[89], pnts[85]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[85], pnts[86], pnts[90]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[91], pnts[90], pnts[86]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[86], pnts[87], pnts[91]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[92], pnts[91], pnts[87]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[87], pnts[88], pnts[92]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[93], pnts[20], pnts[15]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[15], pnts[89], pnts[93]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[94], pnts[93], pnts[89]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[89], pnts[90], pnts[94]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[95], pnts[94], pnts[90]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[90], pnts[91], pnts[95]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[96], pnts[95], pnts[91]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[91], pnts[92], pnts[96]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[97], pnts[25], pnts[20]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[20], pnts[93], pnts[97]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[98], pnts[97], pnts[93]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[93], pnts[94], pnts[98]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[99], pnts[98], pnts[94]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[94], pnts[95], pnts[99]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[100], pnts[99], pnts[95]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[95], pnts[96], pnts[100]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[101], pnts[30], pnts[25]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[25], pnts[97], pnts[101]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[102], pnts[101], pnts[97]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[97], pnts[98], pnts[102]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[103], pnts[102], pnts[98]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[98], pnts[99], pnts[103]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[104], pnts[103], pnts[99]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[99], pnts[100], pnts[104]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[105], pnts[35], pnts[30]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[30], pnts[101], pnts[105]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[106], pnts[105], pnts[101]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[101], pnts[102], pnts[106]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[107], pnts[106], pnts[102]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[102], pnts[103], pnts[107]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[108], pnts[107], pnts[103]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[103], pnts[104], pnts[108]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[109], pnts[40], pnts[35]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[35], pnts[105], pnts[109]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[110], pnts[109], pnts[105]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[105], pnts[106], pnts[110]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[111], pnts[110], pnts[106]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[106], pnts[107], pnts[111]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[112], pnts[111], pnts[107]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[107], pnts[108], pnts[112]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[113], pnts[45], pnts[40]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[40], pnts[109], pnts[113]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[114], pnts[113], pnts[109]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[109], pnts[110], pnts[114]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[115], pnts[114], pnts[110]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[110], pnts[111], pnts[115]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[116], pnts[115], pnts[111]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[111], pnts[112], pnts[116]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[117], pnts[50], pnts[45]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[45], pnts[113], pnts[117]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[118], pnts[117], pnts[113]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[113], pnts[114], pnts[118]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[119], pnts[118], pnts[114]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[114], pnts[115], pnts[119]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[120], pnts[119], pnts[115]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[115], pnts[116], pnts[120]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[121], pnts[55], pnts[50]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[50], pnts[117], pnts[121]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[122], pnts[121], pnts[117]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[117], pnts[118], pnts[122]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[123], pnts[122], pnts[118]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[118], pnts[119], pnts[123]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[124], pnts[123], pnts[119]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[119], pnts[120], pnts[124]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[125], pnts[60], pnts[55]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[55], pnts[121], pnts[125]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[126], pnts[125], pnts[121]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[121], pnts[122], pnts[126]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[127], pnts[126], pnts[122]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[122], pnts[123], pnts[127]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[128], pnts[127], pnts[123]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[123], pnts[124], pnts[128]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[129], pnts[65], pnts[60]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[60], pnts[125], pnts[129]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[130], pnts[129], pnts[125]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[125], pnts[126], pnts[130]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[131], pnts[130], pnts[126]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[126], pnts[127], pnts[131]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[132], pnts[131], pnts[127]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[127], pnts[128], pnts[132]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[133], pnts[70], pnts[65]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[65], pnts[129], pnts[133]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[134], pnts[133], pnts[129]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[129], pnts[130], pnts[134]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[135], pnts[134], pnts[130]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[130], pnts[131], pnts[135]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[136], pnts[135], pnts[131]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[131], pnts[132], pnts[136]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[137], pnts[75], pnts[70]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[70], pnts[133], pnts[137]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[138], pnts[137], pnts[133]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[133], pnts[134], pnts[138]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[139], pnts[138], pnts[134]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[134], pnts[135], pnts[139]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[140], pnts[139], pnts[135]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[135], pnts[136], pnts[140]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[141], pnts[80], pnts[75]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[75], pnts[137], pnts[141]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[142], pnts[141], pnts[137]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[137], pnts[138], pnts[142]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[143], pnts[142], pnts[138]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[138], pnts[139], pnts[143]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[144], pnts[143], pnts[139]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[139], pnts[140], pnts[144]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[81], pnts[5], pnts[80]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[80], pnts[141], pnts[81]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[82], pnts[81], pnts[141]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[141], pnts[142], pnts[82]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[83], pnts[82], pnts[142]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[142], pnts[143], pnts[83]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[84], pnts[83], pnts[143]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[143], pnts[144], pnts[84]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[149], pnts[88], pnts[84]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[84], pnts[145], pnts[149]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[150], pnts[149], pnts[145]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[145], pnts[146], pnts[150]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[151], pnts[150], pnts[146]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[146], pnts[147], pnts[151]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[152], pnts[151], pnts[147]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[147], pnts[148], pnts[152]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[153], pnts[92], pnts[88]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[88], pnts[149], pnts[153]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[154], pnts[153], pnts[149]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[149], pnts[150], pnts[154]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[155], pnts[154], pnts[150]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[150], pnts[151], pnts[155]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[156], pnts[155], pnts[151]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[151], pnts[152], pnts[156]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[157], pnts[96], pnts[92]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[92], pnts[153], pnts[157]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[158], pnts[157], pnts[153]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[153], pnts[154], pnts[158]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[159], pnts[158], pnts[154]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[154], pnts[155], pnts[159]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[160], pnts[159], pnts[155]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[155], pnts[156], pnts[160]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[161], pnts[100], pnts[96]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[96], pnts[157], pnts[161]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[162], pnts[161], pnts[157]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[157], pnts[158], pnts[162]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[163], pnts[162], pnts[158]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[158], pnts[159], pnts[163]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[164], pnts[163], pnts[159]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[159], pnts[160], pnts[164]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[165], pnts[104], pnts[100]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[100], pnts[161], pnts[165]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[166], pnts[165], pnts[161]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[161], pnts[162], pnts[166]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[167], pnts[166], pnts[162]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[162], pnts[163], pnts[167]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[168], pnts[167], pnts[163]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[163], pnts[164], pnts[168]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[169], pnts[108], pnts[104]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[104], pnts[165], pnts[169]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[170], pnts[169], pnts[165]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[165], pnts[166], pnts[170]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[171], pnts[170], pnts[166]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[166], pnts[167], pnts[171]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[172], pnts[171], pnts[167]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[167], pnts[168], pnts[172]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[173], pnts[112], pnts[108]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[108], pnts[169], pnts[173]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[174], pnts[173], pnts[169]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[169], pnts[170], pnts[174]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[175], pnts[174], pnts[170]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[170], pnts[171], pnts[175]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[176], pnts[175], pnts[171]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[171], pnts[172], pnts[176]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[177], pnts[116], pnts[112]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[112], pnts[173], pnts[177]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[178], pnts[177], pnts[173]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[173], pnts[174], pnts[178]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[179], pnts[178], pnts[174]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[174], pnts[175], pnts[179]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[180], pnts[179], pnts[175]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[175], pnts[176], pnts[180]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[181], pnts[120], pnts[116]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[116], pnts[177], pnts[181]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[182], pnts[181], pnts[177]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[177], pnts[178], pnts[182]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[183], pnts[182], pnts[178]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[178], pnts[179], pnts[183]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[184], pnts[183], pnts[179]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[179], pnts[180], pnts[184]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[185], pnts[124], pnts[120]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[120], pnts[181], pnts[185]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[186], pnts[185], pnts[181]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[181], pnts[182], pnts[186]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[187], pnts[186], pnts[182]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[182], pnts[183], pnts[187]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[188], pnts[187], pnts[183]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[183], pnts[184], pnts[188]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[189], pnts[128], pnts[124]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[124], pnts[185], pnts[189]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[190], pnts[189], pnts[185]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[185], pnts[186], pnts[190]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[191], pnts[190], pnts[186]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[186], pnts[187], pnts[191]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[192], pnts[191], pnts[187]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[187], pnts[188], pnts[192]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[193], pnts[132], pnts[128]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[128], pnts[189], pnts[193]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[194], pnts[193], pnts[189]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[189], pnts[190], pnts[194]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[195], pnts[194], pnts[190]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[190], pnts[191], pnts[195]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[196], pnts[195], pnts[191]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[191], pnts[192], pnts[196]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[197], pnts[136], pnts[132]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[132], pnts[193], pnts[197]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[198], pnts[197], pnts[193]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[193], pnts[194], pnts[198]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[199], pnts[198], pnts[194]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[194], pnts[195], pnts[199]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[200], pnts[199], pnts[195]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[195], pnts[196], pnts[200]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[201], pnts[140], pnts[136]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[136], pnts[197], pnts[201]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[202], pnts[201], pnts[197]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[197], pnts[198], pnts[202]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[203], pnts[202], pnts[198]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[198], pnts[199], pnts[203]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[204], pnts[203], pnts[199]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[199], pnts[200], pnts[204]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[205], pnts[144], pnts[140]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[140], pnts[201], pnts[205]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[206], pnts[205], pnts[201]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[201], pnts[202], pnts[206]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[207], pnts[206], pnts[202]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[202], pnts[203], pnts[207]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[208], pnts[207], pnts[203]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[203], pnts[204], pnts[208]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[145], pnts[84], pnts[144]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[144], pnts[205], pnts[145]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[146], pnts[145], pnts[205]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[205], pnts[206], pnts[146]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[147], pnts[146], pnts[206]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[206], pnts[207], pnts[147]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[148], pnts[147], pnts[207]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[207], pnts[208], pnts[148]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[213], pnts[152], pnts[148]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[148], pnts[209], pnts[213]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[214], pnts[213], pnts[209]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[209], pnts[210], pnts[214]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[215], pnts[214], pnts[210]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[210], pnts[211], pnts[215]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[215], pnts[211]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[216], pnts[156], pnts[152]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[152], pnts[213], pnts[216]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[217], pnts[216], pnts[213]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[213], pnts[214], pnts[217]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[218], pnts[217], pnts[214]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[214], pnts[215], pnts[218]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[218], pnts[215]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[219], pnts[160], pnts[156]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[156], pnts[216], pnts[219]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[220], pnts[219], pnts[216]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[216], pnts[217], pnts[220]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[221], pnts[220], pnts[217]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[217], pnts[218], pnts[221]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[221], pnts[218]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[222], pnts[164], pnts[160]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[160], pnts[219], pnts[222]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[223], pnts[222], pnts[219]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[219], pnts[220], pnts[223]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[224], pnts[223], pnts[220]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[220], pnts[221], pnts[224]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[224], pnts[221]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[225], pnts[168], pnts[164]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[164], pnts[222], pnts[225]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[226], pnts[225], pnts[222]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[222], pnts[223], pnts[226]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[227], pnts[226], pnts[223]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[223], pnts[224], pnts[227]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[227], pnts[224]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[228], pnts[172], pnts[168]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[168], pnts[225], pnts[228]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[229], pnts[228], pnts[225]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[225], pnts[226], pnts[229]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[230], pnts[229], pnts[226]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[226], pnts[227], pnts[230]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[230], pnts[227]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[231], pnts[176], pnts[172]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[172], pnts[228], pnts[231]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[232], pnts[231], pnts[228]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[228], pnts[229], pnts[232]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[233], pnts[232], pnts[229]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[229], pnts[230], pnts[233]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[233], pnts[230]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[234], pnts[180], pnts[176]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[176], pnts[231], pnts[234]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[235], pnts[234], pnts[231]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[231], pnts[232], pnts[235]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[236], pnts[235], pnts[232]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[232], pnts[233], pnts[236]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[236], pnts[233]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[237], pnts[184], pnts[180]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[180], pnts[234], pnts[237]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[238], pnts[237], pnts[234]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[234], pnts[235], pnts[238]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[239], pnts[238], pnts[235]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[235], pnts[236], pnts[239]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[239], pnts[236]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[240], pnts[188], pnts[184]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[184], pnts[237], pnts[240]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[241], pnts[240], pnts[237]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[237], pnts[238], pnts[241]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[242], pnts[241], pnts[238]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[238], pnts[239], pnts[242]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[242], pnts[239]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[243], pnts[192], pnts[188]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[188], pnts[240], pnts[243]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[244], pnts[243], pnts[240]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[240], pnts[241], pnts[244]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[245], pnts[244], pnts[241]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[241], pnts[242], pnts[245]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[245], pnts[242]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[246], pnts[196], pnts[192]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[192], pnts[243], pnts[246]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[247], pnts[246], pnts[243]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[243], pnts[244], pnts[247]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[248], pnts[247], pnts[244]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[244], pnts[245], pnts[248]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[248], pnts[245]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[249], pnts[200], pnts[196]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[196], pnts[246], pnts[249]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[250], pnts[249], pnts[246]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[246], pnts[247], pnts[250]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[251], pnts[250], pnts[247]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[247], pnts[248], pnts[251]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[251], pnts[248]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[252], pnts[204], pnts[200]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[200], pnts[249], pnts[252]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[253], pnts[252], pnts[249]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[249], pnts[250], pnts[253]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[254], pnts[253], pnts[250]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[250], pnts[251], pnts[254]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[254], pnts[251]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[255], pnts[208], pnts[204]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[204], pnts[252], pnts[255]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[256], pnts[255], pnts[252]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[252], pnts[253], pnts[256]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[257], pnts[256], pnts[253]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[253], pnts[254], pnts[257]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[257], pnts[254]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[209], pnts[148], pnts[208]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[208], pnts[255], pnts[209]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[210], pnts[209], pnts[255]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[255], pnts[256], pnts[210]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[211], pnts[210], pnts[256]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[256], pnts[257], pnts[211]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[212], pnts[211], pnts[257]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[264], pnts[263], pnts[258]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[258], pnts[259], pnts[264]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[265], pnts[264], pnts[259]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[259], pnts[260], pnts[265]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[266], pnts[265], pnts[260]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[260], pnts[261], pnts[266]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[267], pnts[266], pnts[261]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[261], pnts[262], pnts[267]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[269], pnts[268], pnts[263]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[263], pnts[264], pnts[269]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[270], pnts[269], pnts[264]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[264], pnts[265], pnts[270]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[271], pnts[270], pnts[265]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[265], pnts[266], pnts[271]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[272], pnts[271], pnts[266]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[266], pnts[267], pnts[272]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[274], pnts[273], pnts[268]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[268], pnts[269], pnts[274]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[275], pnts[274], pnts[269]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[269], pnts[270], pnts[275]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[276], pnts[275], pnts[270]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[270], pnts[271], pnts[276]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[277], pnts[276], pnts[271]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[271], pnts[272], pnts[277]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[279], pnts[278], pnts[273]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[273], pnts[274], pnts[279]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[280], pnts[279], pnts[274]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[274], pnts[275], pnts[280]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[281], pnts[280], pnts[275]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[275], pnts[276], pnts[281]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[282], pnts[281], pnts[276]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[276], pnts[277], pnts[282]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[284], pnts[283], pnts[278]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[278], pnts[279], pnts[284]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[285], pnts[284], pnts[279]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[279], pnts[280], pnts[285]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[286], pnts[285], pnts[280]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[280], pnts[281], pnts[286]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[287], pnts[286], pnts[281]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[281], pnts[282], pnts[287]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[289], pnts[288], pnts[283]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[283], pnts[284], pnts[289]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[290], pnts[289], pnts[284]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[284], pnts[285], pnts[290]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[291], pnts[290], pnts[285]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[285], pnts[286], pnts[291]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[292], pnts[291], pnts[286]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[286], pnts[287], pnts[292]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[294], pnts[293], pnts[288]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[288], pnts[289], pnts[294]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[295], pnts[294], pnts[289]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[289], pnts[290], pnts[295]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[296], pnts[295], pnts[290]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[290], pnts[291], pnts[296]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[297], pnts[296], pnts[291]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[291], pnts[292], pnts[297]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[259], pnts[258], pnts[293]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[293], pnts[294], pnts[259]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[260], pnts[259], pnts[294]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[294], pnts[295], pnts[260]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[261], pnts[260], pnts[295]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[295], pnts[296], pnts[261]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[262], pnts[261], pnts[296]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[296], pnts[297], pnts[262]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[302], pnts[267], pnts[262]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[262], pnts[298], pnts[302]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[303], pnts[302], pnts[298]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[298], pnts[299], pnts[303]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[304], pnts[303], pnts[299]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[299], pnts[300], pnts[304]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[305], pnts[304], pnts[300]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[300], pnts[301], pnts[305]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[306], pnts[272], pnts[267]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[267], pnts[302], pnts[306]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[307], pnts[306], pnts[302]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[302], pnts[303], pnts[307]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[308], pnts[307], pnts[303]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[303], pnts[304], pnts[308]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[309], pnts[308], pnts[304]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[304], pnts[305], pnts[309]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[310], pnts[277], pnts[272]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[272], pnts[306], pnts[310]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[311], pnts[310], pnts[306]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[306], pnts[307], pnts[311]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[312], pnts[311], pnts[307]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[307], pnts[308], pnts[312]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[313], pnts[312], pnts[308]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[308], pnts[309], pnts[313]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[314], pnts[282], pnts[277]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[277], pnts[310], pnts[314]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[315], pnts[314], pnts[310]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[310], pnts[311], pnts[315]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[316], pnts[315], pnts[311]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[311], pnts[312], pnts[316]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[317], pnts[316], pnts[312]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[312], pnts[313], pnts[317]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[318], pnts[287], pnts[282]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[282], pnts[314], pnts[318]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[319], pnts[318], pnts[314]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[314], pnts[315], pnts[319]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[320], pnts[319], pnts[315]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[315], pnts[316], pnts[320]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[321], pnts[320], pnts[316]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[316], pnts[317], pnts[321]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[322], pnts[292], pnts[287]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[287], pnts[318], pnts[322]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[323], pnts[322], pnts[318]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[318], pnts[319], pnts[323]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[324], pnts[323], pnts[319]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[319], pnts[320], pnts[324]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[325], pnts[324], pnts[320]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[320], pnts[321], pnts[325]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[326], pnts[297], pnts[292]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[292], pnts[322], pnts[326]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[327], pnts[326], pnts[322]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[322], pnts[323], pnts[327]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[328], pnts[327], pnts[323]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[323], pnts[324], pnts[328]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[329], pnts[328], pnts[324]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[324], pnts[325], pnts[329]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[298], pnts[262], pnts[297]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[297], pnts[326], pnts[298]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[299], pnts[298], pnts[326]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[326], pnts[327], pnts[299]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[300], pnts[299], pnts[327]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[327], pnts[328], pnts[300]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[301], pnts[300], pnts[328]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[328], pnts[329], pnts[301]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[336], pnts[335], pnts[330]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[330], pnts[331], pnts[336]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[337], pnts[336], pnts[331]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[331], pnts[332], pnts[337]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[338], pnts[337], pnts[332]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[332], pnts[333], pnts[338]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[339], pnts[338], pnts[333]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[333], pnts[334], pnts[339]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[341], pnts[340], pnts[335]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[335], pnts[336], pnts[341]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[342], pnts[341], pnts[336]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[336], pnts[337], pnts[342]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[343], pnts[342], pnts[337]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[337], pnts[338], pnts[343]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[344], pnts[343], pnts[338]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[338], pnts[339], pnts[344]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[346], pnts[345], pnts[340]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[340], pnts[341], pnts[346]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[347], pnts[346], pnts[341]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[341], pnts[342], pnts[347]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[348], pnts[347], pnts[342]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[342], pnts[343], pnts[348]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[349], pnts[348], pnts[343]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[343], pnts[344], pnts[349]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[351], pnts[350], pnts[345]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[345], pnts[346], pnts[351]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[352], pnts[351], pnts[346]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[346], pnts[347], pnts[352]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[353], pnts[352], pnts[347]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[347], pnts[348], pnts[353]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[354], pnts[353], pnts[348]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[348], pnts[349], pnts[354]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[356], pnts[355], pnts[350]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[350], pnts[351], pnts[356]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[357], pnts[356], pnts[351]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[351], pnts[352], pnts[357]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[358], pnts[357], pnts[352]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[352], pnts[353], pnts[358]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[359], pnts[358], pnts[353]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[353], pnts[354], pnts[359]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[361], pnts[360], pnts[355]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[355], pnts[356], pnts[361]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[362], pnts[361], pnts[356]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[356], pnts[357], pnts[362]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[363], pnts[362], pnts[357]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[357], pnts[358], pnts[363]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[364], pnts[363], pnts[358]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[358], pnts[359], pnts[364]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[366], pnts[365], pnts[360]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[360], pnts[361], pnts[366]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[367], pnts[366], pnts[361]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[361], pnts[362], pnts[367]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[368], pnts[367], pnts[362]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[362], pnts[363], pnts[368]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[369], pnts[368], pnts[363]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[363], pnts[364], pnts[369]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[331], pnts[330], pnts[365]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[365], pnts[366], pnts[331]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[332], pnts[331], pnts[366]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[366], pnts[367], pnts[332]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[333], pnts[332], pnts[367]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[367], pnts[368], pnts[333]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[334], pnts[333], pnts[368]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[368], pnts[369], pnts[334]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[374], pnts[339], pnts[334]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[334], pnts[370], pnts[374]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[375], pnts[374], pnts[370]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[370], pnts[371], pnts[375]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[376], pnts[375], pnts[371]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[371], pnts[372], pnts[376]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[377], pnts[376], pnts[372]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[372], pnts[373], pnts[377]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[378], pnts[344], pnts[339]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[339], pnts[374], pnts[378]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[379], pnts[378], pnts[374]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[374], pnts[375], pnts[379]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[380], pnts[379], pnts[375]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[375], pnts[376], pnts[380]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[381], pnts[380], pnts[376]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[376], pnts[377], pnts[381]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[382], pnts[349], pnts[344]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[344], pnts[378], pnts[382]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[383], pnts[382], pnts[378]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[378], pnts[379], pnts[383]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[384], pnts[383], pnts[379]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[379], pnts[380], pnts[384]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[385], pnts[384], pnts[380]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[380], pnts[381], pnts[385]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[386], pnts[354], pnts[349]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[349], pnts[382], pnts[386]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[387], pnts[386], pnts[382]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[382], pnts[383], pnts[387]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[388], pnts[387], pnts[383]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[383], pnts[384], pnts[388]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[389], pnts[388], pnts[384]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[384], pnts[385], pnts[389]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[390], pnts[359], pnts[354]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[354], pnts[386], pnts[390]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[391], pnts[390], pnts[386]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[386], pnts[387], pnts[391]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[392], pnts[391], pnts[387]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[387], pnts[388], pnts[392]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[393], pnts[392], pnts[388]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[388], pnts[389], pnts[393]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[394], pnts[364], pnts[359]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[359], pnts[390], pnts[394]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[395], pnts[394], pnts[390]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[390], pnts[391], pnts[395]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[396], pnts[395], pnts[391]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[391], pnts[392], pnts[396]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[397], pnts[396], pnts[392]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[392], pnts[393], pnts[397]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[398], pnts[369], pnts[364]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[364], pnts[394], pnts[398]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[399], pnts[398], pnts[394]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[394], pnts[395], pnts[399]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[400], pnts[399], pnts[395]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[395], pnts[396], pnts[400]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[401], pnts[400], pnts[396]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[396], pnts[397], pnts[401]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[370], pnts[334], pnts[369]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[369], pnts[398], pnts[370]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[371], pnts[370], pnts[398]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[398], pnts[399], pnts[371]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[372], pnts[371], pnts[399]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[399], pnts[400], pnts[372]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[373], pnts[372], pnts[400]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[400], pnts[401], pnts[373]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[403], pnts[407]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[408], pnts[407], pnts[403]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[403], pnts[404], pnts[408]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[409], pnts[408], pnts[404]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[404], pnts[405], pnts[409]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[410], pnts[409], pnts[405]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[405], pnts[406], pnts[410]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[407], pnts[411]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[412], pnts[411], pnts[407]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[407], pnts[408], pnts[412]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[413], pnts[412], pnts[408]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[408], pnts[409], pnts[413]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[414], pnts[413], pnts[409]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[409], pnts[410], pnts[414]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[411], pnts[415]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[416], pnts[415], pnts[411]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[411], pnts[412], pnts[416]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[417], pnts[416], pnts[412]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[412], pnts[413], pnts[417]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[418], pnts[417], pnts[413]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[413], pnts[414], pnts[418]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[415], pnts[419]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[420], pnts[419], pnts[415]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[415], pnts[416], pnts[420]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[421], pnts[420], pnts[416]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[416], pnts[417], pnts[421]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[422], pnts[421], pnts[417]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[417], pnts[418], pnts[422]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[419], pnts[423]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[424], pnts[423], pnts[419]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[419], pnts[420], pnts[424]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[425], pnts[424], pnts[420]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[420], pnts[421], pnts[425]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[426], pnts[425], pnts[421]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[421], pnts[422], pnts[426]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[423], pnts[427]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[428], pnts[427], pnts[423]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[423], pnts[424], pnts[428]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[429], pnts[428], pnts[424]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[424], pnts[425], pnts[429]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[430], pnts[429], pnts[425]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[425], pnts[426], pnts[430]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[427], pnts[431]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[432], pnts[431], pnts[427]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[427], pnts[428], pnts[432]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[433], pnts[432], pnts[428]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[428], pnts[429], pnts[433]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[434], pnts[433], pnts[429]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[429], pnts[430], pnts[434]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[431], pnts[435]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[436], pnts[435], pnts[431]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[431], pnts[432], pnts[436]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[437], pnts[436], pnts[432]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[432], pnts[433], pnts[437]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[438], pnts[437], pnts[433]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[433], pnts[434], pnts[438]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[435], pnts[439]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[440], pnts[439], pnts[435]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[435], pnts[436], pnts[440]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[441], pnts[440], pnts[436]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[436], pnts[437], pnts[441]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[442], pnts[441], pnts[437]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[437], pnts[438], pnts[442]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[439], pnts[443]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[444], pnts[443], pnts[439]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[439], pnts[440], pnts[444]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[445], pnts[444], pnts[440]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[440], pnts[441], pnts[445]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[446], pnts[445], pnts[441]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[441], pnts[442], pnts[446]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[443], pnts[447]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[448], pnts[447], pnts[443]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[443], pnts[444], pnts[448]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[449], pnts[448], pnts[444]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[444], pnts[445], pnts[449]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[450], pnts[449], pnts[445]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[445], pnts[446], pnts[450]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[447], pnts[451]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[452], pnts[451], pnts[447]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[447], pnts[448], pnts[452]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[453], pnts[452], pnts[448]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[448], pnts[449], pnts[453]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[454], pnts[453], pnts[449]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[449], pnts[450], pnts[454]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[451], pnts[455]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[456], pnts[455], pnts[451]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[451], pnts[452], pnts[456]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[457], pnts[456], pnts[452]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[452], pnts[453], pnts[457]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[458], pnts[457], pnts[453]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[453], pnts[454], pnts[458]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[455], pnts[459]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[460], pnts[459], pnts[455]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[455], pnts[456], pnts[460]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[461], pnts[460], pnts[456]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[456], pnts[457], pnts[461]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[462], pnts[461], pnts[457]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[457], pnts[458], pnts[462]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[459], pnts[463]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[464], pnts[463], pnts[459]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[459], pnts[460], pnts[464]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[465], pnts[464], pnts[460]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[460], pnts[461], pnts[465]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[466], pnts[465], pnts[461]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[461], pnts[462], pnts[466]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[402], pnts[463], pnts[403]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[404], pnts[403], pnts[463]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[463], pnts[464], pnts[404]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[405], pnts[404], pnts[464]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[464], pnts[465], pnts[405]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[406], pnts[405], pnts[465]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[465], pnts[466], pnts[406]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[471], pnts[410], pnts[406]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[406], pnts[467], pnts[471]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[472], pnts[471], pnts[467]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[467], pnts[468], pnts[472]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[473], pnts[472], pnts[468]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[468], pnts[469], pnts[473]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[474], pnts[473], pnts[469]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[469], pnts[470], pnts[474]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[475], pnts[414], pnts[410]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[410], pnts[471], pnts[475]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[476], pnts[475], pnts[471]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[471], pnts[472], pnts[476]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[477], pnts[476], pnts[472]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[472], pnts[473], pnts[477]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[478], pnts[477], pnts[473]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[473], pnts[474], pnts[478]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[479], pnts[418], pnts[414]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[414], pnts[475], pnts[479]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[480], pnts[479], pnts[475]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[475], pnts[476], pnts[480]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[481], pnts[480], pnts[476]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[476], pnts[477], pnts[481]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[482], pnts[481], pnts[477]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[477], pnts[478], pnts[482]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[483], pnts[422], pnts[418]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[418], pnts[479], pnts[483]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[484], pnts[483], pnts[479]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[479], pnts[480], pnts[484]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[485], pnts[484], pnts[480]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[480], pnts[481], pnts[485]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[486], pnts[485], pnts[481]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[481], pnts[482], pnts[486]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[487], pnts[426], pnts[422]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[422], pnts[483], pnts[487]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[488], pnts[487], pnts[483]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[483], pnts[484], pnts[488]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[489], pnts[488], pnts[484]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[484], pnts[485], pnts[489]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[490], pnts[489], pnts[485]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[485], pnts[486], pnts[490]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[491], pnts[430], pnts[426]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[426], pnts[487], pnts[491]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[492], pnts[491], pnts[487]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[487], pnts[488], pnts[492]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[493], pnts[492], pnts[488]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[488], pnts[489], pnts[493]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[494], pnts[493], pnts[489]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[489], pnts[490], pnts[494]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[495], pnts[434], pnts[430]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[430], pnts[491], pnts[495]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[496], pnts[495], pnts[491]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[491], pnts[492], pnts[496]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[497], pnts[496], pnts[492]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[492], pnts[493], pnts[497]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[498], pnts[497], pnts[493]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[493], pnts[494], pnts[498]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[499], pnts[438], pnts[434]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[434], pnts[495], pnts[499]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[500], pnts[499], pnts[495]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[495], pnts[496], pnts[500]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[501], pnts[500], pnts[496]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[496], pnts[497], pnts[501]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[502], pnts[501], pnts[497]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[497], pnts[498], pnts[502]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[503], pnts[442], pnts[438]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[438], pnts[499], pnts[503]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[504], pnts[503], pnts[499]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[499], pnts[500], pnts[504]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[505], pnts[504], pnts[500]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[500], pnts[501], pnts[505]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[506], pnts[505], pnts[501]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[501], pnts[502], pnts[506]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[507], pnts[446], pnts[442]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[442], pnts[503], pnts[507]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[508], pnts[507], pnts[503]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[503], pnts[504], pnts[508]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[509], pnts[508], pnts[504]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[504], pnts[505], pnts[509]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[510], pnts[509], pnts[505]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[505], pnts[506], pnts[510]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[511], pnts[450], pnts[446]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[446], pnts[507], pnts[511]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[512], pnts[511], pnts[507]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[507], pnts[508], pnts[512]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[513], pnts[512], pnts[508]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[508], pnts[509], pnts[513]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[514], pnts[513], pnts[509]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[509], pnts[510], pnts[514]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[515], pnts[454], pnts[450]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[450], pnts[511], pnts[515]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[516], pnts[515], pnts[511]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[511], pnts[512], pnts[516]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[517], pnts[516], pnts[512]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[512], pnts[513], pnts[517]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[518], pnts[517], pnts[513]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[513], pnts[514], pnts[518]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[519], pnts[458], pnts[454]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[454], pnts[515], pnts[519]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[520], pnts[519], pnts[515]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[515], pnts[516], pnts[520]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[521], pnts[520], pnts[516]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[516], pnts[517], pnts[521]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[522], pnts[521], pnts[517]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[517], pnts[518], pnts[522]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[523], pnts[462], pnts[458]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[458], pnts[519], pnts[523]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[524], pnts[523], pnts[519]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[519], pnts[520], pnts[524]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[525], pnts[524], pnts[520]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[520], pnts[521], pnts[525]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[526], pnts[525], pnts[521]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[521], pnts[522], pnts[526]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[527], pnts[466], pnts[462]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[462], pnts[523], pnts[527]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[528], pnts[527], pnts[523]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[523], pnts[524], pnts[528]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[529], pnts[528], pnts[524]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[524], pnts[525], pnts[529]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[530], pnts[529], pnts[525]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[525], pnts[526], pnts[530]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[467], pnts[406], pnts[466]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[466], pnts[527], pnts[467]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[468], pnts[467], pnts[527]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[527], pnts[528], pnts[468]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[469], pnts[468], pnts[528]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[528], pnts[529], pnts[469]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[470], pnts[469], pnts[529]).setEmission(color).setMaterial(mat), //
+                new Triangle(pnts[529], pnts[530], pnts[470]).setEmission(color).setMaterial(mat) //
+        );
+        scene.lights.add(new PointLight(new Color(500, 500, 500), new Point(100, 0, -100)).setkQ(0.000001));
+
+        camera.setRayTracer(new RayTracerBasic(scene)).renderImage();
+    }
+
+}
\ No newline at end of file
Index: unittests/pictures/Cube.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pictures;\r\n\r\nimport geometries.Geometries;\r\nimport geometries.Polygon;\r\nimport primitives.Color;\r\nimport primitives.Material;\r\nimport primitives.Point;\r\nimport primitives.Vector;\r\n\r\npublic class Cube {\r\n    Polygon base;\r\n    Polygon top;\r\n    Polygon front;\r\n    Polygon back;\r\n    Polygon rightSide;\r\n    Polygon leftSide;\r\n    Point p2 ;\r\n    Point p3;\r\n    Point p4;\r\n\r\n    Point p5 ;\r\n    Point p6 ;\r\n    Point p7 ;\r\n    Point p8 ;\r\n\r\n\r\n    public Cube(Point p1, double zx, double y) throws IllegalAccessException {\r\n         p2 = p1.add(new Vector(zx, 0, 0));\r\n         p3 = p2.add(new Vector(0, 0, zx));\r\n         p4 = p1.add(new Vector(0, 0, zx));\r\n         p5 = p1.add(new Vector(0, y, 0));\r\n         p6 = p2.add(new Vector(0, y, 0));\r\n         p7 = p3.add(new Vector(0, y, 0));\r\n         p8 = p4.add(new Vector(0, y, 0));\r\n\r\n        top = new Polygon(p5, p6, p7, p8);\r\n        base = new Polygon(p1, p2, p3, p4);\r\n        front = new Polygon(p1, p2, p6, p5);\r\n        back = new Polygon(p4, p3, p7, p8);\r\n        rightSide = new Polygon(p2, p3, p7, p6);\r\n        leftSide = new Polygon(p1, p4, p8, p5);\r\n\r\n    }\r\n    public Geometries getGeometries() {\r\n        return new Geometries(top,base,front,back,rightSide,leftSide);\r\n    }\r\n\r\n    public Cube setCubeEmission(Color color) {\r\n        top = (Polygon) top.setEmission(color);\r\n        base = (Polygon) base.setEmission(color);\r\n        front = (Polygon) front.setEmission(color);\r\n        back = (Polygon) back.setEmission(color);\r\n        rightSide = (Polygon) rightSide.setEmission(color);\r\n        leftSide = (Polygon) leftSide.setEmission(color);\r\n        return this;\r\n    }\r\n    public Cube setCubeMaterial(Material mt) {\r\n        top = (Polygon) top.setMaterial(mt);\r\n        base = (Polygon) base.setMaterial(mt);\r\n        front = (Polygon) front.setMaterial(mt);\r\n        back = (Polygon) back.setMaterial(mt);\r\n        rightSide = (Polygon) rightSide.setMaterial(mt);\r\n        leftSide = (Polygon) leftSide.setMaterial(mt);\r\n        return this;\r\n    }\r\n    public Vector getCubeTopNormal(Point p) throws IllegalAccessException {\r\n        Vector normal=top.getNormal(p);\r\n        if(normal.getY()<0)\r\n            return new Vector(normal.getX(), -1*normal.getY(), normal.getZ() );\r\n        return normal;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittests/pictures/Cube.java b/unittests/pictures/Cube.java
--- a/unittests/pictures/Cube.java	
+++ b/unittests/pictures/Cube.java	
@@ -8,20 +8,20 @@
 import primitives.Vector;
 
 public class Cube {
-    Polygon base;
-    Polygon top;
-    Polygon front;
-    Polygon back;
-    Polygon rightSide;
-    Polygon leftSide;
-    Point p2 ;
-    Point p3;
-    Point p4;
+    private Polygon base;
+    private Polygon top;
+    private Polygon front;
+    private Polygon back;
+    private Polygon rightSide;
+    private Polygon leftSide;
 
-    Point p5 ;
-    Point p6 ;
-    Point p7 ;
-    Point p8 ;
+    protected Point p2 ;
+    protected Point p3;
+    protected Point p4;
+    protected Point p5 ;
+    protected Point p6 ;
+    protected Point p7 ;
+    protected Point p8 ;
 
 
     public Cube(Point p1, double zx, double y) throws IllegalAccessException {
Index: unittests/pictures/SpotStreetLight.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittests/pictures/SpotStreetLight.java b/unittests/pictures/SpotStreetLight.java
new file mode 100644
--- /dev/null	
+++ b/unittests/pictures/SpotStreetLight.java	
@@ -0,0 +1,49 @@
+package pictures;
+
+import geometries.Cylinder;
+import geometries.Geometries;
+import geometries.Sphere;
+import lighting.PointLight;
+import lighting.SpotLight;
+import primitives.*;
+
+public class SpotStreetLight {
+    private static final int SHININESS = 301;
+
+    private static final Double3 KD3 = new Double3(0.3, 0.8, 0.4);
+
+    private static final Double3 KS3 = new Double3(0.2, 0.4, 0.3);
+    private final Material material = new Material().setkD(KD3).setkS(KS3).setnShininess(SHININESS);
+    Cylinder Base;
+    Cylinder lamp;
+    PointLight light;
+    Cylinder top;
+    public  SpotStreetLight(Point p, Vector normal) throws IllegalAccessException {
+        double baseH=30d;
+        double lampH=10d;
+        Ray ray=new Ray(p,normal);
+        Base=new Cylinder(ray,1d,baseH);
+        Base=(Cylinder) Base.setEmission(new Color(0,0,0));
+        Base=(Cylinder) Base.setMaterial(new Material().setkD(0.5).setkS(0.5).setnShininess(100));
+
+        Point nextP=p.add(new Vector(0,baseH,0));
+        ray=new Ray(nextP,normal);
+        lamp=new Cylinder(ray,5d,lampH);
+        lamp=(Cylinder)  lamp.setEmission(new Color(255,207,73));
+        lamp=(Cylinder)  lamp.setMaterial(new Material().setkD(0.4).setkS(0.3).setnShininess(100).setkT(0.5));
+        nextP=nextP.add(new Vector(0,lampH/2,0));
+        light=new SpotLight(new Color(800, 255, 255), nextP,new Vector(0,-1,0))
+                .setkL(0.0001).setkQ(0.0002);
+        ray=new Ray(nextP.add(new Vector(0,lampH/2,0)),normal);
+        top=new Cylinder(ray,1d,2d);
+        top=(Cylinder) top.setEmission(new Color(0,0,0));
+        top=(Cylinder) top.setMaterial(new Material().setkD(0.5).setkS(0.5).setnShininess(100));
+    }
+    public Geometries getGeometries() {
+        return new Geometries(Base,top,lamp);
+    }
+    public PointLight getLight() {
+        return light;
+    }
+
+}
Index: unittests/renderer/RenderTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package renderer;\r\n\r\nimport static java.awt.Color.*;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport geometries.Sphere;\r\nimport geometries.Triangle;\r\nimport lighting.AmbientLight;\r\nimport primitives.*;\r\nimport renderer.*;\r\nimport scene.Scene;\r\n\r\n/** Test rendering a basic image\r\n * @author Dan */\r\npublic class RenderTests {\r\n\r\n   /** Produce a scene with basic 3D model and render it into a png image with a\r\n    * grid */\r\n   @Test\r\n   public void basicRenderTwoColorTest() throws IllegalAccessException {\r\n      Scene scene = new Scene(\"Test scene\")//\r\n              .setAmbientLight(new AmbientLight(new Color(255, 191, 191), //\r\n                      new Double3(1, 1, 1))) //\r\n              .setBackground(new Color(75, 127, 90));\r\n\r\n      scene.geometries.add(new Sphere(50d,new Point(0, 0, -100)),\r\n              new Triangle(new Point(-100, 0, -100), new Point(0, 100, -100), new Point(-100, 100, -100)), // up\r\n              // left\r\n              new Triangle(new Point(-100, 0, -100), new Point(0, -100, -100),\r\n                      new Point(-100, -100, -100)), // down\r\n              // left\r\n              new Triangle(new Point(100, 0, -100), new Point(0, -100, -100), new Point(100, -100, -100))); // down\r\n      // right\r\n      Camera camera = new Camera(new Point(Double3.ZERO), new Vector(0, 1, 0), new Vector(0, 0, -1)) //\r\n              .setVPDistance(100) //\r\n              .setVPSize(500, 500) .setNss(300).setMaxLevelAdaptiveSS(3)//\r\n              .setImageWriter(new ImageWriter(\"base render test\", 1000, 1000))\r\n              .setRayTracer(new RayTracerBasic(scene));\r\n      camera.renderImageSuperSampling();\r\n      camera.printGrid(100, new Color(YELLOW));\r\n      camera.writeToImage();\r\n   }\r\n\r\n   // For stage 6 - please disregard in stage 5\r\n   /** Produce a scene with basic 3D model - including individual lights of the\r\n    * bodies and render it into a png image with a grid */\r\n   @Test\r\n   public void basicRenderMultiColorTest() throws IllegalAccessException {\r\n      Scene scene = new Scene(\"Test scene\")//\r\n              .setAmbientLight(new AmbientLight(new Color(WHITE), new Double3(0.2))); //\r\n\r\n      scene.geometries.add( // center\r\n              new Sphere(50, new Point(0, 0, -100)),\r\n              // up left\r\n              new Triangle(new Point(-100, 0, -100), new Point(0, 100, -100), new Point(-100, 100, -100))\r\n                      .setEmission(new Color(GREEN)),\r\n              // down left\r\n              new Triangle(new Point(-100, 0, -100), new Point(0, -100, -100), new Point(-100, -100, -100))\r\n                      .setEmission(new Color(RED)),\r\n              // down right\r\n              new Triangle(new Point(100, 0, -100), new Point(0, -100, -100), new Point(100, -100, -100))\r\n                      .setEmission(new Color(BLUE)));\r\n\r\n      Camera camera = new Camera(new Point(Double3.ZERO), new Vector(0, 1, 0),new Vector(0, 0, -1)) //\r\n              .setVPDistance(100) //\r\n              .setVPSize(500, 500) //\r\n              .setImageWriter(new ImageWriter(\"color render test\", 1000, 1000))\r\n              .setRayTracer(new RayTracerBasic(scene));\r\n\r\n      camera.renderImage();\r\n      camera.printGrid(100, new Color(WHITE));\r\n      camera.writeToImage();\r\n   }\r\n\r\n   /** Test for XML based scene - for bonus */\r\n   @Test\r\n   public void basicRenderXml() throws IllegalAccessException {\r\n      Scene  scene  = new Scene(\"XML Test scene\");\r\n      // enter XML file name and parse from XML file into scene object\r\n      // using the code you added in appropriate packages\r\n      // ...\r\n      // NB: unit tests is not the correct place to put XML parsing code\r\n\r\n      Camera camera = new Camera(new Point(Double3.ZERO), new Vector(0, 0, -1), new Vector(0, 1, 0))     //\r\n              .setVPDistance(100)                                                                //\r\n              .setVPSize(500, 500).setImageWriter(new ImageWriter(\"xml render test\", 1000, 1000))\r\n              .setRayTracer(new RayTracerBasic(scene));\r\n      camera.renderImage();\r\n      camera.printGrid(100, new Color(YELLOW));\r\n      camera.writeToImage();\r\n   }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittests/renderer/RenderTests.java b/unittests/renderer/RenderTests.java
--- a/unittests/renderer/RenderTests.java	
+++ b/unittests/renderer/RenderTests.java	
@@ -34,10 +34,10 @@
       // right
       Camera camera = new Camera(new Point(Double3.ZERO), new Vector(0, 1, 0), new Vector(0, 0, -1)) //
               .setVPDistance(100) //
-              .setVPSize(500, 500) .setNss(300).setMaxLevelAdaptiveSS(3)//
+              .setVPSize(500, 500) .setNss(300).setMaxLevelAdaptiveSS(3).setThreadsCount(6)//
               .setImageWriter(new ImageWriter("base render test", 1000, 1000))
               .setRayTracer(new RayTracerBasic(scene));
-      camera.renderImageSuperSampling();
+      camera.renderImageAdaptiveSuperSampling();
       camera.printGrid(100, new Color(YELLOW));
       camera.writeToImage();
    }
Index: unittests/pictures/Clock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pictures;\r\n\r\nimport geometries.Cylinder;\r\nimport geometries.Geometries;\r\nimport geometries.Polygon;\r\nimport primitives.*;\r\n\r\npublic class Clock {\r\n    final private double Height=1d;\r\n    Polygon frame;\r\n    Cylinder circle1;\r\n    Cylinder circle2;\r\n    Cylinder circle3;\r\n    Polygon longHand;\r\n    Polygon shortHand;\r\n    public Clock(Point p1,double l) throws IllegalAccessException {\r\n        Point p2=p1.add(new Vector(l,0,0));\r\n        Point p3=p2.add(new Vector(0,l,0));\r\n        Point p4=p1.add(new Vector(0,l,0));\r\n        frame=new Polygon(p1,p2,p3,p4);\r\n        Point center1=p1.add(new Vector(l/2,l/2,0));\r\n        double radius1=(l/2)-l*0.08;\r\n        Ray ray1=new Ray(center1,frame.getNormal(center1));\r\n        circle1=new Cylinder(ray1,radius1,Height);\r\n\r\n        double radius2=radius1-radius1*0.2;\r\n        Point center2=center1.add(new Vector(0,0,0.5));\r\n        Ray ray2=new Ray(center2,frame.getNormal(center2));\r\n        circle2=new Cylinder(ray2,radius2,Height);\r\n\r\n        double radius3=radius2-radius2*0.08;\r\n        Point center3=center2.add(new Vector(0,0,0.5));\r\n        Ray ray3=new Ray(center3,frame.getNormal(center3));\r\n        circle3=new Cylinder(ray3,radius3,Height);\r\n\r\n        Point h1=center3.add(new Vector(-0.4,0,2));\r\n        Point h2=center3.add(new Vector(0.4,0,2));\r\n        Point h3=h2.add(new Vector(0,radius3*0.9,2));\r\n        Point h4=h1.add(new Vector(0,radius3*0.9,2));\r\n        longHand=new Polygon(h1,h2,h3,h4);\r\n\r\n        Point hs1=center3.add(new Vector(0,-0.4,2));\r\n        Point hs2=center3.add(new Vector(0,0.4,2));\r\n        Point hs3=hs2.add(new Vector(radius3*0.6,0,2));\r\n        Point hs4=hs1.add(new Vector(radius3*0.6,0,2));\r\n\r\n        shortHand=new Polygon(hs1,hs2,hs3,hs4);\r\n\r\n\r\n    }\r\n    public Geometries getGeometries() {\r\n        return new Geometries(frame,circle1,circle2,circle3,longHand,shortHand);\r\n    }\r\n\r\n    public Clock setClockEmission(Color clock,Color square) {\r\n        circle1 = (Cylinder) circle1.setEmission(clock);\r\n        circle2 = (Cylinder) circle2.setEmission(new Color(128,128,128));\r\n        circle3 = (Cylinder) circle3.setEmission(clock);\r\n        frame = (Polygon) frame.setEmission(square);\r\n        longHand = (Polygon) longHand.setEmission(new Color(128,128,128));\r\n        shortHand = (Polygon) shortHand.setEmission(new Color(128,128,128));\r\n\r\n        return this;\r\n    }\r\n    public Clock setClockMaterial(Material mt) {\r\n        circle1 = (Cylinder) circle1.setMaterial(mt);\r\n        frame = (Polygon) frame.setMaterial(mt);\r\n        return this;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittests/pictures/Clock.java b/unittests/pictures/Clock.java
--- a/unittests/pictures/Clock.java	
+++ b/unittests/pictures/Clock.java	
@@ -7,12 +7,12 @@
 
 public class Clock {
     final private double Height=1d;
-    Polygon frame;
-    Cylinder circle1;
-    Cylinder circle2;
-    Cylinder circle3;
-    Polygon longHand;
-    Polygon shortHand;
+    private Polygon frame;
+    private Cylinder circle1;
+    private Cylinder circle2;
+    private Cylinder circle3;
+    private Polygon longHand;
+    private Polygon shortHand;
     public Clock(Point p1,double l) throws IllegalAccessException {
         Point p2=p1.add(new Vector(l,0,0));
         Point p3=p2.add(new Vector(0,l,0));
@@ -64,6 +64,8 @@
     }
     public Clock setClockMaterial(Material mt) {
         circle1 = (Cylinder) circle1.setMaterial(mt);
+        circle2 = (Cylinder) circle2.setMaterial(mt);
+        circle3 = (Cylinder) circle3.setMaterial(mt);
         frame = (Polygon) frame.setMaterial(mt);
         return this;
     }
Index: unittests/pictures/Building.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pictures;\r\n\r\nimport geometries.Geometries;\r\nimport primitives.*;\r\n\r\n;\r\n\r\n//    double d1=-10;\r\n//    double d2=-50;\r\n//    double d3=-130;\r\n\r\n//    double x=27d;\r\n//    double y=30d;\r\n//    double z=27d;\r\n\r\npublic class Building {\r\n     private static final int SHININESS = 301;\r\n\r\n     private static final Double3 KD3 = new Double3(0.3, 0.8, 0.4);\r\n\r\n     private static final Double3 KS3 = new Double3(0.2, 0.4, 0.3);\r\n     final Color Dark_Building_Color=new Color(191,156,95);\r\n     //\r\n     //new Color(198,193,180);\r\n     final Color Light_Building_Color=new Color(219,199,129);\r\n     //\r\n     //new Color(228,218,193);\r\n     final Color Pyramid_Color=new Color(99,138,189);\r\n     //new Color(132,175,158);\r\n\r\n     private final Material material = new Material().setkD(KD3).setkS(KS3).setnShininess(SHININESS);\r\n     Base firstB1;\r\n     Base secondB1;\r\n     CylinderBase firstCB1;\r\n     Base firstB2;\r\n     Base secondB2;\r\n     CylinderBase firstCB2;\r\n     CylinderBase smallB1;\r\n     Cube clockC;\r\n     Clock clock;\r\n     CylinderBase smallB2;\r\n\r\n     Pyramid pyramid;\r\n     public  Building(Point p,double zx) throws IllegalAccessException {\r\n\r\n          double nextY=4.5d;\r\n          firstB1=new Base(p,zx,nextY,0.8).setBaseEmission(Light_Building_Color,Dark_Building_Color).setBaseMaterial(material);//base1\r\n          Point nextP=p.add(new Vector(0,nextY,0));//for second\r\n          secondB1=new Base(nextP,zx,nextY,0.8).setBaseEmission(Light_Building_Color,Dark_Building_Color).setBaseMaterial(material);//base2\r\n\r\n          nextP=nextP.add(new Vector(0,nextY,0));//for firstCB1\r\n          nextY=20d;\r\n          firstCB1=new CylinderBase(nextP,zx,nextY,0.7).setCylinderBaseEmission(Light_Building_Color,Dark_Building_Color).setCylinderBaseMaterial(material);//first bae cylinder\r\n\r\n          nextP=nextP.add(new Vector(0,nextY,0));//for firstB2\r\n          nextY=4.5d;\r\n          firstB2=new Base(nextP,zx,nextY,0.8).setBaseEmission(Light_Building_Color,Dark_Building_Color).setBaseMaterial(material);//base3\r\n          nextP=nextP.add(new Vector(0,nextY,0));//for secondB2\r\n          secondB2=new Base(nextP,zx,nextY,0.8).setBaseEmission(Light_Building_Color,Dark_Building_Color).setBaseMaterial(material);//base4\r\n\r\n          nextP=nextP.add(new Vector(0,nextY,0));//for firstCB2\r\n          nextY=20d;\r\n          firstCB2=new CylinderBase(nextP,zx,nextY,0.7).setCylinderBaseEmission(Light_Building_Color,Dark_Building_Color).setCylinderBaseMaterial(material);\r\n\r\n          nextP=nextP.add(new Vector(0,nextY,0));//for//smallB1\r\n          nextY=5d;\r\n          smallB1=new CylinderBase(nextP,zx,nextY,0.7).setCylinderBaseEmission(Light_Building_Color,Dark_Building_Color).setCylinderBaseMaterial(material);\r\n\r\n          nextP=nextP.add(new Vector(0,nextY,0));//for clockC and clock\r\n          nextY=30d;\r\n          clockC=new Cube(nextP,zx,nextY).setCubeEmission(Light_Building_Color).setCubeMaterial(material);\r\n          double l=zx-0.2*zx;\r\n          Point PClock=nextP.add(new Vector(zx*0.1,zx*0.1,zx+1));\r\n          clock=new Clock(PClock,l).setClockEmission(new Color(255,255,255),Dark_Building_Color).setClockMaterial(material);\r\n\r\n          nextP=nextP.add(new Vector(0,nextY,0));//for smallB2\r\n          nextY=5d;\r\n          smallB2=new CylinderBase(nextP,zx,nextY,0.7).setCylinderBaseEmission(Light_Building_Color,Dark_Building_Color).setCylinderBaseMaterial(material);\r\n\r\n          nextP=nextP.add(new Vector(-0.1*zx,nextY,-0.1*zx));//for pyramid\r\n          nextY=25d;\r\n          pyramid=new Pyramid(nextP,zx*1.2,nextY).setPyramidEmission(Pyramid_Color).setPyramidMaterial(material);\r\n\r\n     }\r\n     //firstB1 secondB1 firstCB1 firstB2 secondB2 firstCB2  smallB1 clockC clock smallB2 pyramid\r\n     public Geometries getGeometries() {\r\n          return new Geometries(\r\n                  firstB1.getGeometries(),\r\n                  secondB1.getGeometries(),\r\n                  firstCB1.getGeometries(),\r\n                  firstB2.getGeometries(),\r\n                  secondB2.getGeometries(),\r\n                  firstCB2.getGeometries(),\r\n                  smallB1.getGeometries(),\r\n                  clockC.getGeometries(),\r\n                  clock.getGeometries(),\r\n                  smallB2.getGeometries(),\r\n                  pyramid.getGeometries());\r\n     }\r\n\r\n\r\n//\r\n\r\n\r\n//    double l=x-0.2*x;\r\n//    Point p1=new Point(d1, d2, d3);\r\n//    Point p2=new Point(d1-x*0.1, d2+70d, d3-z*0.1);\r\n//    Point p3=new Point(d1+x*0.1,d2+70d-x,d3+z);\r\n//\r\n//    //Base base=new Base(p1,z,x,40d,0.8).setBaseEmission(new Color(232,194,128)).setBaseMaterial(material);\r\n//    Cube building=new Cube(p1.add(new Vector(0,40d,0)),z,x,y).setCubeEmission(new Color(232,194,128)).setCubeMaterial(material);\r\n//    Pyramid p=new Pyramid(p2,z+z*0.2,x+x*0.2,30d).setPyramidEmission(new Color(126,147,229)).setPyramidMaterial(material);\r\n//    Clock clock=new Clock(p3,l).setClockEmission(new Color(255,255,255),new Color(191,156,95)).setClockMaterial(material);\r\n//    CylinderBase cb=new CylinderBase(p1,x,40d,0.6).setCylinderBaseEmission(new Color(219,199,129),new Color(191,156,95)).setCylinderBaseMaterial(material);\r\n//    //additions a=new additions(p1.add(new Vector(0,40d,0)),z,x,y,new Color(219,199,129),new Color(191,156,95));\r\n//        scene1.geometries.add(clock.getGeometries(),p.getGeometries(),cb.getGeometries(),building.getGeometries(),sky1,sky2,sky3,floor);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittests/pictures/Building.java b/unittests/pictures/Building.java
--- a/unittests/pictures/Building.java	
+++ b/unittests/pictures/Building.java	
@@ -29,16 +29,16 @@
      //new Color(132,175,158);
 
      private final Material material = new Material().setkD(KD3).setkS(KS3).setnShininess(SHININESS);
-     Base firstB1;
-     Base secondB1;
-     CylinderBase firstCB1;
-     Base firstB2;
-     Base secondB2;
-     CylinderBase firstCB2;
-     CylinderBase smallB1;
-     Cube clockC;
-     Clock clock;
-     CylinderBase smallB2;
+     private Base firstB1;
+     private Base secondB1;
+     private CylinderBase firstCB1;
+     private Base firstB2;
+     private Base secondB2;
+     private CylinderBase firstCB2;
+     private CylinderBase smallB1;
+     private Cube clockC;
+     private Clock clock;
+     private CylinderBase smallB2;
 
      Pyramid pyramid;
      public  Building(Point p,double zx) throws IllegalAccessException {
@@ -98,20 +98,4 @@
                   pyramid.getGeometries());
      }
 
-
-//
-
-
-//    double l=x-0.2*x;
-//    Point p1=new Point(d1, d2, d3);
-//    Point p2=new Point(d1-x*0.1, d2+70d, d3-z*0.1);
-//    Point p3=new Point(d1+x*0.1,d2+70d-x,d3+z);
-//
-//    //Base base=new Base(p1,z,x,40d,0.8).setBaseEmission(new Color(232,194,128)).setBaseMaterial(material);
-//    Cube building=new Cube(p1.add(new Vector(0,40d,0)),z,x,y).setCubeEmission(new Color(232,194,128)).setCubeMaterial(material);
-//    Pyramid p=new Pyramid(p2,z+z*0.2,x+x*0.2,30d).setPyramidEmission(new Color(126,147,229)).setPyramidMaterial(material);
-//    Clock clock=new Clock(p3,l).setClockEmission(new Color(255,255,255),new Color(191,156,95)).setClockMaterial(material);
-//    CylinderBase cb=new CylinderBase(p1,x,40d,0.6).setCylinderBaseEmission(new Color(219,199,129),new Color(191,156,95)).setCylinderBaseMaterial(material);
-//    //additions a=new additions(p1.add(new Vector(0,40d,0)),z,x,y,new Color(219,199,129),new Color(191,156,95));
-//        scene1.geometries.add(clock.getGeometries(),p.getGeometries(),cb.getGeometries(),building.getGeometries(),sky1,sky2,sky3,floor);
 }
Index: unittests/pictures/Pictures.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pictures;\r\n\r\nimport geometries.Cylinder;\r\nimport geometries.Geometry;\r\nimport geometries.Plane;\r\nimport lighting.DirectionalLight;\r\nimport lighting.PointLight;\r\nimport lighting.SpotLight;\r\nimport org.junit.jupiter.api.Test;\r\nimport primitives.*;\r\nimport renderer.Camera;\r\nimport renderer.ImageWriter;\r\nimport renderer.RayTracerBasic;\r\nimport scene.Scene;\r\n\r\npublic class Pictures {\r\n\r\n    private static final int SHININESS = 301;\r\n    private static final double KD = 0.5;\r\n    private static final Double3 KD3 = new Double3(0.2, 0.6, 0.4);\r\n\r\n    private static final double KS = 0.5;\r\n    private static final Double3 KS3 = new Double3(0.2, 0.4, 0.3);\r\n    private Scene scene = new Scene(\"front\");\r\n    private final Color sphereLightColor = new Color(800, 500, 0);\r\n\r\n    private final Camera camera1 = new Camera(new Point(0, 0, 1500),\r\n            new Vector(0, 1, 0), new Vector(0, 0, -1))\r\n            .setVPSize(150, 150).setVPDistance(1000).setNss(9).setThreadsCount(4);//front\r\n    private final Camera camera2 = new Camera(new Point(2000, 0, -520),\r\n            new Vector(0, 1, 0), new Vector(-1, 0, 0))\r\n            .setVPSize(150, 150).setVPDistance(1000).setNss(300).setThreadsCount(4);//side\r\n\r\n//    private final Camera camera4 = new Camera(new Point(1600, 0, -520),\r\n//            new Vector(0, 1, 0), new Vector(1, 0, 0))\r\n//            .setVPSize(150, 150).setVPDistance(1000);//side\r\n    private final Camera camera3 = new Camera(new Point(2000, 0, 1500),\r\n            new Vector(0, 1, 0), new Vector(-1, 0, -1))\r\n            .setVPSize(150, 150).setVPDistance(1000).setNss(300).setThreadsCount(4);//half-side\r\n\r\n    private final Material material = new Material().setkD(KD3).setkS(KS3).setnShininess(SHININESS);\r\n\r\n    private final Material skyMaterial = new Material().setkR(0.3);\r\n    private final Material waterMaterial = new Material().setkT(0.7).setkR(0.3);\r\n\r\n\r\n\r\n\r\n    //new Color(143,211,240)\r\n    private final Geometry floor =new Plane(new Point(1500, -100, -1500), new Point(-1500, -100, -1500),\r\n            new Point(670, -100, 3000)).setEmission(new Color(39,45,74))//\r\n            .setMaterial(waterMaterial);\r\n    private final Geometry water =new Plane(new Point(1500, -105, -1500), new Point(-1500, -100, -1500),\r\n            new Point(670, -100, 3000)).setEmission(new Color(25,49,145))//\r\n            .setMaterial(waterMaterial);\r\n    private final Cube floor1 =new Cube(new Point(-2400, -100, -3600),3300,5).setCubeEmission(new Color(39,45,100)).setCubeMaterial(material);\r\n\r\n    public void  setupCamera(Camera camera,String fileName) throws IllegalAccessException\r\n    {\r\n        ImageWriter imageWriter = new ImageWriter(fileName, 500, 500);\r\n        camera.setImageWriter(imageWriter) //\r\n                .setRayTracer(new RayTracerBasic(scene)) //\r\n                .renderImage() //\r\n                .writeToImage();\r\n    }\r\n    public void  setupLights() throws IllegalAccessException\r\n    {\r\n\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(200, 200, -10))\r\n                .setkL(0.0001).setkQ(0.00002));\r\n\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(240, 240, -2998))\r\n                .setkL(0.0001).setkQ(0.00002));\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(150,150, -2998))\r\n                .setkL(0.0001).setkQ(0.0002));\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(-40, 250, -2998))\r\n                .setkL(0.0001).setkQ(0.0002));\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(-150, 100, -2998))\r\n                .setkL(0.0001).setkQ(0.0002));\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(-230, 200, -2998))\r\n                .setkL(0.0001).setkQ(0.0002));\r\n\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(-2998, 240, -750))\r\n                .setkL(0.0001).setkQ(0.00002));\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(-2998,150, -650))\r\n                .setkL(0.0001).setkQ(0.0002));\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(-2998, 250, -500))\r\n                .setkL(0.0001).setkQ(0.0002));\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(-2998, 100, -430))\r\n                .setkL(0.0001).setkQ(0.0002));\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(-2998, 200, -320))\r\n                .setkL(0.0001).setkQ(0.0002));\r\n\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(2998, 240, -750))\r\n                .setkL(0.0001).setkQ(0.00002));\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(2998,150, -650))\r\n                .setkL(0.0001).setkQ(0.0002));\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(2998, 250, -500))\r\n                .setkL(0.0001).setkQ(0.0002));\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(2998, 100, -430))\r\n                .setkL(0.0001).setkQ(0.0002));\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(2998, 200, -320))\r\n                .setkL(0.0001).setkQ(0.0002));\r\n\r\n    }\r\n\r\n    public void  setupBuilding() throws IllegalAccessException{\r\n        Point p=new Point(60,-95,-460);\r\n        StreetLamp l1=new StreetLamp(p,floor1.getCubeTopNormal(p));\r\n        p=new Point(-50,-95,-460);\r\n        StreetLamp l2=new StreetLamp(p,floor1.getCubeTopNormal(p));\r\n        p=new Point(-10, -95, -460);\r\n        Building b=new Building(p,30);\r\n        scene.geometries.add(b.getGeometries(),l1.getGeometries(),l2.getGeometries(),water,floor,floor1.getGeometries());\r\n        scene.lights.add(l1.light);\r\n        scene.lights.add(l2.light);\r\n\r\n    }\r\n    public void  setupNight() throws IllegalAccessException{\r\n        Color skyColor =new Color(18,48,129);\r\n        Ray ray1=new Ray(new Point(80,230,-2998),new Vector(0,0,1));\r\n        Geometry moon=new Cylinder(ray1,20d,1d).setEmission(new Color(255,255,255));\r\n        Ray ray2=new Ray(new Point(90,230,-2998),new Vector(0,0,1));\r\n        Geometry shadow=new Cylinder(ray2,20d,1d).setEmission(skyColor).setMaterial(material);\r\n        Geometry sky1 =new Plane(new Point(-150, 50, -3000), new Point(-150, 250, -3000), new Point(150, 250, -3000))\r\n                .setEmission(skyColor).setMaterial(material);\r\n        Geometry sky2 =new Plane(new Point(-3000, 50,-150), new Point(-3000, 250, -3000), new Point(-3000,250, -60))\r\n                .setEmission(skyColor).setMaterial(material);\r\n        Geometry sky3 =new Plane(new Point(3000, 50,-150), new Point(3000, 250, -3000), new Point(3000,250, -60))\r\n                .setEmission(skyColor).setMaterial(material);\r\n        setupLights();\r\n\r\n        scene.geometries.add(sky1,sky2,sky3,shadow,moon);\r\n\r\n    }\r\n    public void  setupDay() throws IllegalAccessException{\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(200, 200, -10))\r\n                .setkL(0.0001).setkQ(0.00002));\r\n        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(200, 200, -10))\r\n                .setkL(0.0001).setkQ(0.002));\r\n\r\n        Color skyColor =new Color(154,205,245);\r\n        Geometry sky1 =new Plane(new Point(-150, 50, -3000), new Point(-150, 250, -3000), new Point(150, 250, -3000))\r\n                .setEmission(skyColor).setMaterial(material);\r\n        Geometry sky2 =new Plane(new Point(-3000, 50,-150), new Point(-3000, 250, -3000), new Point(-3000,250, -60))\r\n                .setEmission(skyColor).setMaterial(material);\r\n        Geometry sky3 =new Plane(new Point(3000, 50,-150), new Point(3000, 250, -3000), new Point(3000,250, -60))\r\n                .setEmission(skyColor).setMaterial(material);\r\n\r\n        scene.geometries.add(sky1,sky2,sky3);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    public Pictures() throws IllegalAccessException {\r\n    }\r\n\r\n    @Test\r\n    public void front() throws IllegalAccessException {\r\n        //StlShape shape=new StlShape();\r\n\r\n        setupBuilding();\r\n        setupNight() ;\r\n        setupCamera(camera1,\"front\");\r\n\r\n\r\n    }\r\n    @Test\r\n    public void side() throws IllegalAccessException {\r\n        setupBuilding();\r\n        setupNight();\r\n        setupCamera(camera2,\"side\");\r\n    }\r\n//    @Test\r\n//    public void otherside() throws IllegalAccessException {\r\n//        setupGeometries(scene);\r\n//        setupLights(scene);\r\n//        setupCamera(camera4,\"side2\");\r\n//    }\r\n    @Test\r\n    public void halfSide() throws IllegalAccessException {\r\n        setupBuilding();\r\n        setupNight();\r\n        setupCamera(camera3,\"half_side\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittests/pictures/Pictures.java b/unittests/pictures/Pictures.java
--- a/unittests/pictures/Pictures.java	
+++ b/unittests/pictures/Pictures.java	
@@ -16,36 +16,26 @@
 public class Pictures {
 
     private static final int SHININESS = 301;
-    private static final double KD = 0.5;
     private static final Double3 KD3 = new Double3(0.2, 0.6, 0.4);
 
-    private static final double KS = 0.5;
     private static final Double3 KS3 = new Double3(0.2, 0.4, 0.3);
     private Scene scene = new Scene("front");
-    private final Color sphereLightColor = new Color(800, 500, 0);
 
     private final Camera camera1 = new Camera(new Point(0, 0, 1500),
             new Vector(0, 1, 0), new Vector(0, 0, -1))
-            .setVPSize(150, 150).setVPDistance(1000).setNss(9).setThreadsCount(4);//front
+            .setVPSize(150, 150).setVPDistance(1000).setMaxLevelAdaptiveSS(3).setThreadsCount(8);//front
     private final Camera camera2 = new Camera(new Point(2000, 0, -520),
             new Vector(0, 1, 0), new Vector(-1, 0, 0))
-            .setVPSize(150, 150).setVPDistance(1000).setNss(300).setThreadsCount(4);//side
+            .setVPSize(150, 150).setVPDistance(1000).setMaxLevelAdaptiveSS(3).setThreadsCount(8);//side
 
-//    private final Camera camera4 = new Camera(new Point(1600, 0, -520),
-//            new Vector(0, 1, 0), new Vector(1, 0, 0))
-//            .setVPSize(150, 150).setVPDistance(1000);//side
     private final Camera camera3 = new Camera(new Point(2000, 0, 1500),
             new Vector(0, 1, 0), new Vector(-1, 0, -1))
-            .setVPSize(150, 150).setVPDistance(1000).setNss(300).setThreadsCount(4);//half-side
+            .setVPSize(150, 150).setVPDistance(1000).setMaxLevelAdaptiveSS(3).setThreadsCount(8);//half-side
 
     private final Material material = new Material().setkD(KD3).setkS(KS3).setnShininess(SHININESS);
 
-    private final Material skyMaterial = new Material().setkR(0.3);
     private final Material waterMaterial = new Material().setkT(0.7).setkR(0.3);
 
-
-
-
     //new Color(143,211,240)
     private final Geometry floor =new Plane(new Point(1500, -100, -1500), new Point(-1500, -100, -1500),
             new Point(670, -100, 3000)).setEmission(new Color(39,45,74))//
@@ -103,64 +93,65 @@
                 .setkL(0.0001).setkQ(0.0002));
 
     }
-
-    public void  setupBuilding() throws IllegalAccessException{
-        Point p=new Point(60,-95,-460);
-        StreetLamp l1=new StreetLamp(p,floor1.getCubeTopNormal(p));
-        p=new Point(-50,-95,-460);
+    public void  setupBackground() throws IllegalAccessException{
+        Point p=new Point(60,-95,-590);
+        SpotStreetLight l1=new SpotStreetLight(p,floor1.getCubeTopNormal(p));
+        p=new Point(100,-95,-515);
         StreetLamp l2=new StreetLamp(p,floor1.getCubeTopNormal(p));
-        p=new Point(-10, -95, -460);
+        p=new Point(140,-95,-460);
+        StreetLamp l3=new StreetLamp(p,floor1.getCubeTopNormal(p));
+        p=new Point(-50,-95,-590);
+        SpotStreetLight l4=new SpotStreetLight(p,floor1.getCubeTopNormal(p));
+        p=new Point(-90,-95,-515);
+        StreetLamp l5=new StreetLamp(p,floor1.getCubeTopNormal(p));
+        p=new Point(-130,-95,-460);
+        StreetLamp l6=new StreetLamp(p,floor1.getCubeTopNormal(p));
+        scene.lights.add(l1.getLight());
+        scene.lights.add(l2.getLight());
+        scene.lights.add(l3.getLight());
+        scene.lights.add(l4.getLight());
+        scene.lights.add(l5.getLight());
+        scene.lights.add(l6.getLight());
+        scene.geometries.add(water,floor,floor1.getGeometries()
+                ,l1.getGeometries()
+                ,l2.getGeometries()
+                ,l3.getGeometries()
+                ,l4.getGeometries()
+                ,l5.getGeometries()
+                ,l6.getGeometries());
+    }
+
+    public void  setupBuilding() throws IllegalAccessException{
+        Point p=new Point(-10, -95, -670);
         Building b=new Building(p,30);
-        scene.geometries.add(b.getGeometries(),l1.getGeometries(),l2.getGeometries(),water,floor,floor1.getGeometries());
-        scene.lights.add(l1.light);
-        scene.lights.add(l2.light);
+        scene.geometries.add(b.getGeometries());
 
     }
     public void  setupNight() throws IllegalAccessException{
         Color skyColor =new Color(18,48,129);
+        Material skymaterial = new Material().setkD(KD3).setnShininess(10);
         Ray ray1=new Ray(new Point(80,230,-2998),new Vector(0,0,1));
         Geometry moon=new Cylinder(ray1,20d,1d).setEmission(new Color(255,255,255));
         Ray ray2=new Ray(new Point(90,230,-2998),new Vector(0,0,1));
         Geometry shadow=new Cylinder(ray2,20d,1d).setEmission(skyColor).setMaterial(material);
         Geometry sky1 =new Plane(new Point(-150, 50, -3000), new Point(-150, 250, -3000), new Point(150, 250, -3000))
-                .setEmission(skyColor).setMaterial(material);
+                .setEmission(skyColor).setMaterial(skymaterial);
         Geometry sky2 =new Plane(new Point(-3000, 50,-150), new Point(-3000, 250, -3000), new Point(-3000,250, -60))
-                .setEmission(skyColor).setMaterial(material);
+                .setEmission(skyColor).setMaterial(skymaterial);
         Geometry sky3 =new Plane(new Point(3000, 50,-150), new Point(3000, 250, -3000), new Point(3000,250, -60))
-                .setEmission(skyColor).setMaterial(material);
+                .setEmission(skyColor).setMaterial(skymaterial);
         setupLights();
 
         scene.geometries.add(sky1,sky2,sky3,shadow,moon);
 
     }
-    public void  setupDay() throws IllegalAccessException{
-        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(200, 200, -10))
-                .setkL(0.0001).setkQ(0.00002));
-        scene.lights.add(new PointLight(new Color(800, 255, 255), new Point(200, 200, -10))
-                .setkL(0.0001).setkQ(0.002));
-
-        Color skyColor =new Color(154,205,245);
-        Geometry sky1 =new Plane(new Point(-150, 50, -3000), new Point(-150, 250, -3000), new Point(150, 250, -3000))
-                .setEmission(skyColor).setMaterial(material);
-        Geometry sky2 =new Plane(new Point(-3000, 50,-150), new Point(-3000, 250, -3000), new Point(-3000,250, -60))
-                .setEmission(skyColor).setMaterial(material);
-        Geometry sky3 =new Plane(new Point(3000, 50,-150), new Point(3000, 250, -3000), new Point(3000,250, -60))
-                .setEmission(skyColor).setMaterial(material);
-
-        scene.geometries.add(sky1,sky2,sky3);
-
-    }
-
-
-
 
     public Pictures() throws IllegalAccessException {
     }
 
     @Test
     public void front() throws IllegalAccessException {
-        //StlShape shape=new StlShape();
-
+        setupBackground();
         setupBuilding();
         setupNight() ;
         setupCamera(camera1,"front");
@@ -169,18 +160,15 @@
     }
     @Test
     public void side() throws IllegalAccessException {
+        setupBackground();
         setupBuilding();
         setupNight();
         setupCamera(camera2,"side");
     }
-//    @Test
-//    public void otherside() throws IllegalAccessException {
-//        setupGeometries(scene);
-//        setupLights(scene);
-//        setupCamera(camera4,"side2");
-//    }
+
     @Test
     public void halfSide() throws IllegalAccessException {
+        setupBackground();
         setupBuilding();
         setupNight();
         setupCamera(camera3,"half_side");
Index: unittests/pictures/StreetLamp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pictures;\r\n\r\nimport geometries.Cylinder;\r\nimport geometries.Geometries;\r\nimport geometries.Sphere;\r\nimport lighting.PointLight;\r\nimport primitives.*;\r\n\r\npublic class StreetLamp {\r\n    private static final int SHININESS = 301;\r\n\r\n    private static final Double3 KD3 = new Double3(0.3, 0.8, 0.4);\r\n\r\n    private static final Double3 KS3 = new Double3(0.2, 0.4, 0.3);\r\n    private final Material material = new Material().setkD(KD3).setkS(KS3).setnShininess(SHININESS);\r\n    Cylinder Base;\r\n    Sphere lamp;\r\n    PointLight light;\r\n    Cylinder top;\r\n    public StreetLamp(Point p, Vector normal) throws IllegalAccessException {\r\n        double sphereR=6d;\r\n        double cylinderH=30d;\r\n       Ray ray=new Ray(p,normal);\r\n       Base=new Cylinder(ray,0.8d,cylinderH);\r\n       Base=(Cylinder) Base.setEmission(new Color(0,0,0));\r\n       Base=(Cylinder) Base.setMaterial(new Material().setkD(0.5).setkS(0.5).setnShininess(100));\r\n       Point nextP=p.add(new Vector(0,sphereR+cylinderH,0));\r\n       lamp=new Sphere(sphereR, nextP);\r\n       lamp=(Sphere)  lamp.setEmission(new Color(255,207,73));\r\n       lamp=(Sphere)  lamp.setMaterial(new Material().setkD(0.4).setkS(0.3).setnShininess(100).setkT(0.3));\r\n       light=new PointLight(new Color(800, 255, 255), nextP)\r\n                .setkL(0.0001).setkQ(0.00002);\r\n        ray=new Ray(nextP.add(new Vector(0,sphereR,0)),normal);\r\n       top=new Cylinder(ray,0.8d,2d);\r\n        top=(Cylinder) top.setEmission(new Color(0,0,0));\r\n        top=(Cylinder) top.setMaterial(new Material().setkD(0.5).setkS(0.5).setnShininess(100));\r\n\r\n    }\r\n    public Geometries getGeometries() {\r\n        return new Geometries(Base,top,lamp);\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittests/pictures/StreetLamp.java b/unittests/pictures/StreetLamp.java
--- a/unittests/pictures/StreetLamp.java	
+++ b/unittests/pictures/StreetLamp.java	
@@ -21,17 +21,17 @@
         double sphereR=6d;
         double cylinderH=30d;
        Ray ray=new Ray(p,normal);
-       Base=new Cylinder(ray,0.8d,cylinderH);
+       Base=new Cylinder(ray,1d,cylinderH);
        Base=(Cylinder) Base.setEmission(new Color(0,0,0));
        Base=(Cylinder) Base.setMaterial(new Material().setkD(0.5).setkS(0.5).setnShininess(100));
        Point nextP=p.add(new Vector(0,sphereR+cylinderH,0));
        lamp=new Sphere(sphereR, nextP);
        lamp=(Sphere)  lamp.setEmission(new Color(255,207,73));
-       lamp=(Sphere)  lamp.setMaterial(new Material().setkD(0.4).setkS(0.3).setnShininess(100).setkT(0.3));
+       lamp=(Sphere)  lamp.setMaterial(new Material().setkD(0.4).setkS(0.3).setnShininess(100).setkT(0.5));
        light=new PointLight(new Color(800, 255, 255), nextP)
-                .setkL(0.0001).setkQ(0.00002);
+                .setkL(0.0001).setkQ(0.0002);
         ray=new Ray(nextP.add(new Vector(0,sphereR,0)),normal);
-       top=new Cylinder(ray,0.8d,2d);
+       top=new Cylinder(ray,1d,2d);
         top=(Cylinder) top.setEmission(new Color(0,0,0));
         top=(Cylinder) top.setMaterial(new Material().setkD(0.5).setkS(0.5).setnShininess(100));
 
@@ -39,6 +39,10 @@
     public Geometries getGeometries() {
         return new Geometries(Base,top,lamp);
     }
+    public PointLight getLight() {
+        return light;
+    }
+
 
 
 
Index: src/geometries/Intersectable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package geometries;\r\n\r\nimport primitives.Point;\r\nimport primitives.Ray;\r\nimport primitives.Vector;\r\n\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * The Intersectable interface represents a geometric object that can be intersected by a ray.\r\n */\r\npublic abstract class Intersectable {\r\n    protected boolean bvhIsOn=true;\r\n    public AABB box;\r\n\r\n//    /**\r\n//     * Returns a list of points where the specified ray intersects this object.\r\n//     *\r\n//     * @param ray the ray to intersect with this object\r\n//     * @return a list of points where the ray intersects this object, or an empty list if there are no intersections\r\n//     */\r\n//    public abstract List<Point> findIntsersections(Ray ray) throws IllegalAccessException;\r\n\r\n    public class AABB{\r\n        public Point minimums;\r\n        public Point maximums;\r\n        public AABB(Point min,Point max){\r\n            minimums=min;\r\n            maximums=max;\r\n        }\r\n        public boolean isIntersectingBoundingBox(Ray ray){\r\n            if (!bvhIsOn || box ==null)\r\n                return true;\r\n            Vector dir= ray.getDir();\r\n            Point p0=ray.getP0();\r\n            double tMin = (box.minimums.getX()-p0.getX()) / dir.getX();\r\n            double tMax = (box.maximums.getX()-p0.getX()) / dir.getX();\r\n            if (tMin>tMax){\r\n                double temp=tMin;\r\n                tMin=tMax;\r\n                tMax=temp;\r\n            }\r\n            double tyMin = (box.minimums.getY()-p0.getY()) / dir.getY();\r\n            double tyMax = (box.maximums.getY()-p0.getY()) / dir.getY();\r\n            if (tyMin > tyMax) {\r\n                double temp=tyMin;\r\n                tyMin=tyMax;\r\n                tyMax=temp;\r\n            }\r\n            if((tMin>tyMax)||(tyMin > tMax))\r\n                return false;\r\n            if (tyMin > tMin)\r\n                tMin=tyMin;\r\n            if (tyMax< tMax)\r\n                tMax=tyMax;\r\n            double tzMin = (box.minimums.getZ()-p0.getZ()) / dir.getZ();\r\n            double tzMax = (box.maximums.getZ()-p0.getZ()) / dir.getZ();\r\n            if (tzMin > tzMax){\r\n                double temp = tzMin;\r\n                tzMin =tzMax;\r\n                tzMax = temp;\r\n            }\r\n            if ((tMin > tzMax)||(tzMin > tMax))\r\n                return false;\r\n            if(tzMin>tMin)\r\n                tMin = tzMin;\r\n            if (tzMax<tMax)\r\n                tMax = tzMax;\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n    public static class GeoPoint{\r\n        public Geometry geometry;\r\n        public Point point;\r\n\r\n        public GeoPoint(Geometry geometry,Point point) {\r\n            this.geometry = geometry;\r\n            this.point = point;\r\n        }\r\n\r\n        @Override\r\n        public boolean equals(Object o) {\r\n            if (this == o) return true;\r\n            if (!(o instanceof GeoPoint)) return false;\r\n            GeoPoint geoPoint = (GeoPoint) o;\r\n            return Objects.equals(geometry, geoPoint.geometry) && Objects.equals(point, geoPoint.point);\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"GeoPoint{\" +\r\n                    \"geometry=\" + geometry +\r\n                    \", point=\" + point +\r\n                    '}';\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public List<Point> findIntersections(Ray ray) throws IllegalAccessException {\r\n        var geoList = findGeoIntersections(ray);\r\n        return geoList == null ? null : geoList.stream().map(gp -> gp.point).toList();\r\n    }\r\n\r\n    public final List<GeoPoint> findGeoIntersections(Ray ray) throws IllegalAccessException {\r\n        return findGeoIntersections(ray, Double.POSITIVE_INFINITY);\r\n    }\r\n    public final List<GeoPoint> findGeoIntersections(Ray ray, double maxDistance) throws IllegalAccessException {\r\n        return findGeoIntersectionsHelper(ray, maxDistance);\r\n    }\r\n\r\n\r\n    protected abstract List<GeoPoint>\r\n    findGeoIntersectionsHelper(Ray ray, double maxDistance) throws IllegalAccessException;\r\n    protected abstract   void createBoundingBox() throws IllegalAccessException;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/geometries/Intersectable.java b/src/geometries/Intersectable.java
--- a/src/geometries/Intersectable.java	
+++ b/src/geometries/Intersectable.java	
@@ -11,9 +11,13 @@
  * The Intersectable interface represents a geometric object that can be intersected by a ray.
  */
 public abstract class Intersectable {
-    protected boolean bvhIsOn=true;
+    protected boolean bvhIsOn=false;
     public AABB box;
 
+    public void setBvhIsOn(boolean bvhIsOn) {
+        this.bvhIsOn = bvhIsOn;
+    }
+
 //    /**
 //     * Returns a list of points where the specified ray intersects this object.
 //     *
@@ -29,49 +33,49 @@
             minimums=min;
             maximums=max;
         }
-        public boolean isIntersectingBoundingBox(Ray ray){
-            if (!bvhIsOn || box ==null)
-                return true;
-            Vector dir= ray.getDir();
-            Point p0=ray.getP0();
-            double tMin = (box.minimums.getX()-p0.getX()) / dir.getX();
-            double tMax = (box.maximums.getX()-p0.getX()) / dir.getX();
-            if (tMin>tMax){
-                double temp=tMin;
-                tMin=tMax;
-                tMax=temp;
-            }
-            double tyMin = (box.minimums.getY()-p0.getY()) / dir.getY();
-            double tyMax = (box.maximums.getY()-p0.getY()) / dir.getY();
-            if (tyMin > tyMax) {
-                double temp=tyMin;
-                tyMin=tyMax;
-                tyMax=temp;
-            }
-            if((tMin>tyMax)||(tyMin > tMax))
-                return false;
-            if (tyMin > tMin)
-                tMin=tyMin;
-            if (tyMax< tMax)
-                tMax=tyMax;
-            double tzMin = (box.minimums.getZ()-p0.getZ()) / dir.getZ();
-            double tzMax = (box.maximums.getZ()-p0.getZ()) / dir.getZ();
-            if (tzMin > tzMax){
-                double temp = tzMin;
-                tzMin =tzMax;
-                tzMax = temp;
-            }
-            if ((tMin > tzMax)||(tzMin > tMax))
-                return false;
-            if(tzMin>tMin)
-                tMin = tzMin;
-            if (tzMax<tMax)
-                tMax = tzMax;
-            return true;
-        }
+
+    }
+    public boolean isIntersectingBoundingBox(Ray ray){
+        if (!bvhIsOn || box ==null)
+            return true;
+        Vector dir= ray.getDir();
+        Point p0=ray.getP0();
+        double tMin = (box.minimums.getX()-p0.getX()) / dir.getX();
+        double tMax = (box.maximums.getX()-p0.getX()) / dir.getX();
+        if (tMin>tMax){
+            double temp=tMin;
+            tMin=tMax;
+            tMax=temp;
+        }
+        double tyMin = (box.minimums.getY()-p0.getY()) / dir.getY();
+        double tyMax = (box.maximums.getY()-p0.getY()) / dir.getY();
+        if (tyMin > tyMax) {
+            double temp=tyMin;
+            tyMin=tyMax;
+            tyMax=temp;
+        }
+        if((tMin>tyMax)||(tyMin > tMax))
+            return false;
+        if (tyMin > tMin)
+            tMin=tyMin;
+        if (tyMax< tMax)
+            tMax=tyMax;
+        double tzMin = (box.minimums.getZ()-p0.getZ()) / dir.getZ();
+        double tzMax = (box.maximums.getZ()-p0.getZ()) / dir.getZ();
+        if (tzMin > tzMax){
+            double temp = tzMin;
+            tzMin =tzMax;
+            tzMax = temp;
+        }
+        if ((tMin > tzMax)||(tzMin > tMax))
+            return false;
+        if(tzMin>tMin)
+            tMin = tzMin;
+        if (tzMax<tMax)
+            tMax = tzMax;
+        return true;
+    }
 
-    }
-
     public static class GeoPoint{
         public Geometry geometry;
         public Point point;
@@ -106,6 +110,8 @@
     }
 
     public final List<GeoPoint> findGeoIntersections(Ray ray) throws IllegalAccessException {
+        if(bvhIsOn && !isIntersectingBoundingBox(ray))
+            return null;
         return findGeoIntersections(ray, Double.POSITIVE_INFINITY);
     }
     public final List<GeoPoint> findGeoIntersections(Ray ray, double maxDistance) throws IllegalAccessException {
Index: src/geometries/Polygon.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package geometries;\r\n\r\nimport static primitives.Util.alignZero;\r\nimport static primitives.Util.isZero;\r\n\r\nimport java.util.List;\r\nimport java.util.OptionalDouble;\r\n\r\nimport primitives.Point;\r\nimport primitives.Ray;\r\nimport primitives.Vector;\r\n\r\n/** Polygon class represents two-dimensional polygon in 3D Cartesian coordinate\r\n * system\r\n * @author Dan */\r\npublic class Polygon extends Geometry {\r\n   /** List of polygon's vertices */\r\n   protected final List<Point> vertices;\r\n   /** Associated plane in which the polygon lays */\r\n   protected final Plane       plane;\r\n   private final int           size;\r\n\r\n   /** Polygon constructor based on vertices list. The list must be ordered by edge\r\n    * path. The polygon must be convex.\r\n    * @param  vertices                 list of vertices according to their order by\r\n    *                                  edge path\r\n    * @throws IllegalArgumentException in any case of illegal combination of\r\n    *                                  vertices:\r\n    *                                  <ul>\r\n    *                                  <li>Less than 3 vertices</li>\r\n    *                                  <li>Consequent vertices are in the same\r\n    *                                  point\r\n    *                                  <li>The vertices are not in the same\r\n    *                                  plane</li>\r\n    *                                  <li>The order of vertices is not according\r\n    *                                  to edge path</li>\r\n    *                                  <li>Three consequent vertices lay in the\r\n    *                                  same line (180&#176; angle between two\r\n    *                                  consequent edges)\r\n    *                                  <li>The polygon is concave (not convex)</li>\r\n    *                                  </ul>\r\n    */\r\n   public Polygon(Point... vertices) throws IllegalAccessException {\r\n      if (vertices.length < 3)\r\n         throw new IllegalArgumentException(\"A polygon can't have less than 3 vertices\");\r\n      this.vertices = List.of(vertices);\r\n      size          = vertices.length;\r\n\r\n      // Generate the plane according to the first three vertices and associate the\r\n      // polygon with this plane.\r\n      // The plane holds the invariant normal (orthogonal unit) vector to the polygon\r\n      plane         = new Plane(vertices[0], vertices[1], vertices[2]);\r\n      if (size == 3) return; // no need for more tests for a Triangle\r\n\r\n      Vector  n        = plane.getNormal();\r\n      // Subtracting any subsequent points will throw an IllegalArgumentException\r\n      // because of Zero Vector if they are in the same point\r\n      Vector  edge1    = vertices[vertices.length - 1].subtract(vertices[vertices.length - 2]);\r\n      Vector  edge2    = vertices[0].subtract(vertices[vertices.length - 1]);\r\n\r\n      // Cross Product of any subsequent edges will throw an IllegalArgumentException\r\n      // because of Zero Vector if they connect three vertices that lay in the same\r\n      // line.\r\n      // Generate the direction of the polygon according to the angle between last and\r\n      // first edge being less than 180 deg. It is hold by the sign of its dot product\r\n      // with\r\n      // the normal. If all the rest consequent edges will generate the same sign -\r\n      // the\r\n      // polygon is convex (\"kamur\" in Hebrew).\r\n      boolean positive = edge1.crossProduct(edge2).dotProduct(n) > 0;\r\n      for (var i = 1; i < vertices.length; ++i) {\r\n         // Test that the point is in the same plane as calculated originally\r\n         if (!isZero(vertices[i].subtract(vertices[0]).dotProduct(n)))\r\n            throw new IllegalArgumentException(\"All vertices of a polygon must lay in the same plane\");\r\n         // Test the consequent edges have\r\n         edge1 = edge2;\r\n         edge2 = vertices[i].subtract(vertices[i - 1]);\r\n         if (positive != (edge1.crossProduct(edge2).dotProduct(n) > 0))\r\n            throw new IllegalArgumentException(\"All vertices must be ordered and the polygon must be convex\");\r\n      }\r\n      if (bvhIsOn)createBoundingBox();\r\n\r\n   }\r\n\r\n   @Override\r\n   public Vector getNormal(Point point) { return plane.getNormal(); }\r\n   protected  void createBoundingBox() throws IllegalAccessException{\r\n      double minX = vertices.stream().mapToDouble(Point::getX).min().orElse(Double.POSITIVE_INFINITY);\r\n      double maxX = vertices.stream().mapToDouble(Point::getX).max().orElse(Double.NEGATIVE_INFINITY);\r\n\r\n      double minY = vertices.stream().mapToDouble(Point::getY).min().orElse(Double.POSITIVE_INFINITY);\r\n      double maxY = vertices.stream().mapToDouble(Point::getY).max().orElse(Double.NEGATIVE_INFINITY);\r\n\r\n      double minZ = vertices.stream().mapToDouble(Point::getZ).min().orElse(Double.POSITIVE_INFINITY);\r\n      double maxZ = vertices.stream().mapToDouble(Point::getZ).max().orElse(Double.NEGATIVE_INFINITY);\r\n\r\n      box=new AABB(new Point(minX,minY,minZ),new Point(maxX,maxY,maxZ));\r\n   }\r\n\r\n   /**\r\n    * find intersection between ray and polygon\r\n    * @param ray ray towards the plane\r\n    * @return  immutable list of one intersection point as  {@link GeoPoint} object\r\n    */\r\n   @Override\r\n   protected List<GeoPoint> findGeoIntersectionsHelper(Ray ray, double maxDistance) throws IllegalAccessException {\r\n      createBoundingBox();\r\n      if(!box.isIntersectingBoundingBox(ray)) return null;\r\n      // find intersection between ray and plane containing the polygon\r\n      List<GeoPoint> points=plane.findGeoIntersections(ray,maxDistance);\r\n      // no intersections with plane , ray does not intersect polygon\r\n      if (points==null)\r\n         return null;\r\n\r\n      //check that intersection point is closer to ray origin than\r\n      // max distance parameter\r\n      double distance = points.get(0).point.distance(ray.getP0());\r\n      if(alignZero(distance-maxDistance)>0)\r\n         return null;\r\n\r\n      // check that intersection point is within polygon boundary\r\n      // by  creating vectors from ray origin to each pair of adjacent vertices in polygon\r\n      // if the sign of the dot product of the vertices for all pairs is matching. ray intersects polygon\r\n      Point p0 = ray.getP0();\r\n      Vector direction = ray.getDir();\r\n\r\n      // get vector from ray origin to first vertices of polygon\r\n      Vector v1 = vertices.get(0).subtract(p0);\r\n\r\n      // get vector from ray origin to adjacent vertices of previous vertices\r\n      Vector v2 = vertices.get(1).subtract(p0);\r\n\r\n      // get sign of dot product of the vectors\r\n      double sign = direction.dotProduct(v2.crossProduct(v1));\r\n\r\n      // if dot product == 0 ray does not intersect polygon\r\n      if (isZero(sign))\r\n         return null;\r\n\r\n      // flag setting the sign of the dot product of the first pair of vertices\r\n      boolean checkSign = sign > 0;\r\n\r\n      // loop over all adjacent vertices in polygon and check sign of dot-product for constructed\r\n      // vectors\r\n      for (int i = vertices.size() - 1; i > 0; --i) {\r\n         v2 = v1;\r\n         v1 = vertices.get(i).subtract(p0);\r\n         sign = alignZero(direction.dotProduct(v2.crossProduct(v1)));\r\n\r\n         // vectors constructed are orthogonal , ray does not intersect polygon\r\n         if (isZero(sign))\r\n            return null;\r\n\r\n         //  sign is not matching\r\n         if (checkSign != (sign > 0))\r\n            return null;\r\n      }\r\n\r\n      // all signs were matching return the intersection point\r\n      return List.of(new GeoPoint(this,points.get(0).point));\r\n   }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/geometries/Polygon.java b/src/geometries/Polygon.java
--- a/src/geometries/Polygon.java	
+++ b/src/geometries/Polygon.java	
@@ -104,8 +104,6 @@
     */
    @Override
    protected List<GeoPoint> findGeoIntersectionsHelper(Ray ray, double maxDistance) throws IllegalAccessException {
-      createBoundingBox();
-      if(!box.isIntersectingBoundingBox(ray)) return null;
       // find intersection between ray and plane containing the polygon
       List<GeoPoint> points=plane.findGeoIntersections(ray,maxDistance);
       // no intersections with plane , ray does not intersect polygon
Index: src/geometries/Plane.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package geometries;\r\n\r\n\r\nimport primitives.Point;\r\nimport primitives.Ray;\r\nimport primitives.Vector;\r\n\r\nimport java.util.List;\r\n\r\nimport static primitives.Util.alignZero;\r\nimport static primitives.Util.isZero;\r\n\r\n/**\r\n * The Plane class represents a plane in 3D space.\r\n */\r\npublic class Plane extends Geometry {\r\n\r\n    private final Point p0;\r\n    private final Vector normal;\r\n\r\n    /**\r\n     * Constructs a plane from three points on the plane.\r\n     *\r\n     * @param p1 a point on the plane\r\n     * @param p2 a point on the plane\r\n     * @param p3 a point on the plane\r\n     */\r\n\r\n    public Plane(Point p1, Point p2, Point p3) throws IllegalAccessException {\r\n        // check that all three points are different\r\n\r\n        if (p1.equals(p2) || p1.equals(p3) || p2.equals(p3))\r\n            throw new IllegalArgumentException(\"points must be different\");\r\n\r\n        p0 = p1;\r\n\r\n        // generate two vectors from the three points\r\n        Vector U = p2.subtract(p1);\r\n        Vector V = p3.subtract(p1);\r\n        Vector N;\r\n\r\n        // attempt to get cross product vector of the above vectors\r\n        // if exception is thrown all three points are\r\n        // on same line and cannot represent a plane\r\n        try {\r\n            N = U.crossProduct(V);\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(\"The three points are on same line, can not represent a Plane\");\r\n        }\r\n        // set plane's normal vector to normalized result of cross product vector\r\n        normal = N.normalize();\r\n    }\r\n\r\n\r\n    /**\r\n     * Constructs a plane from a point on the plane and the plane's normal vector.\r\n     *\r\n     * @param p a point on the plane\r\n     * @param v the normal vector of the plane\r\n     * @throws IllegalAccessException if the vector is the zero vector\r\n     */\r\n    public Plane(Point p, Vector v) throws IllegalAccessException {\r\n        p0 = p;\r\n        normal = v.normalize();\r\n    }\r\n\r\n    /**\r\n     * Returns the normal vector of the plane at a given point.\r\n     *\r\n     * @param p a point on the plane (unused)\r\n     * @return the normal vector of the plane\r\n     */\r\n    @Override\r\n    public Vector getNormal(Point p) {\r\n        return normal;\r\n    }\r\n\r\n    /**\r\n     * Returns the base point of the plane.\r\n     *\r\n     * @return the base point of the plane\r\n     */\r\n    public Point getP0() {\r\n        return p0;\r\n    }\r\n\r\n    /**\r\n     * Returns the normal vector of the plane.\r\n     *\r\n     * @return the normal vector of the plane\r\n     */\r\n    public Vector getNormal() {\r\n        return normal;\r\n    }\r\n\r\n    /**\r\n     * find intersection between ray and plane\r\n     * @param ray ray towards the plane\r\n     * @return  immutable list of one intersection point as  {@link GeoPoint} object\r\n     */\r\n\r\n    protected List<GeoPoint> findGeoIntersectionsHelper(Ray ray,double maxDistance) throws IllegalAccessException {\r\n        Point P0 = ray.getP0();\r\n        Vector v = ray.getDir();\r\n        Vector n = normal;\r\n\r\n        // ray cannot start at plane's origin point\r\n        if(p0.equals(P0))\r\n            return null;\r\n\r\n        // ray points -> P = p0 + t*v_ (v_ = direction vector)\r\n        // points on plane  if normal vector dot product with vector from\r\n        // origin point to proposed point == 0\r\n        // glossary:  (n,v) = dot product between vectors n,v\r\n        // isolating t ,( scaling factor for ray's direction vector ) ->\r\n        // t = (normal vector, vector from origin to point)/ (normal vector, ray vector)\r\n        // if t is positive ray intersects plane\r\n        double nv = n.dotProduct(v);\r\n\r\n        // ray direction cannot be parallel to plane orientation\r\n        if (isZero(nv)){\r\n            return null;\r\n        }\r\n\r\n        // vector from origin to point\r\n        Vector Q_P0 = p0.subtract(P0);\r\n\r\n        double nQMinusP0 = alignZero(n.dotProduct(Q_P0));\r\n\r\n        //t should not be equal to 0\r\n        if( isZero(nQMinusP0)){\r\n            return null;\r\n        }\r\n        // scaling factor for ray , if value is positive\r\n        // ray intersects plane\r\n        double t = alignZero(nQMinusP0 / nv);\r\n        if (t > 0 && alignZero(t-maxDistance) <= 0){\r\n            //return immutable List\r\n            return List.of(new GeoPoint(this, ray.getPoint(t)));\r\n        }\r\n        // no intersection point  - ray and plane in opposite  direction\r\n        return null;\r\n    }\r\n    protected  void createBoundingBox() throws IllegalAccessException{\r\n        box=null;\r\n    }\r\n//@Override\r\n//protected List<GeoPoint> findGeoIntersectionsHelper(Ray ray) throws IllegalAccessException {\r\n//    Point p0 = ray.getP0();\r\n//    ray.getDir().normalize();\r\n//    double nv = this.normal.dotProduct(ray.getDir());\r\n//    if (isZero(nv))//there is not any intersection\r\n//        return null;\r\n//    double t = normal.scale(-1).dotProduct(p0.subtract(p0).scale(1 / nv));\r\n//    if (isZero(t)) {//The  first point of the ray in the plan(0 point)\r\n//        return null;\r\n//    }\r\n//    if (t < 0) {//The first point of the ray in the plain(o point)\r\n//        return null;\r\n//    } else {\r\n//        ArrayList<GeoPoint> arrayList = new ArrayList<GeoPoint>();\r\n//        Point point = p0.add(ray.getDir().scale(t));\r\n//        arrayList.add(new GeoPoint(this, point));\r\n//        return arrayList;\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/geometries/Plane.java b/src/geometries/Plane.java
--- a/src/geometries/Plane.java	
+++ b/src/geometries/Plane.java	
@@ -95,17 +95,18 @@
 
     /**
      * find intersection between ray and plane
+     *
      * @param ray ray towards the plane
-     * @return  immutable list of one intersection point as  {@link GeoPoint} object
+     * @return immutable list of one intersection point as  {@link GeoPoint} object
      */
 
-    protected List<GeoPoint> findGeoIntersectionsHelper(Ray ray,double maxDistance) throws IllegalAccessException {
+    protected List<GeoPoint> findGeoIntersectionsHelper(Ray ray, double maxDistance) throws IllegalAccessException {
         Point P0 = ray.getP0();
         Vector v = ray.getDir();
         Vector n = normal;
 
         // ray cannot start at plane's origin point
-        if(p0.equals(P0))
+        if (p0.equals(P0))
             return null;
 
         // ray points -> P = p0 + t*v_ (v_ = direction vector)
@@ -118,7 +119,7 @@
         double nv = n.dotProduct(v);
 
         // ray direction cannot be parallel to plane orientation
-        if (isZero(nv)){
+        if (isZero(nv)) {
             return null;
         }
 
@@ -128,39 +129,21 @@
         double nQMinusP0 = alignZero(n.dotProduct(Q_P0));
 
         //t should not be equal to 0
-        if( isZero(nQMinusP0)){
+        if (isZero(nQMinusP0)) {
             return null;
         }
         // scaling factor for ray , if value is positive
         // ray intersects plane
         double t = alignZero(nQMinusP0 / nv);
-        if (t > 0 && alignZero(t-maxDistance) <= 0){
+        if (t > 0 && alignZero(t - maxDistance) <= 0) {
             //return immutable List
             return List.of(new GeoPoint(this, ray.getPoint(t)));
         }
         // no intersection point  - ray and plane in opposite  direction
         return null;
     }
-    protected  void createBoundingBox() throws IllegalAccessException{
-        box=null;
+
+    protected void createBoundingBox() throws IllegalAccessException {
+        box = null;
     }
-//@Override
-//protected List<GeoPoint> findGeoIntersectionsHelper(Ray ray) throws IllegalAccessException {
-//    Point p0 = ray.getP0();
-//    ray.getDir().normalize();
-//    double nv = this.normal.dotProduct(ray.getDir());
-//    if (isZero(nv))//there is not any intersection
-//        return null;
-//    double t = normal.scale(-1).dotProduct(p0.subtract(p0).scale(1 / nv));
-//    if (isZero(t)) {//The  first point of the ray in the plan(0 point)
-//        return null;
-//    }
-//    if (t < 0) {//The first point of the ray in the plain(o point)
-//        return null;
-//    } else {
-//        ArrayList<GeoPoint> arrayList = new ArrayList<GeoPoint>();
-//        Point point = p0.add(ray.getDir().scale(t));
-//        arrayList.add(new GeoPoint(this, point));
-//        return arrayList;
-//    }
 }
Index: src/geometries/Sphere.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package geometries;\r\n\r\nimport primitives.Point;\r\nimport primitives.Ray;\r\nimport primitives.Vector;\r\n\r\nimport java.util.List;\r\n\r\nimport static primitives.Util.alignZero;\r\n\r\n/**\r\n * The Sphere class represents a sphere in 3D space.\r\n */\r\npublic class Sphere extends RadialGeometry {\r\n\r\n    private final Point center;\r\n\r\n    /**\r\n     * Constructs a sphere with the given radius and center point.\r\n     *\r\n     * @param radius the radius of the sphere\r\n     * @param center the center point of the sphere\r\n     */\r\n    public Sphere(double radius, Point center) {\r\n        super(radius);\r\n        this.center = center;\r\n    }\r\n\r\n    /**\r\n     * Returns the center point of the sphere.\r\n     *\r\n     * @return the center point of the sphere\r\n     */\r\n    public Point getCenter() {\r\n        return center;\r\n    }\r\n\r\n    /**\r\n     * Returns the normal vector to the sphere at a given point.\r\n     *\r\n     * @param p a point on the sphere (unused)\r\n     * @return the normal vector to the sphere\r\n     */\r\n    @Override\r\n    public Vector getNormal(Point p) throws IllegalAccessException {\r\n        return p.subtract(this.center).normalize();\r\n    }\r\n\r\n\r\n    //    public List<GeoPoint> findGeoIntersectionsHelper(Ray ray) throws IllegalAccessException {\r\n//        Point p0 = ray.getP0();\r\n//        Vector v = ray.getDir();\r\n//        Vector u;\r\n//        try {\r\n//            u = center.subtract(p0);\r\n//        } catch (IllegalAccessException e) {\r\n//            return null;// לעבור ולתקן לא נכון!!\r\n//        }\r\n//        double tm = alignZero(v.dotProduct(u));\r\n//        double dSquares = tm == 0 ? u.lengthSquared() : u.lengthSquared() - tm * tm;\r\n//        double thSquared = alignZero(radius * radius - dSquares);\r\n//        if (thSquared <= 0) {\r\n//            return null;\r\n//        }\r\n//        double th = alignZero(Math.sqrt(thSquared));\r\n//        if (th == 0) {\r\n//            return null;\r\n//        }\r\n//        double t1 = alignZero(tm - th);\r\n//        double t2 = alignZero(tm + th);\r\n//        if (t1 <= 0 && t2 <= 0) {\r\n//            return null;\r\n//        }\r\n//        if (t1 > 0 && t2 > 0) {\r\n//            return List.of(ray.getP0().add(ray.getDir().scale(t1)), ray.getP0().add(ray.getDir().scale(t2)));//לא נכון חייבת לחזור!!\r\n//        }\r\n//        if (t1 > 0) {\r\n//            return List.of(ray.getP0().add(ray.getDir().scale(t1)));//לא נכון לבדוק שובב\r\n//        } else\r\n//            return List.of(ray.getP0().add(ray.getDir().scale(t2)));// לא נכון לבדוק שוב\r\n//    }\r\n    /**\r\n     * find intersection points between ray and sphere\r\n     * @param ray ray towards the object\r\n     * @return immutable list containing 0/1/2 intersection points as {@link GeoPoint}s objects\r\n     */\r\n    @Override\r\n    protected List<GeoPoint> findGeoIntersectionsHelper(Ray ray,double maxDistance) throws IllegalAccessException {\r\n        Point P0 = ray.getP0();\r\n        Vector v = ray.getDir();\r\n\r\n        // ray starts at center point of sphere\r\n        // return point on surface in direction of ray\r\n        if (P0.equals(center)) {\r\n            return List.of( new GeoPoint(this,ray.getPoint(radius)));\r\n        }\r\n\r\n        // vector from ray origin to center point\r\n        Vector U = center.subtract(P0);\r\n\r\n        // tm = U's projection on ray's vector\r\n        double tm = alignZero(v.dotProduct(U));\r\n        // d between u and ray (at center point)\r\n        double d = alignZero(Math.sqrt(U.lengthSquared() - tm * tm));\r\n\r\n        //distance from center to ray is larger than the radius\r\n        // no intersections : the ray direction is above the sphere\r\n        if (d >= radius) {\r\n            return null;\r\n        }\r\n\r\n        // th = distance from ray intersection point to point\r\n        // reached by scaling ray vector by tm\r\n        double th = alignZero(Math.sqrt(radius * radius - d * d));\r\n        // t1 = size of distance from first intersection point to\r\n        //  point reached by ray scaled by tm\r\n        double t1 = alignZero(tm - th);\r\n        // t2 = size of distance from point reached by ray scaled by tm\r\n        // to second intersection point\r\n        double t2 = alignZero(tm + th);\r\n\r\n        // check that distance from ray origin to intersection points\r\n        // is smaller than max distance parameter set by user\r\n        boolean distanceT1 = alignZero(t1-maxDistance) <= 0;\r\n        boolean distanceT2 = alignZero(t2-maxDistance) <= 0;\r\n\r\n        // ray constructed outside sphere\r\n        // two intersection points\r\n        if (t1 > 0 && t2 > 0 && distanceT1 && distanceT2) {\r\n            Point P1 =ray.getPoint(t1);\r\n            Point P2 =ray.getPoint(t2);\r\n            return List.of(new GeoPoint(this,P1), new GeoPoint (this,P2));\r\n        }\r\n        // ray constructed inside sphere and intersect in back direction\r\n        if (t1 > 0 && distanceT1) {\r\n            Point P1 =ray.getPoint(t1);\r\n            return List.of(new GeoPoint(this,P1));\r\n        }\r\n        // ray constructed inside sphere and intersect in forward direction\r\n        if (t2 > 0 && distanceT2) {\r\n            Point P2 =ray.getPoint(t2);\r\n            return List.of(new GeoPoint (this,P2));\r\n        }\r\n        // no intersection points found - assurance return\r\n        // code should not be reaching this point\r\n        return null;\r\n\r\n    }\r\n    protected  void createBoundingBox() throws IllegalAccessException{\r\n        box=new AABB(center.add(new Vector(-radius,-radius,-radius)),center.add(new Vector(radius,radius,radius)));\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/geometries/Sphere.java b/src/geometries/Sphere.java
--- a/src/geometries/Sphere.java	
+++ b/src/geometries/Sphere.java	
@@ -46,39 +46,6 @@
         return p.subtract(this.center).normalize();
     }
 
-
-    //    public List<GeoPoint> findGeoIntersectionsHelper(Ray ray) throws IllegalAccessException {
-//        Point p0 = ray.getP0();
-//        Vector v = ray.getDir();
-//        Vector u;
-//        try {
-//            u = center.subtract(p0);
-//        } catch (IllegalAccessException e) {
-//            return null;// לעבור ולתקן לא נכון!!
-//        }
-//        double tm = alignZero(v.dotProduct(u));
-//        double dSquares = tm == 0 ? u.lengthSquared() : u.lengthSquared() - tm * tm;
-//        double thSquared = alignZero(radius * radius - dSquares);
-//        if (thSquared <= 0) {
-//            return null;
-//        }
-//        double th = alignZero(Math.sqrt(thSquared));
-//        if (th == 0) {
-//            return null;
-//        }
-//        double t1 = alignZero(tm - th);
-//        double t2 = alignZero(tm + th);
-//        if (t1 <= 0 && t2 <= 0) {
-//            return null;
-//        }
-//        if (t1 > 0 && t2 > 0) {
-//            return List.of(ray.getP0().add(ray.getDir().scale(t1)), ray.getP0().add(ray.getDir().scale(t2)));//לא נכון חייבת לחזור!!
-//        }
-//        if (t1 > 0) {
-//            return List.of(ray.getP0().add(ray.getDir().scale(t1)));//לא נכון לבדוק שובב
-//        } else
-//            return List.of(ray.getP0().add(ray.getDir().scale(t2)));// לא נכון לבדוק שוב
-//    }
     /**
      * find intersection points between ray and sphere
      * @param ray ray towards the object
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"56e13de4-d6b6-40fc-8784-02a4db7270a4\" name=\"Changes\" comment=\"PRO7- picture 1\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/geometries/Geometries.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/geometries/Geometries.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/geometries/Intersectable.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/geometries/Intersectable.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/geometries/Plane.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/geometries/Plane.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/geometries/Polygon.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/geometries/Polygon.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/geometries/Sphere.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/geometries/Sphere.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/geometries/Triangle.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/geometries/Triangle.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/geometries/Tube.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/geometries/Tube.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/unittests/pictures/Pictures.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/unittests/pictures/Pictures.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/unittests/pictures/Snow_man.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/unittests/pictures/Snow_man.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"JUnit5 Test Class\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2MTAu3KBuierhfHiNK1MCuunvIb\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/משפחת מקסימוב/IdeaProjects/ISE5783_9693_3069/unittests/geometries&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"scene\" />\r\n      <recent name=\"geometries\" />\r\n      <recent name=\"primitives\" />\r\n    </key>\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\משפחת מקסימוב\\IdeaProjects\\ISE5783_9693_3069\\unittests\\geometries\" />\r\n      <recent name=\"C:\\Users\\משפחת מקסימוב\\IdeaProjects\\ISE5783_9693_3069\\unittests\\renderer\" />\r\n      <recent name=\"C:\\Users\\משפחת מקסימוב\\IdeaProjects\\ISE5783_9693_3069\\unittests\\lighting\" />\r\n      <recent name=\"C:\\Users\\משפחת מקסימוב\\IdeaProjects\\ISE5783_9693_3069\\unitTests\\geometries\" />\r\n      <recent name=\"C:\\Users\\משפחת מקסימוב\\IdeaProjects\\ISE5783_9693_3069\\src\\test\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.Recents.Supers\">\r\n      <recent name=\"\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\משפחת מקסימוב\\IdeaProjects\\ISE5783_9693_3069\\unittests\\renderer\" />\r\n      <recent name=\"C:\\Users\\משפחת מקסימוב\\IdeaProjects\\ISE5783_9693_3069\\unittests\\geometries\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.RecentsKey\">\r\n      <recent name=\"primitives\" />\r\n      <recent name=\"geometries\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"JUnit.Pictures\">\r\n    <configuration name=\"Pictures\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ISE5783_9693_3069\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"pictures.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"pictures\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"pictures.Pictures\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Pictures.front\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ISE5783_9693_3069\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"pictures.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"pictures\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"pictures.Pictures\" />\r\n      <option name=\"METHOD_NAME\" value=\"front\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Pictures.halfSide\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ISE5783_9693_3069\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"pictures.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"pictures\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"pictures.Pictures\" />\r\n      <option name=\"METHOD_NAME\" value=\"halfSide\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Pictures.otherside\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ISE5783_9693_3069\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"pictures.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"pictures\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"pictures.Pictures\" />\r\n      <option name=\"METHOD_NAME\" value=\"otherside\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"RenderTests.basicRenderTwoColorTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ISE5783_9693_3069\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"renderer.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"renderer\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"renderer.RenderTests\" />\r\n      <option name=\"METHOD_NAME\" value=\"basicRenderTwoColorTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.Pictures\" />\r\n        <item itemvalue=\"JUnit.Pictures.halfSide\" />\r\n        <item itemvalue=\"JUnit.Pictures.front\" />\r\n        <item itemvalue=\"JUnit.RenderTests.basicRenderTwoColorTest\" />\r\n        <item itemvalue=\"JUnit.Pictures.otherside\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"56e13de4-d6b6-40fc-8784-02a4db7270a4\" name=\"Changes\" comment=\"\" />\r\n      <created>1677781421735</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1677781421735</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00001\" summary=\"EX-0-first\">\r\n      <created>1679397112988</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1679397112988</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E00002\" summary=\"EX-2-first\">\r\n      <created>1679428034627</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E00002\" />\r\n      <updated>1679428034628</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00003\" summary=\"EX-1-with javadoc\">\r\n      <created>1681415518169</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1681415518169</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00004\" summary=\"EX-1-with javadoc\">\r\n      <created>1681467201958</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1681467201958</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00005\" summary=\"Ex2\">\r\n      <created>1681588212150</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1681588212150</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00006\" summary=\"Ex3\">\r\n      <created>1682194445651</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1682194445651</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00007\" summary=\"Ex3\">\r\n      <created>1682602415731</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1682602415731</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00008\" summary=\"Ex3\">\r\n      <created>1682616063602</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1682616063602</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E00009\" summary=\"finish PRO 4\">\r\n      <created>1682689830483</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E00009\" />\r\n      <updated>1682689830483</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E00010\" summary=\"PRO 5- start\">\r\n      <created>1682844281482</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E00010\" />\r\n      <updated>1682844281482</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E00011\" summary=\"PRO 5- start new\">\r\n      <created>1682844436074</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E00011\" />\r\n      <updated>1682844436074</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E00012\" summary=\"PRO 5-\">\r\n      <created>1683290372688</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E00012\" />\r\n      <updated>1683290372688</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00013\" summary=\"PRO 5-\">\r\n      <created>1684687589007</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1684687589007</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00014\" summary=\"PRO 5-\">\r\n      <created>1684687604004</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1684687604004</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00015\" summary=\"PRO 6\">\r\n      <created>1684871031198</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1684871031198</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00016\" summary=\"PRO 6-5 tests work\">\r\n      <created>1684945012196</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1684945012196</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00017\" summary=\"PRO 6-5 tests work\">\r\n      <created>1684958683441</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1684958683441</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00018\" summary=\"PRO 6-final\">\r\n      <created>1686076582478</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1686076582478</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00019\" summary=\"PRO 7-some of the pictures works fine\">\r\n      <created>1686141347291</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1686141347291</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00020\" summary=\"PRO 7.1\">\r\n      <created>1686146382081</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1686146382082</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00021\" summary=\"PRO7-stated step 2\">\r\n      <created>1686158510391</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1686158510391</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00022\" summary=\"PRO7-stated step 2\">\r\n      <created>1686562746504</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1686562746504</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00023\" summary=\"PRO7- 2\">\r\n      <created>1686588801171</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1686588801171</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00024\" summary=\"PRO7- added ReflectionRefractionTests\">\r\n      <created>1686595192779</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1686595192779</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00025\" summary=\"PRO7- added ReflectionRefractionTests\">\r\n      <created>1686648637887</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1686648637887</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00026\" summary=\"PRO7- added ReflectionRefractionTests\">\r\n      <created>1686924503953</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1686924503953</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00027\" summary=\"PRO7- added ReflectionRefractionTests\">\r\n      <created>1687266433935</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1687266433935</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00028\" summary=\"PRO7- added ReflectionRefractionTests\">\r\n      <created>1687355023924</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1687355023924</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00029\" summary=\"PRO7- added ReflectionRefractionTests\">\r\n      <created>1687385264108</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1687385264108</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00030\" summary=\"PRO7- added ReflectionRefractionTests\">\r\n      <created>1687440131886</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1687440131886</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00031\" summary=\"PRO7- picture\">\r\n      <created>1687444128944</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1687444128944</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00032\" summary=\"PRO7- picture 1\">\r\n      <created>1687652175241</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1687652175241</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00033\" summary=\"PRO7- picture 1\">\r\n      <created>1687652220510</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1687652220510</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00034\" summary=\"PRO7- picture 1\">\r\n      <created>1687702579956</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1687702579956</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00035\" summary=\"PRO7- picture 1\">\r\n      <created>1687766145913</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1687766145913</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E00036\" summary=\"mini pro1\">\r\n      <created>1687781869109</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E00036\" />\r\n      <updated>1687781869109</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E-00037\" summary=\"PRO7- picture 1\">\r\n      <created>1687811054567</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\u200E\" />\r\n      <updated>1687811054567</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"38\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.History.Properties\">\r\n    <option name=\"SHOW_OTHER_BRANCHES\" value=\"true\" />\r\n    <option name=\"COLUMN_ID_ORDER\">\r\n      <list>\r\n        <option value=\"Default.Root\" />\r\n        <option value=\"Default.Author\" />\r\n        <option value=\"Default.Date\" />\r\n        <option value=\"Default.Subject\" />\r\n        <option value=\"Space.CommitStatus\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"EX-0-first\" />\r\n    <MESSAGE value=\"EX-2-first\" />\r\n    <MESSAGE value=\"EX-1-with javadoc\" />\r\n    <MESSAGE value=\"tests for vector and point\" />\r\n    <MESSAGE value=\"Ex2\" />\r\n    <MESSAGE value=\"Ex3\" />\r\n    <MESSAGE value=\"finish PRO 4\" />\r\n    <MESSAGE value=\"PRO 5\" />\r\n    <MESSAGE value=\"PRO 5- start\" />\r\n    <MESSAGE value=\"PRO 5- start new\" />\r\n    <MESSAGE value=\"PRO 5-\" />\r\n    <MESSAGE value=\"PRO 6\" />\r\n    <MESSAGE value=\"PRO 6-5 tests work\" />\r\n    <MESSAGE value=\"PRO 6-final\" />\r\n    <MESSAGE value=\"PRO 7-some of the pictures works fine\" />\r\n    <MESSAGE value=\"PRO 7.1\" />\r\n    <MESSAGE value=\"PRO7-stated step 2\" />\r\n    <MESSAGE value=\"PRO7- 2\" />\r\n    <MESSAGE value=\"PRO7- added ReflectionRefractionTests\" />\r\n    <MESSAGE value=\"PRO7- picture\" />\r\n    <MESSAGE value=\"PRO7- picture 1\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"PRO7- picture 1\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/unittests/primitives/RayTest.java</url>\r\n          <line>9</line>\r\n          <option name=\"timeStamp\" value=\"64\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/renderer/RayTracerBasic.java</url>\r\n          <line>72</line>\r\n          <option name=\"timeStamp\" value=\"146\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-method\">\r\n          <url>file://$PROJECT_DIR$/unittests/pictures/Snow_man.java</url>\r\n          <line>20</line>\r\n          <properties class=\"pictures.Snow_man\">\r\n            <option name=\"EMULATED\" value=\"true\" />\r\n            <option name=\"WATCH_EXIT\" value=\"false\" />\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"153\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n    <pin-to-top-manager>\r\n      <pinned-members>\r\n        <PinnedItemInfo parentTag=\"primitives.Double3\" memberName=\"d3\" />\r\n        <PinnedItemInfo parentTag=\"primitives.Double3\" memberName=\"d2\" />\r\n        <PinnedItemInfo parentTag=\"geometries.Triangle\" memberName=\"emission\" />\r\n        <PinnedItemInfo parentTag=\"primitives.Color\" memberName=\"rgb\" />\r\n      </pinned-members>\r\n    </pin-to-top-manager>\r\n    <watches-manager>\r\n      <configuration name=\"JUnit\">\r\n        <watch expression=\"calcColorGLobalEffect(constructRefractedRay(gp, v, n),level, k, material.kT)\" />\r\n        <watch expression=\"calcColor(intersection, ray,MAX_CALC_COLOR_LEVEL,new Double3(MIN_CALC_COLOR_K)\" />\r\n      </configuration>\r\n      <configuration name=\"Application\">\r\n        <watch expression=\"v1.add(v2)\" />\r\n        <watch expression=\"!v1.add(v2).equals(new Vector(-1, -2, -3))\" />\r\n        <watch expression=\"new Vector(-1, -2, -3)\" />\r\n        <watch expression=\"v1.add(v2).equals(new Vector(-1, -2, -3))\" language=\"JAVA\" />\r\n        <watch expression=\"v1.subtract(v2)\" />\r\n        <watch expression=\"new Vector(3, 6, 9)\" />\r\n      </configuration>\r\n    </watches-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/ISE5783_9693_3069$IntegrationTests_CameraSphereIntersections.ic\" NAME=\"IntegrationTests.CameraSphereIntersections Coverage Results\" MODIFIED=\"1682615393927\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n    <SUITE FILE_PATH=\"coverage/ISE5783_9693_3069$Main.ic\" NAME=\"Main Coverage Results\" MODIFIED=\"1679342282667\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>test.*</FILTER>\r\n    </SUITE>\r\n    <SUITE FILE_PATH=\"coverage/ISE5783_9693_3069$LightsTests.ic\" NAME=\"LightsTests Coverage Results\" MODIFIED=\"1684691922031\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>lighting.*</FILTER>\r\n    </SUITE>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -5,6 +5,7 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="56e13de4-d6b6-40fc-8784-02a4db7270a4" name="Changes" comment="PRO7- picture 1">
+      <change afterPath="$PROJECT_DIR$/unittests/pictures/SpotStreetLight.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/geometries/Geometries.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/geometries/Geometries.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/geometries/Intersectable.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/geometries/Intersectable.java" afterDir="false" />
@@ -12,9 +13,17 @@
       <change beforePath="$PROJECT_DIR$/src/geometries/Polygon.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/geometries/Polygon.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/geometries/Sphere.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/geometries/Sphere.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/geometries/Triangle.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/geometries/Triangle.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/geometries/Tube.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/geometries/Tube.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/renderer/Camera.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/renderer/Camera.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/unittests/pictures/Base.java" beforeDir="false" afterPath="$PROJECT_DIR$/unittests/pictures/Base.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/unittests/pictures/Building.java" beforeDir="false" afterPath="$PROJECT_DIR$/unittests/pictures/Building.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/unittests/pictures/Clock.java" beforeDir="false" afterPath="$PROJECT_DIR$/unittests/pictures/Clock.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/unittests/pictures/Cube.java" beforeDir="false" afterPath="$PROJECT_DIR$/unittests/pictures/Cube.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/unittests/pictures/CylinderBase.java" beforeDir="false" afterPath="$PROJECT_DIR$/unittests/pictures/CylinderBase.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/unittests/pictures/Pictures.java" beforeDir="false" afterPath="$PROJECT_DIR$/unittests/pictures/Pictures.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/unittests/pictures/Snow_man.java" beforeDir="false" afterPath="$PROJECT_DIR$/unittests/pictures/Snow_man.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/unittests/pictures/Pyramid.java" beforeDir="false" afterPath="$PROJECT_DIR$/unittests/pictures/Pyramid.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/unittests/pictures/StreetLamp.java" beforeDir="false" afterPath="$PROJECT_DIR$/unittests/pictures/StreetLamp.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/unittests/pictures/TeapotTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/unittests/pictures/TeapotTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/unittests/renderer/RenderTests.java" beforeDir="false" afterPath="$PROJECT_DIR$/unittests/renderer/RenderTests.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -120,34 +129,33 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="Pictures.otherside" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="RenderTests.basicRenderTwoColorTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ISE5783_9693_3069" />
       <extension name="coverage">
         <pattern>
-          <option name="PATTERN" value="pictures.*" />
+          <option name="PATTERN" value="renderer.*" />
           <option name="ENABLED" value="true" />
         </pattern>
       </extension>
-      <option name="PACKAGE_NAME" value="pictures" />
-      <option name="MAIN_CLASS_NAME" value="pictures.Pictures" />
-      <option name="METHOD_NAME" value="otherside" />
+      <option name="PACKAGE_NAME" value="renderer" />
+      <option name="MAIN_CLASS_NAME" value="renderer.RenderTests" />
+      <option name="METHOD_NAME" value="basicRenderTwoColorTest" />
       <option name="TEST_OBJECT" value="method" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <configuration name="RenderTests.basicRenderTwoColorTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+    <configuration name="TeapotTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ISE5783_9693_3069" />
       <extension name="coverage">
         <pattern>
-          <option name="PATTERN" value="renderer.*" />
+          <option name="PATTERN" value="unittests.special.*" />
           <option name="ENABLED" value="true" />
         </pattern>
       </extension>
-      <option name="PACKAGE_NAME" value="renderer" />
-      <option name="MAIN_CLASS_NAME" value="renderer.RenderTests" />
-      <option name="METHOD_NAME" value="basicRenderTwoColorTest" />
-      <option name="TEST_OBJECT" value="method" />
+      <option name="PACKAGE_NAME" value="unittests.special" />
+      <option name="MAIN_CLASS_NAME" value="unittests.special.TeapotTest" />
+      <option name="TEST_OBJECT" value="class" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
@@ -155,10 +163,10 @@
     <recent_temporary>
       <list>
         <item itemvalue="JUnit.Pictures" />
-        <item itemvalue="JUnit.Pictures.halfSide" />
         <item itemvalue="JUnit.Pictures.front" />
         <item itemvalue="JUnit.RenderTests.basicRenderTwoColorTest" />
-        <item itemvalue="JUnit.Pictures.otherside" />
+        <item itemvalue="JUnit.Pictures.halfSide" />
+        <item itemvalue="JUnit.TeapotTest" />
       </list>
     </recent_temporary>
   </component>
@@ -424,7 +432,14 @@
       <option name="project" value="LOCAL‎" />
       <updated>1687811054567</updated>
     </task>
-    <option name="localTasksCounter" value="38" />
+    <task id="LOCAL‎-00038" summary="PRO7- picture 1">
+      <created>1687890297163</created>
+      <option name="number" value="00038" />
+      <option name="presentableId" value="LOCAL‎-00038" />
+      <option name="project" value="LOCAL‎" />
+      <updated>1687890297163</updated>
+    </task>
+    <option name="localTasksCounter" value="39" />
     <servers />
   </component>
   <component name="Vcs.Log.History.Properties">
Index: src/geometries/Geometries.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package geometries;\r\n\r\nimport primitives.Point;\r\nimport primitives.Ray;\r\nimport primitives.Vector;\r\n\r\n\r\nimport java.util.Arrays;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\n\r\npublic class Geometries extends Intersectable {\r\n    private List<Intersectable> intersectables;\r\n\r\n    public Geometries() {\r\n        intersectables = new LinkedList<Intersectable>();\r\n    }\r\n\r\n    public Geometries(Intersectable... geometry) {\r\n        intersectables = List.of(geometry);\r\n    }\r\n\r\n    public void add(Intersectable... geometries) {\r\n        intersectables.addAll(Arrays.asList(geometries));//check\r\n    }\r\n\r\n\r\n\r\n//    public List<GeoPoint> findGeoIntersectionsHelper(Ray ray) throws IllegalAccessException {\r\n//        List<GeoPoint> Intersections =null;\r\n//        for (Intersectable geometry : intersectables) {\r\n//            var temp = geometry.findGeoIntersections(ray);\r\n//            if (temp != null){\r\n//                if (Intersections == null) Intersections = new LinkedList<>();\r\n//                Intersections.addAll(temp);\r\n//            }\r\n//        }\r\n//        return Intersections;\r\n//    }\r\n    /**\r\n     * find intersection between ray and all geometries in the geometry collection\r\n     * @param ray ray towards the composite of geometries\r\n     * @return  immutable list of intersection points as  {@link GeoPoint} objects\r\n     */\r\n    @Override\r\n    protected List<GeoPoint> findGeoIntersectionsHelper(Ray ray,double maxDistance) throws IllegalAccessException {\r\n        List<GeoPoint> result = null;   // intersection points\r\n\r\n        //for each geometry in intersect-able collection check intersection points\r\n        for (var item: intersectables) {\r\n\r\n            // get intersection point for each specific item, (item can be either geometry/nested composite of geometries)\r\n            List<GeoPoint> itemList = item.findGeoIntersections(ray,maxDistance);\r\n\r\n            // points were found , add to composite's total intersection points list\r\n            if(itemList != null) {\r\n                if(result==null){\r\n                    result= new LinkedList<>();\r\n                }\r\n                result.addAll(itemList);\r\n            }\r\n        }\r\n        // return list of points - null if no intersection points were found\r\n        return result;\r\n\r\n    }\r\n    public void add(List<Triangle> triangles) {\r\n        intersectables.addAll((triangles));\r\n    }\r\n\r\n    protected void createBoundingBox() throws IllegalAccessException {\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/geometries/Geometries.java b/src/geometries/Geometries.java
--- a/src/geometries/Geometries.java	
+++ b/src/geometries/Geometries.java	
@@ -6,37 +6,33 @@
 
 
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 
 public class Geometries extends Intersectable {
-    private List<Intersectable> intersectables;
+    protected List<Intersectable> intersectables;
 
     public Geometries() {
         intersectables = new LinkedList<Intersectable>();
     }
 
     public Geometries(Intersectable... geometry) {
-        intersectables = List.of(geometry);
+        if (bvhIsOn)
+            createBoundingBox();
+        //intersectables = List.of(geometry);
+        intersectables = new LinkedList<>();
+        Collections.addAll(intersectables, geometry);
     }
 
     public void add(Intersectable... geometries) {
-        intersectables.addAll(Arrays.asList(geometries));//check
+        if (bvhIsOn)
+            createBoundingBox();
+        Collections.addAll(intersectables, geometries);
+        //intersectables.addAll(Arrays.asList(geometries));//check
     }
 
 
-
-//    public List<GeoPoint> findGeoIntersectionsHelper(Ray ray) throws IllegalAccessException {
-//        List<GeoPoint> Intersections =null;
-//        for (Intersectable geometry : intersectables) {
-//            var temp = geometry.findGeoIntersections(ray);
-//            if (temp != null){
-//                if (Intersections == null) Intersections = new LinkedList<>();
-//                Intersections.addAll(temp);
-//            }
-//        }
-//        return Intersections;
-//    }
     /**
      * find intersection between ray and all geometries in the geometry collection
      * @param ray ray towards the composite of geometries
@@ -64,11 +60,30 @@
         return result;
 
     }
-    public void add(List<Triangle> triangles) {
-        intersectables.addAll((triangles));
-    }
-
-    protected void createBoundingBox() throws IllegalAccessException {
+    //public void add(List<Triangle> triangles) {
+        //intersectables.addAll((triangles));
+    //}
 
+    @Override
+    public void createBoundingBox() {
+        if (intersectables == null)
+            return;
+        double minX = Double.POSITIVE_INFINITY;
+        double minY = Double.POSITIVE_INFINITY;
+        double minZ = Double.POSITIVE_INFINITY;
+        double maxX = Double.NEGATIVE_INFINITY;
+        double maxY = Double.NEGATIVE_INFINITY;
+        double maxZ = Double.NEGATIVE_INFINITY;
+        for (Intersectable geo : intersectables) {
+            if (geo.box != null) {
+                minX = Math.min(minX, geo.box.minimums.getX());
+                minY = Math.min(minY, geo.box.minimums.getY());
+                minZ = Math.min(minZ, geo.box.minimums.getZ());
+                maxX = Math.max(maxX, geo.box.maximums.getX());
+                maxY = Math.max(maxY, geo.box.maximums.getY());
+                maxZ = Math.max(maxZ, geo.box.maximums.getZ());
+            }
+        }
+        box = new AABB(new Point(minX, minY, minZ), new Point(maxX, maxY, maxZ));
     }
 }
\ No newline at end of file
Index: src/renderer/Camera.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package renderer;\r\n\r\nimport primitives.Color;\r\nimport primitives.Point;\r\nimport primitives.Ray;\r\nimport primitives.Vector;\r\n\r\nimport java.util.*;\r\n\r\nimport java.util.MissingResourceException;\r\n\r\nimport static java.lang.Double.isNaN;\r\nimport static primitives.Util.alignZero;\r\nimport static primitives.Util.isZero;\r\nimport java.util.stream.*;\r\n\r\n/**\r\n * Camera class represents a virtual camera in a 3D scene.\r\n */\r\npublic class Camera {\r\n\r\n\r\n    private Point p0;\r\n\r\n    private Vector vUp;\r\n    private Vector vTo;\r\n    private Vector vRight;\r\n\r\n    private double distance;\r\n    private double width;\r\n    private double height;\r\n\r\n    private int nss;\r\n\r\n\r\n\r\n    private ImageWriter imageWriter;\r\n    private RayTracerBase rayTracerBase;\r\n\r\n    private int threadsCount;\r\n    private PixelManager pixelManager;\r\n    private long printInterval = 0l;\r\n    private int maxLevelAdaptiveSS;\r\n\r\n    /**\r\n     * Constructs a camera with the given position and orientation vectors.\r\n     *\r\n     * @param p0  The position of the camera.\r\n     * @param vUp The up vector of the camera.\r\n     * @param vTo The direction vector the camera is pointing towards.\r\n     * @throws IllegalAccessException If vUp and vTo are not orthogonal.\r\n     */\r\n    public Camera(Point p0, Vector vUp, Vector vTo) throws IllegalAccessException {\r\n        if (!isZero(vTo.dotProduct(vUp))) {\r\n            throw new IllegalArgumentException(\"vTo and vUp are not orthogonal\");\r\n        }\r\n        this.p0 = p0;\r\n\r\n        this.vUp = vUp.normalize();\r\n        this.vTo = vTo.normalize();\r\n\r\n        vRight = this.vTo.crossProduct((this.vUp));\r\n    }\r\n\r\n    /**\r\n     * Sets the size of the view plane.\r\n     *\r\n     * @param width  The width of the view plane.\r\n     * @param height The height of the view plane.\r\n     * @return The camera object itself, for method chaining.\r\n     */\r\n\r\n\r\n    /**\r\n     * Constructs a ray from the camera passing through a specified pixel on the view plane.\r\n     *\r\n     * @param nX The number of pixels in the x-axis of the view plane.\r\n     * @param nY The number of pixels in the y-axis of the view plane.\r\n     * @param j  The x-coordinate of the pixel.\r\n     * @param i  The y-coordinate of the pixel.\r\n     * @return A ray passing through the specified pixel.\r\n     * @throws IllegalAccessException If vUp and vTo are not orthogonal.\r\n     */\r\n    public Ray constructRay(int nX, int nY, int j, int i) throws IllegalAccessException {\r\n        //view plane center point\r\n        Point Pc = p0.add(vTo.scale(distance));\r\n\r\n        //pixels ratios\r\n        double Rx = width / nX;\r\n        double Ry = height / nY;\r\n\r\n        //Pij point[i,j] in view plane coordinates\r\n        Point Pij = Pc;\r\n\r\n        //delta values for moving on the view-plane\r\n        double Xj = (j - (nX - 1) / 2d) * Rx;\r\n        double Yi = -(i - (nY - 1) / 2d) * Ry;\r\n\r\n        if (!isZero(Xj)) {\r\n            Pij = Pij.add(vRight.scale(Xj));\r\n        }\r\n        if (!isZero(Yi)) {\r\n            Pij = Pij.add(vUp.scale(Yi));\r\n        }\r\n\r\n        //vector from camera's eye in the direction of point(i,j) in the view-plane\r\n        Vector Vij = Pij.subtract(p0);\r\n\r\n        return new Ray(p0, Vij);\r\n    }\r\n\r\n    /**\r\n     * Returns the position of the camera.\r\n     *\r\n     * @return The position of the camera.\r\n     */\r\n    public Point getP0() {\r\n        return p0;\r\n    }\r\n    public Camera setThreadsCount(int threadsCount) {\r\n        this.threadsCount = threadsCount;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the viewport size of this Camera object to the specified width and height.\r\n     * The viewport is the area of the screen where the Camera's view is displayed.\r\n     *\r\n     * @param width  the width of the viewport, in pixels\r\n     * @param height the height of the viewport, in pixels\r\n     * @return a reference to this Camera object, for method chaining\r\n     */\r\n\r\n    public Camera setVPSize(double width, double height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the distance of the view plane from the camera.\r\n     *\r\n     * @param distance The distance of the view plane from the camera.\r\n     * @return The camera object itself, for method chaining.\r\n     */\r\n    public Camera setVPDistance(double distance) {\r\n        this.distance = distance;\r\n        return this;\r\n    }\r\n    public Camera setNss(int nss) {\r\n        this.nss = nss;\r\n        return this;\r\n    }\r\n    public Camera setMaxLevelAdaptiveSS(int maxLevelAdaptiveSS) {\r\n        this.maxLevelAdaptiveSS = maxLevelAdaptiveSS;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the {@link ImageWriter} object to be used for rendering the image.\r\n     *\r\n     * @param imageWriter the {@link ImageWriter} object to be used for rendering the image\r\n     * @return a reference to this Camera object, for method chaining\r\n     */\r\n    public Camera setImageWriter(ImageWriter imageWriter) {\r\n        this.imageWriter = imageWriter;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the {@link RayTracerBase} object to be used for casting rays and generating colors.\r\n     *\r\n     * @param rayTracerBase the {@link RayTracerBase} object to be used for casting rays and generating colors\r\n     * @return a reference to this Camera object, for method chaining\r\n     */\r\n    public Camera setRayTracer(RayTracerBase rayTracerBase) {\r\n        this.rayTracerBase = rayTracerBase;\r\n        return this;\r\n    }\r\n\r\n\r\n    /** Cast ray from camera and color a pixel\r\n     * @param nX resolution on X axis (number of pixels in row)\r\n     * @param nY resolution on Y axis (number of pixels in column)\r\n     * @param col pixel's column number (pixel index in row)\r\n     * @param row pixel's row number (pixel index in column)\r\n     */\r\n    private void castRay(int nX, int nY, int col, int row) throws IllegalAccessException {\r\n        imageWriter.writePixel(col, row, rayTracerBase.traceRay(constructRay(nX, nY, col, row)));\r\n        pixelManager.pixelDone();\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Renders the image by tracing rays for each pixel and writing the resulting colors to the {@link ImageWriter} object.\r\n     *\r\n     * @throws IllegalAccessException if any required resources (such as the image writer or ray tracer) are missing or null\r\n     */\r\n\r\n\r\n    /**\r\n     * Prints a grid on the image with the given interval and color.\r\n     *\r\n     * @param interval The interval between grid lines.\r\n     * @param color    The color of the grid lines.\r\n     * @throws MissingResourceException If the imageWriter is null.\r\n     */\r\n    public void printGrid(int interval, Color color) throws MissingResourceException {\r\n        if (imageWriter == null) {\r\n            throw new MissingResourceException(\"imageWriter\", \"Camera\", \"The value of imageWriter is null.\");\r\n        }\r\n        for (int i = 0; i < imageWriter.getNx(); i++) {\r\n            for (int j = 0; j < imageWriter.getNy(); j++) {\r\n                if (i % interval == 0 || j % interval == 0) {\r\n                    imageWriter.writePixel(j, i, color);\r\n                }\r\n            }\r\n        }\r\n        imageWriter.writeToImage();\r\n    }\r\n    public Camera renderImage() throws IllegalAccessException {\r\n        if (imageWriter == null || rayTracerBase == null || isNaN(width) || isNaN(height) || isNaN(distance)) {\r\n            if (imageWriter == null) {\r\n                throw new MissingResourceException(\"missing resources\", \"Camera\", \"imageWriter\");\r\n            }\r\n            if (rayTracerBase == null) {\r\n                throw new MissingResourceException(\"missing resources\", \"Camera\", \"rayTracerBase\");\r\n            }\r\n            if (isNaN(width)) {\r\n                throw new MissingResourceException(\"missing resources\", \"Camera\", \"width\");\r\n            }\r\n            if (isNaN(height)) {\r\n                throw new MissingResourceException(\"missing resources\", \"Camera\", \"height\");\r\n            }\r\n            if (isNaN(distance)) {\r\n                throw new MissingResourceException(\"missing resources\", \"Camera\", \"distance\");\r\n            }\r\n            throw new UnsupportedOperationException();\r\n        }\r\n        int nX = this.imageWriter.getNx();\r\n        int nY = this.imageWriter.getNy();\r\n        pixelManager = new PixelManager(nY, nX,printInterval);//לחזור\r\n        if (threadsCount == 0) {\r\n            for (int i = 0; i < nY; ++i)\r\n                for (int j = 0; j < nX; ++j)\r\n                    castRay(nX, nY, j, i);\r\n        }\r\n        else {\r\n            var threads = new LinkedList<Thread>(); // list of threads\r\n            while (threadsCount-- > 0) // add appropriate number of threads\r\n                threads.add(new Thread(() -> { // add a thread with its code\r\n                    PixelManager.Pixel pixel; // current pixel(row,col)\r\n                    // allocate pixel(row,col) in loop until there are no more pixels\r\n                    while ((pixel = pixelManager.nextPixel()) != null)\r\n                        // cast ray through pixel (and color it – inside castRay)\r\n                    {\r\n                        try {\r\n                            castRay(nX, nY, pixel.col(), pixel.row());\r\n                        } catch (IllegalAccessException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }));\r\n            // start all the threads\r\n            for (var thread : threads) thread.start();\r\n            // wait until all the threads have finished\r\n            try { for (var thread : threads) thread.join(); } catch (InterruptedException ignore) {}\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Writes the image to file using the ImageWriter.\r\n     *\r\n     * @throws MissingResourceException If the imageWriter is null.\r\n     */\r\n    public Camera writeToImage() throws MissingResourceException {\r\n        if (imageWriter == null) {\r\n            throw new MissingResourceException(\"imageWriter\", \"Camera\", \"The value of imageWriter is null.\");\r\n        }\r\n        imageWriter.writeToImage();\r\n        return this;\r\n    }\r\n    private List<Ray> constructBeamSuperSampling(int nX, int nY, int j, int i) throws IllegalAccessException {\r\n        //creating rays\r\n        List<Ray> beam= new LinkedList<>();\r\n        //add the ray of the center of the pixel\r\n        beam.add(constructRay(nX,nY,j,i));\r\n        //calculate the measures of each pixel\r\n        double ry = height / nY;\r\n        double rx = width / nX;\r\n        //find how many steps to go on the x and y coordinates\r\n        double yScale = alignZero((j-nX/2d)*rx+rx/2d);\r\n        double xScale = alignZero((i-nY/2d)*ry+ry/2d);\r\n        //get to the middle of the picture by adding the right distance\r\n        Point pixelCenter = p0.add(vTo.scale(distance));\r\n        if(!isZero(yScale))\r\n            pixelCenter = pixelCenter.add(vRight.scale(yScale));\r\n        if (!isZero(xScale))\r\n            pixelCenter = pixelCenter.add(vUp.scale(-1*xScale));\r\n        Random rand = new Random();\r\n        for (int c = 0; c<nss; c++) {\r\n            //the rand returns randomly true or false and according to it positive or negative random number is chosen\r\n            double dxfactor =  rand.nextBoolean() ? rand.nextDouble() : -1 *\r\n                    rand.nextDouble();\r\n            double dyfactor = rand.nextBoolean() ? rand.nextDouble() : -1 *\r\n                    rand.nextDouble();\r\n            double dx = rx * dxfactor;\r\n            double dy = ry * dyfactor;\r\n            Point randomPoint = pixelCenter;\r\n            if (!isZero(dx))\r\n                randomPoint = randomPoint.add(vRight.scale(dx));\r\n            if (!isZero(dy))\r\n                randomPoint = randomPoint.add(vUp.scale(-1 * dy));\r\n\r\n            beam.add(new Ray(p0, randomPoint.subtract(p0)));\r\n        }\r\n        return beam;\r\n    }\r\n\r\n\r\n    private  Color calcAdaptiveSuperSampling(int nX, int nY, int j, int i, int maxLevel, Color centerColor) throws IllegalAccessException {\r\n        if (maxLevel <= 0 )\r\n            return centerColor;\r\n        Color color = centerColor;\r\n        Ray[] beam = new Ray[]{constructRay(2 * nX, 2 * nY, 2 * j, 2 * i),\r\n                constructRay(2 * nX, 2 * nY, 2 * j, 2 * i + 1),\r\n                constructRay(2 * nX, 2 * nY, 2 * j + 1, 2 * i),\r\n                constructRay(2 * nX, 2 * nY, 2 * j + 1 , 2 * i + 1)};\r\n        for (int ray = 0; ray < 4; ray ++){\r\n            Color currentColor = rayTracerBase.traceRay(beam[ray]);\r\n            if (!currentColor.equals(centerColor))\r\n                currentColor = calcAdaptiveSuperSampling(2 * nX, 2 * nY,\r\n                        2 * j + ray / 2, 2 * i + ray % 2, (maxLevel - 1),currentColor);\r\n            color = color.add(currentColor);\r\n        }\r\n        return color.reduce(5);\r\n    }\r\n\r\n    private Color castBeamAdaptiveSuperSampling(int i, int j) throws IllegalAccessException {\r\n        Ray center = constructRay(imageWriter.getNx(), imageWriter.getNy(), j, i);\r\n        Color centerColor = rayTracerBase.traceRay(center);\r\n        return calcAdaptiveSuperSampling(imageWriter.getNx(), imageWriter.getNy(), j, i, maxLevelAdaptiveSS, centerColor);\r\n    }\r\n\r\n    private Color castBeamSuperSampling(int j, int i) throws IllegalAccessException {\r\n        //  שולחת לפונקציה כדי ליצור קרניים\r\n        List<Ray> beam = constructBeamSuperSampling (imageWriter.getNx(),imageWriter.getNy(), j, i);\r\n        Color color = Color.BLACK;\r\n        // סוכם את הצבעים שכל קרן מחזירה\r\n        for (Ray ray : beam){\r\n            color = color.add(rayTracerBase.traceRay(ray));//?\r\n        }\r\n        // מחזיר ממוצע\r\n        return color.reduce(nss);\r\n    }\r\n    public Camera renderImageSuperSampling() throws IllegalAccessException {\r\n        if (imageWriter == null || rayTracerBase == null || isNaN(width) || isNaN(height) || isNaN(distance)) {\r\n            if (imageWriter == null) {\r\n                throw new MissingResourceException(\"missing resources\", \"Camera\", \"imageWriter\");\r\n            }\r\n            if (rayTracerBase == null) {\r\n                throw new MissingResourceException(\"missing resources\", \"Camera\", \"rayTracerBase\");\r\n            }\r\n            if (isNaN(width)) {\r\n                throw new MissingResourceException(\"missing resources\", \"Camera\", \"width\");\r\n            }\r\n            if (isNaN(height)) {\r\n                throw new MissingResourceException(\"missing resources\", \"Camera\", \"height\");\r\n            }\r\n            if (isNaN(distance)) {\r\n                throw new MissingResourceException(\"missing resources\", \"Camera\", \"distance\");\r\n            }\r\n            throw new UnsupportedOperationException();\r\n        }\r\n        int nX = this.imageWriter.getNx();\r\n        int nY = this.imageWriter.getNy();\r\n        for (int i= 0; i< nX; i++)\r\n            for  (int j = 0; j < nY; j++){\r\n                {\r\n                    //Ray ray = constructRay(nX, nY, j, i);\r\n                    Color color = castBeamAdaptiveSuperSampling(j,i);\r\n                    imageWriter.writePixel(j, i, color);\r\n                }\r\n            }\r\n        return this;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/renderer/Camera.java b/src/renderer/Camera.java
--- a/src/renderer/Camera.java	
+++ b/src/renderer/Camera.java	
@@ -179,16 +179,6 @@
     }
 
 
-    /** Cast ray from camera and color a pixel
-     * @param nX resolution on X axis (number of pixels in row)
-     * @param nY resolution on Y axis (number of pixels in column)
-     * @param col pixel's column number (pixel index in row)
-     * @param row pixel's row number (pixel index in column)
-     */
-    private void castRay(int nX, int nY, int col, int row) throws IllegalAccessException {
-        imageWriter.writePixel(col, row, rayTracerBase.traceRay(constructRay(nX, nY, col, row)));
-        pixelManager.pixelDone();
-    }
 
 
 
@@ -220,24 +210,7 @@
         imageWriter.writeToImage();
     }
     public Camera renderImage() throws IllegalAccessException {
-        if (imageWriter == null || rayTracerBase == null || isNaN(width) || isNaN(height) || isNaN(distance)) {
-            if (imageWriter == null) {
-                throw new MissingResourceException("missing resources", "Camera", "imageWriter");
-            }
-            if (rayTracerBase == null) {
-                throw new MissingResourceException("missing resources", "Camera", "rayTracerBase");
-            }
-            if (isNaN(width)) {
-                throw new MissingResourceException("missing resources", "Camera", "width");
-            }
-            if (isNaN(height)) {
-                throw new MissingResourceException("missing resources", "Camera", "height");
-            }
-            if (isNaN(distance)) {
-                throw new MissingResourceException("missing resources", "Camera", "distance");
-            }
-            throw new UnsupportedOperationException();
-        }
+        everythingInitialized();
         int nX = this.imageWriter.getNx();
         int nY = this.imageWriter.getNy();
         pixelManager = new PixelManager(nY, nX,printInterval);//לחזור
@@ -246,27 +219,38 @@
                 for (int j = 0; j < nX; ++j)
                     castRay(nX, nY, j, i);
         }
-        else {
-            var threads = new LinkedList<Thread>(); // list of threads
-            while (threadsCount-- > 0) // add appropriate number of threads
-                threads.add(new Thread(() -> { // add a thread with its code
-                    PixelManager.Pixel pixel; // current pixel(row,col)
-                    // allocate pixel(row,col) in loop until there are no more pixels
-                    while ((pixel = pixelManager.nextPixel()) != null)
-                        // cast ray through pixel (and color it – inside castRay)
-                    {
-                        try {
-                            castRay(nX, nY, pixel.col(), pixel.row());
-                        } catch (IllegalAccessException e) {
-                            throw new RuntimeException(e);
-                        }
-                    }
-                }));
+        else { // see further... option 1
+            IntStream.range(0, nY).parallel()
+                    .forEach(i -> IntStream.range(0, nX).parallel() // for each row:
+                            .forEach(j -> {
+                                try {
+                                    castRay(nX, nY, j, i);
+                                } catch (IllegalAccessException e) {
+                                    throw new RuntimeException(e);
+                                }
+                            }));
+        }
+//        else {
+//            var threads = new LinkedList<Thread>(); // list of threads
+//            while (threadsCount-- > 0) // add appropriate number of threads
+//                threads.add(new Thread(() -> { // add a thread with its code
+//                    PixelManager.Pixel pixel; // current pixel(row,col)
+//                    // allocate pixel(row,col) in loop until there are no more pixels
+//                    while ((pixel = pixelManager.nextPixel()) != null)
+//                        // cast ray through pixel (and color it – inside castRay)
+//                    {
+//                        try {
+//                            castRay(nX, nY, pixel.col(), pixel.row());
+//                        } catch (IllegalAccessException e) {
+//                            throw new RuntimeException(e);
+//                        }
+//                    }
+//                }));
             // start all the threads
-            for (var thread : threads) thread.start();
-            // wait until all the threads have finished
-            try { for (var thread : threads) thread.join(); } catch (InterruptedException ignore) {}
-        }
+//            for (var thread : threads) thread.start();
+//            // wait until all the threads have finished
+//            try { for (var thread : threads) thread.join(); } catch (InterruptedException ignore) {}
+//        }
         return this;
     }
 
@@ -338,10 +322,21 @@
         return color.reduce(5);
     }
 
-    private Color castBeamAdaptiveSuperSampling(int i, int j) throws IllegalAccessException {
+    /** Cast ray from camera and color a pixel
+     * @param nX resolution on X axis (number of pixels in row)
+     * @param nY resolution on Y axis (number of pixels in column)
+     * @param col pixel's column number (pixel index in row)
+     * @param row pixel's row number (pixel index in column)
+     */
+    private void castRay(int nX, int nY, int col, int row) throws IllegalAccessException {
+        imageWriter.writePixel(col, row, rayTracerBase.traceRay(constructRay(nX, nY, col, row)));
+        pixelManager.pixelDone();
+    }
+    private void castBeamAdaptiveSuperSampling( int j,int i) throws IllegalAccessException {
         Ray center = constructRay(imageWriter.getNx(), imageWriter.getNy(), j, i);
         Color centerColor = rayTracerBase.traceRay(center);
-        return calcAdaptiveSuperSampling(imageWriter.getNx(), imageWriter.getNy(), j, i, maxLevelAdaptiveSS, centerColor);
+        imageWriter.writePixel(j,i,calcAdaptiveSuperSampling(imageWriter.getNx(), imageWriter.getNy(), j, i, maxLevelAdaptiveSS, centerColor)) ;//check
+        pixelManager.pixelDone();
     }
 
     private Color castBeamSuperSampling(int j, int i) throws IllegalAccessException {
@@ -355,7 +350,7 @@
         // מחזיר ממוצע
         return color.reduce(nss);
     }
-    public Camera renderImageSuperSampling() throws IllegalAccessException {
+    public void everythingInitialized(){
         if (imageWriter == null || rayTracerBase == null || isNaN(width) || isNaN(height) || isNaN(distance)) {
             if (imageWriter == null) {
                 throw new MissingResourceException("missing resources", "Camera", "imageWriter");
@@ -374,18 +369,46 @@
             }
             throw new UnsupportedOperationException();
         }
+    }
+    public Camera renderImageSuperSampling() throws IllegalAccessException {
+        everythingInitialized();
         int nX = this.imageWriter.getNx();
         int nY = this.imageWriter.getNy();
         for (int i= 0; i< nX; i++)
             for  (int j = 0; j < nY; j++){
                 {
-                    //Ray ray = constructRay(nX, nY, j, i);
-                    Color color = castBeamAdaptiveSuperSampling(j,i);
+                    Color color = castBeamSuperSampling(j,i);
                     imageWriter.writePixel(j, i, color);
                 }
             }
         return this;
     }
+    public Camera renderImageAdaptiveSuperSampling() throws IllegalAccessException {
+        everythingInitialized();
+        int nX = this.imageWriter.getNx();
+        int nY = this.imageWriter.getNy();
+        pixelManager = new PixelManager(nY, nX, printInterval);
+        if (threadsCount == 0)
+            for (int i= 0; i< nX; i++)
+                for  (int j = 0; j < nY; j++){
+                    {
+                        castBeamAdaptiveSuperSampling(j,i);
+
+                    }
+                }
+        else { // see further... option 1
+            IntStream.range(0, nY).parallel()
+                    .forEach(i -> IntStream.range(0, nX).parallel() // for each row:
+                            .forEach(j -> {
+                                try {
+                                    castBeamAdaptiveSuperSampling(j,i);
+                                } catch (IllegalAccessException e) {
+                                    throw new RuntimeException(e);
+                                }
+                            }));}
+
+            return this;
+    }
 
 
 }
Index: src/geometries/Triangle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package geometries;\r\n\r\nimport primitives.Point;\r\nimport primitives.Ray;\r\nimport primitives.Vector;\r\n\r\nimport java.util.List;\r\n\r\nimport static primitives.Util.alignZero;\r\nimport static primitives.Util.isZero;\r\n\r\n/**\r\n * The Triangle class represents a triangle in 3D space.\r\n */\r\npublic class Triangle extends Polygon {\r\n\r\n    /**\r\n     * Constructs a Triangle object with the given points.\r\n     *\r\n     * @param p1 the first Point of the triangle\r\n     * @param p2 the second Point of the triangle\r\n     * @param p3 the third Point of the triangle\r\n     * @throws IllegalAccessException if any of the given points are null\r\n     */\r\n    public Triangle(Point p1, Point p2, Point p3) throws IllegalAccessException {\r\n        super(p1, p2, p3);\r\n        if (bvhIsOn) createBoundingBox();\r\n    }\r\n\r\n    /**\r\n     * find intersection between ray and  2D triangle\r\n     *\r\n     * @param ray ray towards object\r\n     * @return immutable list of one intersection point as  {@link GeoPoint} object\r\n     */\r\n    @Override\r\n    protected List<GeoPoint> findGeoIntersectionsHelper(Ray ray, double maxDistance) throws IllegalAccessException {\r\n        if(!box.isIntersectingBoundingBox(ray)) return null;\r\n\r\n        // check if ray intersects plane containing the triangle\r\n        List<GeoPoint> result = plane.findGeoIntersections(ray);\r\n        // no intersections\r\n        if (result == null)\r\n            return null;\r\n\r\n        //check that intersection point is closer to ray origin than\r\n        // max distance parameter\r\n        double distance = result.get(0).point.distance(ray.getP0());\r\n        if (alignZero(distance - maxDistance) > 0)\r\n            return null;\r\n\r\n        // check if intersection points are in Triangle\r\n        Vector v = ray.getDir();\r\n        Point p0 = ray.getP0();\r\n\r\n        // create three vectors between ray origin and\r\n        //each of triangle vertices\r\n        Point p1 = vertices.get(0);\r\n        Point p2 = vertices.get(1);\r\n        Point p3 = vertices.get(2);\r\n        Vector v1 = p1.subtract(p0);\r\n        Vector v2 = p2.subtract(p0);\r\n        Vector v3 = p3.subtract(p0);\r\n\r\n        // n1,n2 ,n3 = value of dot product between ray vector\r\n        // and the result vector of cross product between pairs\r\n        // of vectors from ray origin and triangle vertices\r\n        // if n1 or n2 pr m3 == 0 - intersection on border -> no intersection\r\n\r\n        double n1 = v.dotProduct(v1.crossProduct(v2));\r\n        if (isZero(n1))\r\n            return null;\r\n\r\n        double n2 = v.dotProduct(v2.crossProduct(v3));\r\n        if (isZero(n2))\r\n            return null;\r\n\r\n        double n3 = v.dotProduct(v3.crossProduct(v1));\r\n        if (isZero(n3))\r\n            return null;\r\n\r\n        // if sign of all three values ,n1 ,n2 ,n3 is not equal\r\n        // intersection point is not on triangle\r\n        if (!((n1 < 0 && n2 < 0 && n3 < 0) || (n1 > 0 && n2 > 0 && n3 > 0)))\r\n            return null;\r\n\r\n        // ray intersects triangle\r\n        return List.of(new GeoPoint(this, result.get(0).point));\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Triangle: \" +\r\n                \"vertices = \" + vertices +\r\n                \", plane = \" + plane;\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/geometries/Triangle.java b/src/geometries/Triangle.java
--- a/src/geometries/Triangle.java	
+++ b/src/geometries/Triangle.java	
@@ -35,8 +35,6 @@
      */
     @Override
     protected List<GeoPoint> findGeoIntersectionsHelper(Ray ray, double maxDistance) throws IllegalAccessException {
-        if(!box.isIntersectingBoundingBox(ray)) return null;
-
         // check if ray intersects plane containing the triangle
         List<GeoPoint> result = plane.findGeoIntersections(ray);
         // no intersections
